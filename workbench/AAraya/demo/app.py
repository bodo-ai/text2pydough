import streamlit as st
from llm import LLMClient

st.image("logo.png", width=150, use_container_width=False)

# ---------------------- APP HEADER ----------------------
st.title("PyDough LLM Demo")

st.markdown(
    """
    This interactive demo allows you to generate **PyDough queries** from natural language instructions.  
    Simply enter a query for the **TPCH database**, run it, and explore the results using the dropdown below.  

    You can inspect:
    - **Code**: The PyDough query generated by the LLM.
    - **Full Explanation**: A detailed explanation of how the query works.
    - **DataFrame**: The table containing the query results.
    - **SQL**: The SQL equivalent of the PyDough query.
    - **Exception**: Stores any errors encountered while executing the query.
    - **Original Question**: The natural language question input by the user.
    - **Base Prompt**: The initial instruction given to the LLM to generate the query.
    - **Cheat Sheet**: A reference guide or example queries to help the LLM structure responses.
    - **Knowledge Graph**: The metadata structure that informs the LLM about available collections and relationships.
    """
)

# ---------------------- EXAMPLES MODAL (WIDE & SUBTLE BUTTON) ----------------------
@st.dialog("ðŸ’¡ Example Queries for TPCH", width="large") 
def show_examples():
    st.header("Example Queries")
    examples = [
        "Total customers & suppliers per nation, ordered by nation name.",
        "Top 5 nations with most customer orders in 1995.",
        "Region with highest total order value in 1996.\n\nSUM(extended_price * (1 - discount))",
        "Top 3 regions with most distinct customers.",
        "Customers & order count in 1995 (Europe) with balance > $700.",
        "Top 10 customers who bought 'green' products in 1998 (with quantity & address).",
        "Customers with more orders in 1995 than 1994.",
        "Avg. order value per nation.\n\nSUM(extended_price * quantity)",
        "Total revenue per customer in 1994.\n\nSUM(extended_price * (1 - discount))",
        "Customer key, name & revenue in 1994.\n\nSUM(extended_price * (1 - discount))",
        "Customers ending in zero with 30-lowest balances.",
        "Customers with >10 orders, showing name & total order count.",
        "Orders from 1998 with total price > $100, sorted by price.",
        "Customers who ordered in 1996 but not in 1997, with email & total spent (> $200)."
    ]

    for example in examples:
            st.code(example, language="")

col1, col2 = st.columns([0.85, 0.95]) 
with col1:
    st.write("Don't know what to write? Check out our")
with col2: 
    if st.button("Examples"):
        show_examples()

# ---------------------- QUERY INPUT ----------------------
st.header("Try it Out!")

query = st.text_input("Enter your query:", "List all customers from United States")

if st.button("Run Query"):
    try:
        client = LLMClient()
        result = client.ask(query)
        st.session_state.result = result 
        st.success("Query executed successfully! âœ…")
    except Exception as e:
        st.error(f"Error running query: {e}")

# ---------------------- DISPLAY RESULTS ----------------------
if "result" in st.session_state:
    result = st.session_state.result
    
    st.subheader("Output:")
    selected_output = st.selectbox(
        "Select what to view:",
        ["Code", "Full Explanation", "DataFrame", "SQL", "Exception", 
         "Original Question", "Base Prompt", "Cheat Sheet", "Knowledge Graph"],  
        key="dropdown",
    )
    st.markdown("---")  

    if selected_output == "Code":
        st.code(result.code, language="python")
    elif selected_output == "Full Explanation":
        st.write(result.full_explanation)
    elif selected_output == "DataFrame":
        st.dataframe(result.df) if hasattr(result, "df") else st.write("No dataframe available.")
    elif selected_output == "SQL": 
        st.code(result.sql, language="sql") if hasattr(result, "sql") else st.write("No SQL available.")
    elif selected_output == "Exception":
        st.write(result.exception)
    elif selected_output == "Original Question":
        st.write(result.original_question)
    elif selected_output == "Base Prompt":
        st.write(result.base_prompt)
    elif selected_output == "Cheat Sheet":
        st.write(result.cheat_sheet)
    elif selected_output == "Knowledge Graph":
        st.write(result.knowledge_graph)

    # ---------------------- DISCOURSE FUNCTIONALITY (Only Show If Result Exists) ----------------------
    st.header("Improve Query with Discourse")
    st.markdown(
        """
        You can **refine your query** by adding follow-up information. Each time you run discourse, it will update the query with new details.  
        If you want a completely new query, change it in the first section above.
        """
    )

    follow_up = st.text_input("Add follow-up information to refine the query:")

    if st.button("Run Discourse"):
        if follow_up:
            try:
                client = LLMClient()
                improved_result = client.discourse(result, follow_up)
                st.session_state.improved_result = improved_result
                st.success("Query refined successfully! âœ…")
            except Exception as e:
                st.error(f"Error running discourse: {e}")
        else:
            st.warning("Enter follow-up information.")

    # ---------------------- DISPLAY IMPROVED RESULTS ----------------------
    if "improved_result" in st.session_state:
        improved_result = st.session_state.improved_result

        st.subheader("Refined Query Output:")
        selected_output_improved = st.selectbox(
            "Select what to view (Refined Query):",
            ["Code", "Full Explanation", "DataFrame", "SQL", "Exception"],  
            key="dropdown_improved",
        )
        st.markdown("---")  

        if selected_output_improved == "Code":
            st.code(improved_result.code, language="python")
        elif selected_output_improved == "Full Explanation":
            st.write(improved_result.full_explanation)
        elif selected_output_improved == "DataFrame":
            st.dataframe(improved_result.df) if hasattr(improved_result, "df") else st.write("No dataframe available.")
        elif selected_output_improved == "SQL": 
            st.code(improved_result.sql, language="sql") if hasattr(improved_result, "sql") else st.write("No SQL available.")
        elif selected_output_improved == "Exception":
            st.write(improved_result.exception)
