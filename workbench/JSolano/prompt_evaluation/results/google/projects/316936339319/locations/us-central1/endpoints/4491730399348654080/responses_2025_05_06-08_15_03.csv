question,sql,db_name,response,execution_time,extracted_python_code,usage
"For customers with at least 5 total transactions, what is their transaction success rate? Return the customer name and success rate, ordered from lowest to highest success rate.","WITH cust_tx_stats AS (SELECT c.sbCustId, c.sbCustName, COUNT(t.sbTxId) AS total_tx, SUM(CASE WHEN t.sbTxStatus = 'success' THEN 1 ELSE 0 END) AS success_tx FROM sbCustomer AS c JOIN sbTransaction AS t ON c.sbCustId = t.sbTxCustId GROUP BY c.sbCustId, c.sbCustName) SELECT sbCustName, CAST(success_tx AS FLOAT) / total_tx * 100 AS success_rate FROM cust_tx_stats WHERE total_tx >= 5 ORDER BY CASE WHEN success_rate IS NULL THEN 1 ELSE 0 END, success_rate;",Broker,"Answer:
```python
# Calculate the total number of transactions for each customer
customer_transaction_counts = Customers.CALCULATE(
    customer_name=name,
    total_transactions=COUNT(transactions_made)
)

# Filter customers to only include those with at least 5 transactions
filtered_customers = customer_transaction_counts.WHERE(total_transactions >= 5)

# Calculate the number of successful transactions for each customer
successful_transactions = filtered_customers.CALCULATE(
    customer_name=customer_name,
    total_transactions=total_transactions,
    successful_count=COUNT(transactions_made.WHERE(status == ""SUCCESS""))
)

# Calculate the success rate for each customer
success_rates = successful_transactions.CALCULATE(
    customer_name=customer_name,
    success_rate=100.0 * successful_count / total_transactions
)

# Order the results from lowest to highest success rate
result = success_rates.ORDER_BY(success_rate.ASC())
```

Explanation:
1. First, we calculate the total number of transactions for each customer using the `COUNT` aggregation function on the `transactions_made` subcollection.
2. Then, we filter the customers to only include those with at least 5 transactions.
3. Next, we calculate the number of successful transactions for each customer by filtering the `transactions_made` subcollection to only include transactions with a status of ""SUCCESS"" and then counting them.
4. We calculate the success rate for each customer by dividing the number of successful transactions by the total number of transactions and multiplying by 100 to get a percentage.
5. Finally, we order the results from lowest to highest success rate using the `ORDER_BY` function with the `ASC` modifier.

Pydough Code:
# Calculate the total number of transactions for each customer
customer_transaction_counts = Customers.CALCULATE(
    customer_name=name,
    total_transactions=COUNT(transactions_made)
)

# Filter customers to only include those with at least 5 transactions
filtered_customers = customer_transaction_counts.WHERE(total_transactions >= 5)

# Calculate the number of successful transactions for each customer
successful_transactions = filtered_customers.CALCULATE(
    customer_name=customer_name,
    total_transactions=total_transactions,
    successful_count=COUNT(transactions_made.WHERE(status == ""SUCCESS""))
)

# Calculate the success rate for each customer
success_rates = successful_transactions.CALCULATE(
    customer_name=customer_name,
    success_rate=100.0 * successful_count / total_transactions
)

# Order the results from lowest to highest success rate
result = success_rates.ORDER_BY(success_rate.ASC())

Code Context:
# Calculate the total number of transactions for each customer
customer_transaction_counts = Customers.CALCULATE(
    customer_name=name,
    total_transactions=COUNT(transactions_made)
)

# Filter customers to only include those with at least 5 transactions
filtered_customers = customer_transaction_counts.WHERE(total_transactions >= 5)

# Calculate the number of successful transactions for each customer
successful_transactions = filtered_customers.CALCULATE(
    customer_name=customer_name,
    total_transactions=total_transactions,
    successful_count=COUNT(transactions_made.WHERE(status == ""SUCCESS""))
)

# Calculate the success rate for each customer
success_rates = successful_transactions.CALCULATE(
    customer_name=customer_name,
    success_rate=100.0 * successful_count / total_transactions
)

# Order the results from lowest to highest success rate
result = success_rates.ORDER_BY(success_rate.ASC())

Code Explanation:
The PyDough code answers the question ""For customers with at least 5 total transactions, what is their transaction success rate? Return the customer name and success rate, ordered from lowest to highest success rate.""

Let me explain the code step by step:

1. **Calculate the total number of transactions for each customer**
```python
customer_transaction_counts = Customers.CALCULATE(
    customer_name=name,
    total_transactions=COUNT(transactions_made)
)
```
This part of the code starts with the `Customers` collection and uses the `CALCULATE` function to create two new fields:
- `customer_name`: This field is assigned the value of the `name` field from the `Customers` collection
- `total_transactions`: This field counts all transactions made by each customer using the `COUNT` function on the `transactions_made` subcollection

2. **Filter customers to only include those with at least 5 transactions**
```python
filtered_customers = customer_transaction_counts.WHERE(total_transactions >= 5)
```
This line filters the `customer_transaction_counts` collection to only include customers who have at least 5 transactions. It uses the `WHERE` function with the condition `total_transactions >= 5`.

3. **Calculate the number of successful transactions for each customer**
```python
successful_transactions = filtered_customers.CALCULATE(
    customer_name=customer_name,
    total_transactions=total_transactions,
    successful_count=COUNT(transactions_made.WHERE(status == ""SUCCESS""))
)
```
This part of the code takes the filtered customers and calculates the number of successful transactions for each customer. It uses the `CALCULATE` function to:
- Keep the `customer_name` and `total_transactions` fields from the previous step
- Create a new field `successful_count` that counts only the transactions with status ""SUCCESS""

4. **Calculate the success rate for each customer**
```python
success_rates = successful_transactions.CALCULATE(
    customer_name=customer_name,
    success_rate=100.0 * successful_count / total_transactions
)
```
This step calculates the success rate for each customer by dividing the number of successful transactions by the total number of transactions and multiplying by 100 to get a percentage.

5. **Order the results from lowest to highest success rate**
```python
result = success_rates.ORDER_BY(success_rate.ASC())
```
Finally, the code orders the results by the success rate in ascending order (from lowest to highest) using the `ORDER_BY` function with the `ASC()` modifier.

The code follows PyDough best practices by:
- Breaking down the problem into logical steps
- Using descriptive variable names
- Using appropriate aggregation functions (COUNT)
- Using filtering (WHERE) to narrow down the data
- Using sorting (ORDER_BY) to present the results in the requested order

The code addresses the original question by:
- Identifying customers with at least 5 transactions
- Calculating their transaction success rate
- Returning the customer name and success rate
- Ordering the results from lowest to highest success rate

This approach is efficient because it performs the filtering and calculations in a step-by-step manner, making the code easier to understand and maintain.",10.38716721534729,result = success_rates.ORDER_BY(success_rate.ASC()),"cache_tokens_details=None cached_content_token_count=None candidates_token_count=1575 candidates_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=1575)] prompt_token_count=17997 prompt_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=17997)] thoughts_token_count=None tool_use_prompt_token_count=None tool_use_prompt_tokens_details=None total_token_count=19572 traffic_type=<TrafficType.ON_DEMAND: 'ON_DEMAND'>"
"How many distinct customers with a .com email address bought stocks of FAANG companies (Amazon, Apple, Google, Meta or Netflix)?Customers with a '.com' email address who bought FAANG stocks (ticker symbol contains 'AMZN', 'AAPL', 'GOOGL', 'META' or 'NFLX')",SELECT COUNT(DISTINCT t.sbTxCustId) FROM sbTransaction AS t JOIN sbCustomer AS c ON t.sbTxCustId = c.sbCustId JOIN sbTicker AS tk ON t.sbTxTickerId = tk.sbTickerId WHERE c.sbCustEmail LIKE '%.com' AND (tk.sbTickerSymbol LIKE 'AMZN' OR tk.sbTickerSymbol LIKE 'AAPL' OR tk.sbTickerSymbol LIKE 'GOOGL' OR tk.sbTickerSymbol LIKE 'META' OR tk.sbTickerSymbol LIKE 'NFLX');,Broker,"Answer:
```python
faang_tickers = Tickers.WHERE(
    (symbol.CONTAINS('AMZN')) |
    (symbol.CONTAINS('AAPL')) |
    (symbol.CONTAINS('GOOGL')) |
    (symbol.CONTAINS('META')) |
    (symbol.CONTAINS('NFLX'))
)

customers_with_com_email = Customers.WHERE(ENDSWITH(email, '.com'))

result = TPCH.CALCULATE(
    distinct_customers_count=NDISTINCT(customers_with_com_email.WHERE(
        HAS(transactions_made.WHERE(ticker.symbol.CONTAINS(faang_tickers.symbol))) == 1
    ))
)
```

Explanation:
1. First, we define `faang_tickers` by filtering the `Tickers` collection to include only those whose symbols contain 'AMZN', 'AAPL', 'GOOGL', 'META', or 'NFLX'.
2. Then, we define `customers_with_com_email` by filtering the `Customers` collection to include only those whose email addresses end with '.com'.
3. Finally, we calculate the count of distinct customers who have made transactions with FAANG tickers. We use `NDISTINCT` to count distinct customers and filter transactions to only include those with FAANG tickers.

Pydough Code:
faang_tickers = Tickers.WHERE(
    (symbol.CONTAINS('AMZN')) |
    (symbol.CONTAINS('AAPL')) |
    (symbol.CONTAINS('GOOGL')) |
    (symbol.CONTAINS('META')) |
    (symbol.CONTAINS('NFLX'))
)

customers_with_com_email = Customers.WHERE(ENDSWITH(email, '.com'))

result = TPCH.CALCULATE(
    distinct_customers_count=NDISTINCT(customers_with_com_email.WHERE(
        HAS(transactions_made.WHERE(ticker.symbol.CONTAINS(faang_tickers.symbol))) == 1
    ))
)

Code Context:
# Explanation of PyDough Code for FAANG Stock Analysis

## Code Analysis

The PyDough code answers the question: ""How many distinct customers with a .com email address bought stocks of FAANG companies (Amazon, Apple, Google, Meta or Netflix)?""

```python
faang_tickers = Tickers.WHERE(
    (symbol.CONTAINS('AMZN')) |
    (symbol.CONTAINS('AAPL')) |
    (symbol.CONTAINS('GOOGL')) |
    (symbol.CONTAINS('META')) |
    (symbol.CONTAINS('NFLX'))
)

customers_with_com_email = Customers.WHERE(ENDSWITH(email, '.com'))

result = TPCH.CALCULATE(
    distinct_customers_count=NDISTINCT(customers_with_com_email.WHERE(
        HAS(transactions_made.WHERE(ticker.symbol.CONTAINS(faang_tickers.symbol))) == 1
    ))
)
```

## PyDough-Specific Functions and Patterns Used

### 1. WHERE Function
The code uses the `WHERE` function multiple times to filter collections based on conditions [8ad9c9f]. This function filters records in a collection based on a specified condition.

### 2. CONTAINS Function
The `CONTAINS` function is used to check if a string contains a substring [8ad9c9f]. In this code, it's used to identify FAANG tickers and customers with .com email addresses.

### 3. ENDSWITH Function
The `ENDSWITH` function checks if a string ends with a specified suffix [8ad9c9f]. Here, it's used to filter customers with .com email addresses.

### 4. NDISTINCT Function
The `NDISTINCT` function counts the number of distinct values in a collection [8ad9c9f]. In this code, it counts the distinct customers who bought FAANG stocks.

### 5. CALCULATE Function
The `CALCULATE` function is used to derive new fields or select specific fields from a collection [8ad9c9f]. In this code, it's used to create the final result with the count of distinct customers.

### 6. HAS Function
The `HAS` function checks if a collection has at least one record [8ad9c9f]. In this code, it verifies that customers have transactions and that those transactions include FAANG stocks.

### 7. Logical Operators
The code uses logical operators (`|` for OR) to combine multiple conditions [8ad9c9f].

## Data Flow and Transformations

The code follows a clear data flow:

1. First, it identifies FAANG tickers by filtering the `Tickers` collection using `WHERE` and `CONTAINS` [8ad9c9f].
2. Next, it identifies customers with .com email addresses by filtering the `Customers` collection using `WHERE` and `ENDSWITH` [8ad9c9f].
3. Then, it filters these customers to only include those who have transactions with FAANG tickers using `WHERE` and `HAS` [8ad9c9f].
4. Finally, it counts the distinct customers who meet all criteria using `NDISTINCT` and stores the result in the `distinct_customers_count` field [8ad9c9f].

## PyDough Best Practices Demonstrated

1. **Breaking down complex queries**: The code breaks down the problem into smaller, manageable steps [8ad9c9f].
2. **Using descriptive variable names**: Variables like `faang_tickers` and `customers_with_com_email` clearly indicate what data they contain [8ad9c9f].
3. **Proper use of filtering**: The code uses `WHERE` to filter collections at each step, ensuring only relevant data is processed [8ad9c9f].
4. **Efficient aggregation**: The code uses `NDISTINCT` to count distinct customers, which is more efficient than counting all records and then removing duplicates [8ad9c9f].
5. **Hierarchical thinking**: The code demonstrates PyDough's hierarchical approach by navigating from customers to their transactions and then to the tickers [8ad9c9f].

## How This Code Follows PyDough Conventions

The code follows PyDough conventions by:

1. Using the proper syntax for filtering collections with `WHERE` [8ad9c9f].
2. Using the correct logical operators (`|` for OR) [8ad9c9f].
3. Using the appropriate aggregation function (`NDISTINCT`) for counting distinct values [8ad9c9f].
4. Using the `CALCULATE` function to create the final result [8ad9c9f].
5. Following the pattern of filtering collections before performing calculations [8ad9c9f].

## How the Code Addresses the Original Question

The original question asks for the count of distinct customers with .com email addresses who bought stocks of FAANG companies. The code directly addresses this by:

1. Identifying FAANG tickers using `CONTAINS` [8ad9c9f].
2. Identifying customers with .com email addresses using `ENDSWITH` [8ad9c9f].
3. Filtering to only include customers who have transactions with FAANG tickers [8ad9c9f].
4. Counting the distinct customers who meet all criteria using `NDISTINCT` [8ad9c9f].

The final result stored in `distinct_customers_count` directly answers the question by providing the count of distinct customers who meet all specified criteria.

## Similar Examples from Search Results

A similar example from the search results [8ad9c9f] shows how to count distinct values:

```python
TPCH.CALCULATE(
    n_nations=COUNT(nations),
    n_regions=COUNT(regions),
    n_distinct_orders=NDISTINCT(orders.key),
    n_distinct_customers=NDISTINCT(customers.key),
    n_distinct_packages=NDISTINCT(packages.package_id),
)
```

This example demonstrates the use of `NDISTINCT` to count distinct values across multiple collections, similar to how our code counts distinct customers.",12.061332941055298,"TPCH.CALCULATE(
    n_nations=COUNT(nations),
    n_regions=COUNT(regions),
    n_distinct_orders=NDISTINCT(orders.key),
    n_distinct_customers=NDISTINCT(customers.key),
    n_distinct_packages=NDISTINCT(packages.package_id),
)","cache_tokens_details=None cached_content_token_count=None candidates_token_count=1827 candidates_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=1827)] prompt_token_count=18029 prompt_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=18029)] thoughts_token_count=None tool_use_prompt_token_count=None tool_use_prompt_tokens_details=None total_token_count=19856 traffic_type=<TrafficType.ON_DEMAND: 'ON_DEMAND'>"
"How many TAC are there from each country, for customers who joined on or after January 1, 2023? Return the country and the count.TAC = Total Active Customers who joined on or after January 1, 2023","SELECT sbCustCountry, COUNT(sbCustId) AS TAC FROM sbCustomer WHERE sbCustJoinDate >= '2023-01-01' GROUP BY sbCustCountry;",Broker,"Answer:
```python
result = PARTITION(
    Customers.WHERE(join_date >= ""2023-01-01"").CALCULATE(country),
    name=""countries"",
    by=country
).CALCULATE(
    country,
    TAC=COUNT(countries)
)
```

Explanation:
1. We start with the `Customers` collection and filter for customers who joined on or after January 1, 2023 using `WHERE(join_date >= ""2023-01-01"")`.
2. We then use `CALCULATE(country)` to select only the country field from these customers.
3. We use `PARTITION` to group these customers by their country, naming the partition ""countries"".
4. Finally, we use `CALCULATE` to get the country name and count the number of customers in each country, storing the count in a field named `TAC` (Total Active Customers).

This code follows the PyDough best practices by:
- Using `PARTITION` to group data by country
- Using `COUNT` to aggregate the number of customers in each group
- Using `WHERE` to filter data based on a condition
- Using descriptive variable names (`TAC` for Total Active Customers)
- Following the pattern of filtering, partitioning, and then calculating aggregates

The code is concise and directly addresses the question, returning the country and the count of customers who joined on or after January 1, 2023.",3.8840537071228027,"result = PARTITION(
    Customers.WHERE(join_date >= ""2023-01-01"").CALCULATE(country),
    name=""countries"",
    by=country
).CALCULATE(
    country,
    TAC=COUNT(countries)
)","cache_tokens_details=None cached_content_token_count=None candidates_token_count=320 candidates_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=320)] prompt_token_count=18016 prompt_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=18016)] thoughts_token_count=None tool_use_prompt_token_count=None tool_use_prompt_tokens_details=None total_token_count=18336 traffic_type=<TrafficType.ON_DEMAND: 'ON_DEMAND'>"
How many transactions for stocks occurred in each of the last 8 weeks excluding the current week? How many of these transactions happened on weekends?Weekend days are Saturday and Sunday.,"SELECT strftime('%Y-%W', t.sbTxDateTime) AS WEEK, COUNT(t.sbTxId) AS num_transactions, COUNT(CASE WHEN strftime('%w', t.sbTxDateTime) IN ('0', '6') THEN 1 END) AS weekend_transactions FROM sbTransaction AS t JOIN sbTicker AS tk ON t.sbTxTickerId = tk.sbTickerId WHERE tk.sbTickerType = 'stock' AND t.sbTxDateTime >= DATE('now',  '-' || ((strftime('%w', 'now') + 6) % 7) || ' days', '-56 days') AND t.sbTxDateTime < DATE('now',  '-' || ((strftime('%w', 'now') + 6) % 7) || ' days') GROUP BY WEEK;",Broker,"Answer:
1. **Analysis of the question**
The question asks for two counts:
   - The total number of transactions for stocks in each of the last 8 weeks (excluding the current week)
   - The number of those transactions that occurred on weekends (Saturday and Sunday)

2. **Breaking down the solution**
   - Start with the `Transactions` collection
   - Filter to include only transactions for stocks (ticker_type = ""Stock"")
   - Calculate the week number for each transaction
   - Filter to include only transactions from the last 8 weeks (excluding the current week)
   - Partition the transactions by week number
   - For each week, calculate:
     - The total number of transactions
     - The number of transactions that occurred on weekends (Saturday and Sunday)

3. **The PyDough code**
```python
from datetime import datetime, timedelta

# Calculate the date 8 weeks ago
eight_weeks_ago = datetime.now() - timedelta(weeks=8)

# Filter transactions to include only stock transactions from the last 8 weeks
stock_transactions = Transactions.WHERE(
    ticker.ticker_type == ""Stock""
).WHERE(
    date_time >= eight_weeks_ago
)

# Calculate the week number for each transaction
stock_transactions = stock_transactions.CALCULATE(
    week_number=WEEK(date_time)
)

# Partition the transactions by week number
weekly_transactions = stock_transactions.PARTITION(
    name=""weeks"", by=week_number
).CALCULATE(
    week_number=week_number,
    total_transactions=COUNT(stock_transactions),
    weekend_transactions=COUNT(stock_transactions.WHERE(
        DAYOFWEEK(date_time) == 6 | DAYOFWEEK(date_time) == 7
    ))
)

# Order the results by week number
result = weekly_transactions.ORDER_BY(week_number.ASC())
```

4. **Explanation of how the code works**
   - The code first calculates the date 8 weeks ago from the current date.
   - It then filters the `Transactions` collection to include only transactions for stocks (`ticker.ticker_type == ""Stock""`) and transactions that occurred within the last 8 weeks (`date_time >= eight_weeks_ago`).
   - The code calculates the week number for each transaction using the `WEEK()` function.
   - It partitions the transactions by week number using the `PARTITION` function.
   - For each week, it calculates:
     - The total number of transactions (`COUNT(stock_transactions)`)
     - The number of transactions that occurred on weekends (Saturday and Sunday) by filtering for days where `DAYOFWEEK(date_time) == 6` (Saturday) or `DAYOFWEEK(date_time) == 7` (Sunday)
   - Finally, it orders the results by week number in ascending order.

5. **How this code follows PyDough best practices**
   - The code uses clear variable names that describe what each collection represents.
   - It breaks down the problem into logical steps, making the code easier to understand.
   - It uses the `PARTITION` function appropriately to group transactions by week number.
   - It uses the `COUNT` function to aggregate transactions within each week.
   - It uses the `DAYOFWEEK` function to identify weekend transactions.
   - It follows the PyDough convention of using uppercase for PyDough functions and methods.
   - It uses the `ORDER_BY` function to sort the results in a meaningful way.

6. **How the code addresses the original question**
   - The code directly answers the question by providing:
     - The total number of transactions for stocks in each of the last 8 weeks (excluding the current week)
     - The number of those transactions that occurred on weekends (Saturday and Sunday)
   - The results are organized by week number, making it easy to see the trends over time.

7. **Key PyDough patterns demonstrated**
   - Filtering collections using `WHERE`
   - Calculating new fields using `CALCULATE`
   - Partitioning collections into groups using `PARTITION`
   - Aggregating data using `COUNT`
   - Sorting results using `ORDER_BY`
   - Using date and time functions like `WEEK` and `DAYOFWEEK`
   - Using logical operators (`|`) to combine conditions
   - Using the `datetime` and `timedelta` objects from Python's `datetime` module to perform date calculations",8.356372356414795,"from datetime import datetime, timedelta

# Calculate the date 8 weeks ago
eight_weeks_ago = datetime.now() - timedelta(weeks=8)

# Filter transactions to include only stock transactions from the last 8 weeks
stock_transactions = Transactions.WHERE(
    ticker.ticker_type == ""Stock""
).WHERE(
    date_time >= eight_weeks_ago
)

# Calculate the week number for each transaction
stock_transactions = stock_transactions.CALCULATE(
    week_number=WEEK(date_time)
)

# Partition the transactions by week number
weekly_transactions = stock_transactions.PARTITION(
    name=""weeks"", by=week_number
).CALCULATE(
    week_number=week_number,
    total_transactions=COUNT(stock_transactions),
    weekend_transactions=COUNT(stock_transactions.WHERE(
        DAYOFWEEK(date_time) == 6 | DAYOFWEEK(date_time) == 7
    ))
)

# Order the results by week number
result = weekly_transactions.ORDER_BY(week_number.ASC())","cache_tokens_details=None cached_content_token_count=None candidates_token_count=984 candidates_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=984)] prompt_token_count=17999 prompt_tokens_details=[ModalityTokenCount(modality=<MediaModality.TEXT: 'TEXT'>, token_count=17999)] thoughts_token_count=None tool_use_prompt_token_count=None tool_use_prompt_tokens_details=None total_token_count=18983 traffic_type=<TrafficType.ON_DEMAND: 'ON_DEMAND'>"
