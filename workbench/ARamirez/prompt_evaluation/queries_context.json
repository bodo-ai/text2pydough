{
    "List the total number of customers and suppliers in each nation. Order by nation name": {
        "context_id": null,
        "similar_queries": "1. Count customers and suppliers by region:\n\n# Count customers and suppliers by region\nnation_counts = regions.CALCULATE(\n    region_name=name,\n    n_customers=COUNT(nations.customers),\n    n_suppliers=COUNT(nations.suppliers)\n)"
    },
    "Find the top 5 nations with the highest number of orders placed by their customers in 1995.": {
        "context_id": null,
        "similar_queries": "1. Top 5 nations by average order value in 1995:\n\norders_in_1995= customers.orders.WHERE(YEAR(order_date) == 1995)\n\ntop_5_nations = nations.CALCULATE(\n    nation_name=name,\n    average_orders= AVG(orders_in_1995), \n    order_count=COUNT(orders_in_1995)\n).TOP_K(5, by=average_orders.DESC())"
    },
    "Find the region name with the highest total order value in 1996. The total order value is defined as potential revenue, defined as the sum of extended_price * (1 - discount)": {
        "context_id": null,
        "similar_queries": null,
        "redefined_question": "Find the region name with the highest total order value in 1996. The total order value is defined as potential revenue, defined as the sum of extended_price * (1 - discount). Return the region name and total order value"
    },
    "Find the top 3 regions with the most distinct customers": {
        "context_id": "10. Functions to use NDISTINCT, TOP_K",
        "similar_queries": "1. Find the top 10 with the most distinct suppliers\n\ntop_regions = regions.CALCULATE(\n    region_name=name,\n    suppliers_count=NDISTINCT(nations.suppliers.key)\n).TOP_K(10, by=customer_count.DESC())"
    },
    "Find the names of all customers and number of orders placed in 1995 in Europe who have an account balance greater than $700 and placed at least one order in 1995. Sorted in descending order by the number of orders. Do not use HAS function": {
        "context_id": null,
        "similar_queries": null
    },
    "Find suppliers in each nation who have an availqty of more than 1000 units of parts with 'BRASS' in their type. List the supplier name, nation name, and the sum of the parts supplied.": {
        "context_id": null,
        "similar_queries": null
    },
    "Find parts names that are supplied by at least five different nations. Show the part name and the count of distinct nations that supply each part": {
        "context_id": "10. You can ONLY solve this questions using PARTITION and NDISTINCT functions. You cannot avoid this functions.",
        "similar_queries": null,
        "redefined_question": "Apply PARTITION function in `parts` collection, partinioning it by `name`. Then, find those parts that are supplied by at least five different nations. Show the part name and the count of distinct nations that supply each part."
    },
    "Which 10 customers purchased the highest quantity of products with 'green' in the product name during 1998? Provide their names, address, and the total quantity ordered.": {
        "context_id": null,
        "similar_queries": null
    },
    "Which is the average discount applied on orders for each market segment? Sorted in descending order": {
        "context_id": "10. As recommendation use the PARTITION",
        "similar_queries": null
    },
    "What were the 20 most popular products (parts) within each market segment in 1998?": {
        "context_id": "10. You must use PARTITION and RANKING",
        "similar_queries": "1. Return the customer name, number of transactions, total transaction amount, and CR for all customers. CR = customer rank by total transaction amount, with rank 1 being the customer with the highest total transaction amount\n\n tables = Transactions.CALCULATE(cust_name = customer.name)\n id_grouped_tx = PARTITION(tables, name='t', by=(customer_id, cust_name))(num_tx = COUNT(t.customer_id), total_amount = SUM(t.amount))\noutput = id_grouped_tx.CALCULATE(cust_name, total_amount, cust_rank = RANKING(by=total_amount.DESC(), levels=1))",
        "redefined_question": "Apply the PARTITION function to group the data by market segment, ensuring that each segment is analyzed separately. Then, count the number of orders for each product within each segment. Use the RANKING function to rank products within each segment based on their order count in descending order. Finally, filter the results to retrieve only the top 20 most popular products per market segment in 1998, returning the market segment, product name, and order count."
    },

    "Retrieves the top 3 suppliers with the highest total sales for each region": {
        "context_id": "10. This question can ONLY be solved using the RANKING function. You must use this function and cannot substitute it with any other.",
        "similar_queries": "1. Top 5 Customers with Highest Purchase Value for each Nation:\n\nresult = nations.CALCULATE(nation_name= name).customers.CALCULATE(nation_name= nation_name, cust_name= name, total_sales= SUM(orders.lines.extended_price  * (1 - orders.lines.discount))).WHERE(RANKING(by=total_sales.DESC(), levels=1, allow_ties=True) <=5)\n\n 2. Return each doctor's doc_id, specialty, number of distinct drugs prescribed, and SDR. SDR = a doctor's rank within their specialty by number of distinct drugs prescribed. Doctors prescribing more drugs will have a higher rank. \n specialties = PARTITION(Doctors, name='docs', by=speciality)\n doctors_by_specialty = specialties.docs.CALCULATE(num_drugs_prescribed=NDISTINCT(prescribed_treatments.drug.drug_id)).WHERE(HAS(prescribed_treatments)) \n output = doctors_by_specialty.CALCULATE(doc_id,speciality, num_drugs_prescribed, specialty_drug_rank=RANKING(by=num_drugs_prescribed.DESC(), levels=1, allow_ties=True, dense=True))",
        "redefined_question": "ONLY apply RANKING function to retrieve the top 3 suppliers with the highest total sales for each region. Then show the region, supplier name and total sales."

    },
    "Which is the average order value per Nation? List the nation name and average order value. The order value is defined as extended_price * quantity": {
        "context_id": null,
        "similar_queries": null,
        "redefined_question": "Apply PARTITION in the `nations` collection, partinioning it by `name`. Then calculate the average order value? Return the `nation_name` and `average_order_value`. Definition: `average_order_value` = `AVG(extended_price * quantity)`"
    },

    "For each of the 5 largest part sizes, find the part of that size with the largest retail price":{
        "context_id": null,
        "similar_queries": "1. Top 5 Customers with Highest Purchase Value for each Nation:\n\nresult = nations.CALCULATE(nation_name= name).customers.CALCULATE(nation_name= nation_name, cust_name= name, total_sales= SUM(orders.lines.extended_price  * (1 - orders.lines.discount))).WHERE(RANKING(by=total_sales.DESC(), levels=1, allow_ties=True) <=5) \n 2. For the top 3 city with more packages sent, find the percentage of all orders made by current occupants of that city made by that specific customer. Includes the first/last name of the person, the city they live in, and the percentage.\n\n PARTITION(Addresses, name='addrs', by=(city, state)).CALCULATE(total_packages=COUNT(addrs.current_occupants.packages)).addrs.CALCULATE(city, state).current_occupants.CALCULATE(first_name,last_name,city=city,pct_of_packages=100.0 * COUNT(packages) / total_packages)\n\n 3. Return each doctor's doc_id, specialty, number of distinct drugs prescribed, and SDR. SDR = a doctor's rank within their specialty by number of distinct drugs prescribed. Doctors prescribing more drugs will have a higher rank. \n specialties = PARTITION(Doctors, name='docs', by=speciality)\n doctors_by_specialty = specialties.docs.CALCULATE(num_drugs_prescribed=NDISTINCT(prescribed_treatments.drug.drug_id)).WHERE(HAS(prescribed_treatments)) \n output = doctors_by_specialty.CALCULATE(doc_id,speciality, num_drugs_prescribed, specialty_drug_rank=RANKING(by=num_drugs_prescribed.DESC(), levels=1, allow_ties=True, dense=True))",
        "redefined_question": "For each of the 5 largest part sizes, find the part of that size with the largest retail price Methods to use: RANKING"

    },
    "What 3 product brands saw the largest positive change in quantity sold from 1995 to 1996.":{
        "context_id": null,
        "similar_queries": null,
        "redefined_question": "PARTITION the `lines` collection by `brand` and calculate the total `quantity` sold for each brand in the years 1995 and 1996. Then calculate the difference in `quantity` sold between 1996 and 1995 for each brand. Return the TOP 3 brands with the largest positive difference, sorted in DESC() order by the difference."

    },
    "What is the february 1996 SPM for the almond antique blue royal burnished part in China? SPM (Selling Profit Margin) = (Total Amount from Sells - (Tax + Commission)) / Total Amount from Sells * 100":{
        "context_id": null,
        "similar_queries": null,
        "redefined_question": "What is the february 1996 SPM for the rosy black navajo cream sky part in China by order date? SPM (Selling Profit Margin) = (Total Amount from Sells - (Tax + Commission)) / Total Amount from Sells * 100. "

    }

}