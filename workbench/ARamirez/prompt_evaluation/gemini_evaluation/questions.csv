question,sql,similar_queries,db_name,expected_result
List the total number of customers and suppliers in each nation. Order by nation name.,"SELECT n_name AS nation_name, COUNT(DISTINCT c_custkey) AS total_customers, COUNT(DISTINCT s_suppkey) AS total_suppliers FROM nation LEFT JOIN customer ON n_nationkey = c_nationkey LEFT JOIN supplier ON n_nationkey = s_nationkey GROUP BY n_name;","1. Count customers and suppliers by region:

# Count customers and suppliers by region
nation_counts = regions.CALCULATE(
    region_name=name,
    n_customers=COUNT(nations.customers),
    n_suppliers=COUNT(nations.suppliers)
)",TPCH,"# CALCULATE the number of customers and suppliers for each nation, ordered by nation name
nation_counts = nations.CALCULATE(
    nation_name=name,
    num_customers=COUNT(customers),
    num_suppliers=COUNT(suppliers)
).ORDER_BY(nation_name.ASC())"
Find the top 5 nations with the highest number of orders placed by their customers in 1995.,"SELECT n_name AS nation_name, COUNT(o_orderkey) AS total_orders FROM nation JOIN customer ON n_nationkey = c_nationkey JOIN orders ON c_custkey = o_custkey WHERE o_orderdate >= '1995-01-01' AND o_orderdate <= '1995-12-31' GROUP BY n_name ORDER BY total_orders DESC LIMIT 5;","1. Top 5 nations by average order value in 1995:

orders_in_1995= customers.orders.WHERE(YEAR(order_date) == 1995)

top_5_nations = nations.CALCULATE(
    nation_name=name,
    average_orders= AVG(orders_in_1995), 
    order_count=COUNT(orders_in_1995)
).TOP_K(5, by=average_orders.DESC())",TPCH,"# Find the top 5 nations based on the count of orders placed by their customers in 1995
top_nations_by_orders_1995 = nations.CALCULATE(
    # Select the nation's name
    nation_name=name,
    # Count orders placed by customers of this nation, filtering for the year 1995
    order_count=COUNT(customers.orders.WHERE(YEAR(order_date) == 1995))
).TOP_K(
    # Select the top 5
    5,
    # Order by the calculated order_count in descending order
    by=order_count.DESC()
)"
"Find the region name with the highest total order value in 1996. The total order value is defined as potential revenue, defined as the sum of extended_price * (1 - discount).","SELECT r_name AS region_name, SUM(l_extendedprice * (1 - l_discount)) AS total_order_value FROM region JOIN nation ON r_regionkey = n_regionkey JOIN customer ON n_nationkey = c_nationkey JOIN orders ON c_custkey = o_custkey JOIN lineitem ON o_orderkey = l_orderkey WHERE o_orderdate >= '1996-01-01' AND o_orderdate <= '1996-12-31' GROUP BY r_name ORDER BY total_order_value DESC LIMIT 1;",,TPCH,"# CALCULATE the total order value for each region in 1996
region_order_values_1996 = regions.WHERE(
  # Ensure the region HAS customers with orders to avoid unnecessary calculations
  HAS(nations.customers.orders) == 1
).CALCULATE(
    # Select the region name
    region_name=name,
    # CALCULATE the total order value for the region in 1996
    total_order_value=SUM(
        # Navigate through nations, customers, orders
        nations.customers.orders.WHERE(
            # Filter orders placed in 1996
            YEAR(order_date) == 1996
        # Navigate to the line items of the filtered orders
        ).lines.CALCULATE(
            # CALCULATE the value for each line item as per the definition
            line_value=extended_price * (1 - discount)
        # Select the calculated line value to be summed
        ).line_value
    )
# Select the top 1 region based on the calculated total order value in descending order
).TOP_K(1, by=total_order_value.DESC())

# Assign the final result to the variable 'result'
result = region_order_values_1996"
Find the top 3 regions with the most distinct customers.,"SELECT r_name AS region_name, COUNT(DISTINCT c_custkey) AS distinct_customers FROM region JOIN nation ON r_regionkey = n_regionkey JOIN customer ON n_nationkey = c_nationkey GROUP BY r_name ORDER BY distinct_customers DESC LIMIT 3;","1. Find the top 10 with the most distinct suppliers

top_regions = regions.CALCULATE(
    region_name=name,
    suppliers_count=NDISTINCT(nations.suppliers.key))
).TOP_K(10, by=customer_count.DESC())""
",TPCH,"top_regions_by_customers = regions.CALCULATE(
    region_name=name,
    distinct_customer_count=NDISTINCT(nations.customers.key)
).TOP_K(3, by=distinct_customer_count.DESC())"
Find the names of all customers and number of orders placed in 1995 in Europe who have an account balance greater than $700 and placed at least one order in 1995. Sorted in descending order by the number of orders.,"SELECT c.c_name AS customer_name, COUNT(o.o_orderkey) AS order_count_1995 FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey JOIN region r ON n.n_regionkey = r.r_regionkey JOIN orders o ON c.c_custkey = o.o_custkey WHERE r.r_name = 'EUROPE' AND c.c_acctbal > 700 AND o.o_orderdate BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY c.c_name, c.c_acctbal ORDER BY order_count_1995 DESC, c.c_acctbal DESC;",,TPCH,"european_customers_1995 = customers.WHERE(
    (nation.region.name == ""EUROPE"") &
    (acctbal > 700) &
    (HAS(orders.WHERE(YEAR(order_date) == 1995)) == 1)
).CALCULATE(
    customer_name=name,
    num_orders_1995=COUNT(orders.WHERE(YEAR(order_date) == 1995))
).ORDER_BY(num_orders_1995.DESC())"
"Find suppliers in each nation who have a total availqty of more than 1000 units of parts with 'BRASS' in their type. List the supplier name, nation name, and the sum of the parts supplied, sorted in descending order by parts supplied.","SELECT s.s_name AS SupplierName, n.n_name AS Nation, SUM(ps.ps_availqty) AS TotalUnitsSupplied FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_type LIKE '%BRASS%' GROUP BY s.s_name, n.n_name HAVING SUM(ps.ps_availqty) > 1000 ORDER BY TotalUnitsSupplied DESC;",,TPCH,"# CALCULATE the total available quantity of 'BRASS' parts for each supplier
supplier_brass_parts_sum = suppliers.CALCULATE(
    s_name=name,
    n_name=nation.name,  # Get the nation name associated with the supplier
    total_brass_availqty=SUM(
        # Filter supply records to include only those linked to parts containing 'BRASS' in their type
        supply_records.WHERE(CONTAINS(part.part_type, 'BRASS')).availqty
    )
)

# Filter suppliers WHERE the total available quantity of 'BRASS' parts is greater than 1000
filtered_suppliers = supplier_brass_parts_sum.WHERE(total_brass_availqty > 1000)

# Select the required fields (supplier name, nation name, total quantity) and sort the results
result = filtered_suppliers.CALCULATE(
    supplier_name=s_name,
    nation_name=n_name,
    sum_parts_supplied=total_brass_availqty
).ORDER_BY(sum_parts_supplied.DESC())"
Find parts names that are supplied by at least five different nations. Show the part name and the count of distinct nations that supply each part. Sorted in descending order by count of nations,"SELECT p.P_NAME AS PartName, COUNT(DISTINCT n.N_NAME) AS NumberOfNations FROM PART p JOIN PARTSUPP ps ON p.P_PARTKEY = ps.PS_PARTKEY JOIN SUPPLIER s ON ps.PS_SUPPKEY = s.S_SUPPKEY JOIN NATION n ON s.S_NATIONKEY = n.N_NATIONKEY GROUP BY p.P_NAME HAVING COUNT(DISTINCT n.N_NAME) > 5 ORDER BY NumberOfNations DESC;",,TPCH,"# PARTITION parts by name and CALCULATE the distinct count of nations for suppliers of each part
parts_by_name = parts.PARTITION(name=""part_groups"", by=(name)).CALCULATE(
    part_name=name,
    # Count the distinct nations associated with the suppliers of the parts in this group
    distinct_nations_count=NDISTINCT(parts.supply_records.supplier.nation.key)
)

# Filter the results to include only those parts supplied by at least five different nations
result = parts_by_name.WHERE(distinct_nations_count >= 5)"
"Which 10 customers purchased the highest quantity of products with 'green' in the product name during 1998? Provide their names, adress and the total quantity ordered.","SELECT c_name AS customer_name, c_address AS customer_address, SUM(l_quantity) AS total_quantity_ordered FROM customer JOIN orders ON c_custkey = o_custkey JOIN lineitem ON o_orderkey = l_orderkey JOIN part ON l_partkey = p_partkey WHERE p_name LIKE '%green%' AND strftime('%Y', o_orderdate) = '1998' GROUP BY c_name, c_address ORDER BY total_quantity_ordered DESC LIMIT 10;",,TPCH,"# Find the top 10 customers by quantity of 'green' parts ordered in 1998
top_green_buyers = customers.CALCULATE(
    # Select customer name
    customer_name=name,
    # Select customer address
    customer_address=address,
    # CALCULATE the total quantity of 'green' items ordered in 1998
    total_quantity_green_1998=SUM(
        # Access customer orders
        orders
        # Filter orders placed in 1998
        .WHERE(YEAR(order_date) == 1998)
        # Access line items for those orders
        .lines
        # Filter line items WHERE the part name CONTAINS 'green'
        .WHERE(CONTAINS(part.name, 'green'))
        # Get the quantity for the filtered line items
        .quantity
    )
# Filter out customers who didn't order any relevant items (quantity > 0)
).WHERE(total_quantity_green_1998 > 0).TOP_K(
    # Select the top 10
    10,
    # Order by the calculated total quantity in descending order
    by=total_quantity_green_1998.DESC()
)"
Which is the average discount applied on orders for each market segment? Sorted in descending order.,"SELECT c_mktsegment AS market_segment, AVG(l_discount) AS average_discount FROM customer JOIN orders ON c_custkey = o_custkey JOIN lineitem ON o_orderkey = l_orderkey GROUP BY c_mktsegment;","1. Average shipping delay by supplier:
```python
avg_shipping_delay_by_supplier = suppliers.CALCULATE(
    supplier_name=name,
    average_shipping_delay=AVG(lines.ship_date - lines.commit_date)
)
```
2. Average price by part size:
```python
avg_price_by_part_size = GROUP_BY(
    parts,
    name= ""part"",
 by=(part_size)
).CALCULATE(
 part_size= part_size,
 average_retail_price= AVG(part.retail_price)
)```",TPCH,"import pydough

# CALCULATE the average discount per market segment
avg_discount_per_segment = customers.PARTITION(name=""segments"", by=mktsegment).CALCULATE(
    segment_name=mktsegment,
    # CALCULATE the average discount across all lines for orders placed by customers in this segment
    avg_discount=AVG(customers.orders.lines.discount)
).ORDER_BY(avg_discount.DESC()) # Sort by the calculated average discount descending"
What were the 20 most popular products (parts) within each market segment in 1998?,"WITH ProductPopularity AS (SELECT c_mktsegment AS market_segment, p_name AS product_name, SUM(l_quantity) AS total_quantity FROM customer JOIN orders ON c_custkey = o_custkey JOIN lineitem ON o_orderkey = l_orderkey JOIN part ON l_partkey = p_partkey WHERE strftime('%Y', o_orderdate) = '1998' GROUP BY c_mktsegment, p_name) SELECT market_segment, product_name, total_quantity FROM (SELECT market_segment, product_name, total_quantity, ROW_NUMBER() OVER (PARTITION BY market_segment ORDER BY total_quantity DESC) AS rank FROM ProductPopularity) WHERE rank <= 20;",,TPCH,"# Step 1: Filter lines for 1998 and gather necessary info (segment, part name)
# Navigate from lines -> order -> customer -> mktsegment and lines -> part -> name
lines_1998_info = lines.WHERE(YEAR(order.order_date) == 1998).CALCULATE(
    mktsegment = order.customer.mktsegment,
    part_name = part.name
)

# Step 2: Group by market segment and part name, summing the quantity
# PARTITION the filtered lines info by segment and part name
part_totals_per_segment = lines_1998_info.PARTITION(
    name=""part_segment_groups"", by=(mktsegment, part_name)
).CALCULATE(
    mktsegment = mktsegment,
    part_name = part_name,
    # SUM the quantity from the original lines collection context within the PARTITION group
    total_quantity = SUM(lines.quantity)
)

# Step 3: Group again by market segment to enable RANKING parts within each segment
# PARTITION the results from Step 2 by market segment
segment_groups = part_totals_per_segment.PARTITION(
    name=""segments"", by=(mktsegment)
)

# Step 4: Rank parts within each segment based on total_quantity
# Access the inner groups (parts per segment) via .part_segment_groups (the name given in Step 2 PARTITION)
# CALCULATE the rank for each part within its segment ('segments' PARTITION)
ranked_parts_in_segment = segment_groups.part_segment_groups.CALCULATE(
    mktsegment, # Inherited from 'segments' PARTITION context
    part_name,
    total_quantity,
    # Rank using total_quantity descending, partitioned by the 'segments' ancestor
    rank_in_segment = RANKING(by=total_quantity.DESC(), per=""segments"")
)

# Step 5: Filter to keep only the top 20 ranks per segment
top_20_parts_per_segment = ranked_parts_in_segment.WHERE(rank_in_segment <= 20)

# Step 6: Select the final required fields (market segment, part name, total quantity)
# Order by market segment and then by quantity descending for clear presentation
result = top_20_parts_per_segment.CALCULATE(
    mktsegment=mktsegment,
    part_name=part_name,
    total_quantity=total_quantity
).ORDER_BY(mktsegment.ASC(), total_quantity.DESC())"
Retrieves the top 3 suppliers with the highest total sales for each region.,"WITH SupplierSales AS (SELECT r_name AS region_name, s_name AS supplier_name, SUM(l_extendedprice * l_quantity) AS total_sales FROM region JOIN nation ON r_regionkey = n_regionkey JOIN supplier ON n_nationkey = s_nationkey JOIN lineitem ON s_suppkey = l_suppkey JOIN orders ON l_orderkey = o_orderkey GROUP BY r_name, s_name) SELECT region_name, supplier_name, total_sales FROM (SELECT region_name, supplier_name, total_sales, ROW_NUMBER() OVER (PARTITION BY region_name ORDER BY total_sales DESC) AS rank FROM SupplierSales) WHERE rank <= 3;",,TPCH,"# Start from regions, navigate down through nations to suppliers
suppliers_with_sales = regions.nations.suppliers.CALCULATE(
    # Access region name via the supplier's nation: supplier -> nation -> region -> name
    region_name=nation.region.name,
    # Get the supplier name
    supplier_name=name,
    # CALCULATE total sales for the supplier.
    # An inner CALCULATE is needed because we multiply two fields from the plural 'lines' collection.
    total_supplier_sales=SUM(lines.CALCULATE(line_sales = extended_price * quantity).line_sales)
)

# CALCULATE the rank after total_supplier_sales is computed
ranked_suppliers_by_region = suppliers_with_sales.CALCULATE(
    # Carry over the calculated fields
    region_name,
    supplier_name,
    total_supplier_sales,
    # CALCULATE the rank of each supplier within its region based on total_supplier_sales.
    # 'per=""regions""' ensures RANKING is done separately for each region, referencing the ancestor 'regions' collection.
    sales_rank_in_region=RANKING(by=total_supplier_sales.DESC(), per=""regions"")
)

# Filter to keep only the top 3 suppliers (rank 1, 2, or 3) in each region
top_3_suppliers_per_region = ranked_suppliers_by_region.WHERE(sales_rank_in_region <= 3)

# Select the final required fields: region name, supplier name, and total sales
# Order the results for better readability
result = top_3_suppliers_per_region.CALCULATE(
    region_name,
    supplier_name,
    total_sales=total_supplier_sales # Rename for clarity in the final output
).ORDER_BY(region_name.ASC(), sales_rank_in_region.ASC())"
"For each European country, list the number of customers and the number of orders they placed in 1995, including customers who didn't place any orders that year.","SELECT n_name AS country_name, COUNT(DISTINCT c_custkey) AS total_customers, COUNT(DISTINCT CASE WHEN o_orderdate >= '1995-01-01' AND o_orderdate <= '1995-12-31' THEN o_orderkey END) AS total_orders_1995 FROM nation JOIN region ON n_regionkey = r_regionkey JOIN customer ON n_nationkey = c_nationkey LEFT JOIN orders ON c_custkey = o_custkey WHERE r_name = 'EUROPE' GROUP BY n_name;",,TPCH,"european_nation_stats = nations.WHERE(region.name == ""EUROPE"").CALCULATE(
    nation_name=name,
    num_customers=COUNT(customers),
    num_orders_1995=COUNT(customers.orders.WHERE(YEAR(order_date) == 1995))
)"
Retrieve the customer name of the customers who placed more orders in 1995 than in 1994.,"SELECT c_name AS customer_name FROM customer JOIN orders ON c_custkey = o_custkey WHERE (strftime('%Y', o_orderdate) = '1994' OR strftime('%Y', o_orderdate) = '1995') GROUP BY c_custkey, c_name HAVING SUM(CASE WHEN strftime('%Y', o_orderdate) = '1995' THEN 1 ELSE 0 END) > SUM(CASE WHEN strftime('%Y', o_orderdate) = '1994' THEN 1 ELSE 0 END);",,TPCH,"# CALCULATE the number of orders for each customer in 1995 and 1994
customer_order_counts = customers.CALCULATE(
    customer_name=name,  # Keep the name for the final output
    orders_in_1995=COUNT(orders.WHERE(YEAR(order_date) == 1995)),
    orders_in_1994=COUNT(orders.WHERE(YEAR(order_date) == 1994))
)

# Filter customers WHERE the count of orders in 1995 is greater than in 1994
filtered_customers = customer_order_counts.WHERE(orders_in_1995 > orders_in_1994)

# Select only the customer names from the filtered list
result = filtered_customers.CALCULATE(customer_name=customer_name)"
Which is the average order value per Nation? List the nation name and average order value. The order value is defined as extended_price * quantity.,"SELECT n_name AS nation_name, AVG(l_extendedprice * l_quantity) AS average_order_value FROM nation JOIN customer ON n_nationkey = c_nationkey JOIN orders ON c_custkey = o_custkey JOIN lineitem ON o_orderkey = l_orderkey GROUP BY n_name;",,TPCH,"# PARTITION nations by name and CALCULATE the average order value for each nation.
# Average order value is defined as the average of (extended_price * quantity) for all line items associated with that nation.
result = nations.PARTITION(name=""nation_groups"", by=(name)).CALCULATE(
    nation_name=name,  # Access the PARTITION key 'name' directly
    # CALCULATE the average order value by accessing the 'nations' collection within the PARTITION,
    # navigating to lines, calculating the value per line item, and then averaging.
    average_order_value=AVG(
        nations.customers.orders.lines.CALCULATE(
            line_item_value=extended_price * quantity
        ).line_item_value
    )
)"
What 3 product brands saw the largest positive change in quantity sold from 1995 to 1996.,"WITH sales_1995 AS (
    SELECT
        p.p_brand,
        SUM(l.l_quantity) as total_quantity
    FROM
        lineitem l
    JOIN
        part p ON l.l_partkey = p.p_partkey
    JOIN
        orders o ON l.l_orderkey = o.o_orderkey
    WHERE
        strftime('%Y', o.o_orderdate) = '1995'
    GROUP BY
        p.p_brand
),

sales_1996 AS (
    SELECT
        p.p_brand,
        SUM(l.l_quantity) as total_quantity
    FROM
        lineitem l
    JOIN
        part p ON l.l_partkey = p.p_partkey
    JOIN
        orders o ON l.l_orderkey = o.o_orderkey
    WHERE
        strftime('%Y', o.o_orderdate) = '1996'
    GROUP BY
        p.p_brand
)

SELECT
    s96.p_brand as brand,
    COALESCE(s95.total_quantity, 0) as qty_1995,
    s96.total_quantity as qty_1996,
    (s96.total_quantity - COALESCE(s95.total_quantity, 0)) as quantity_change
FROM
    sales_1996 s96
LEFT JOIN
    sales_1995 s95 ON s96.p_brand = s95.p_brand
WHERE
    (s96.total_quantity - COALESCE(s95.total_quantity, 0)) > 0
ORDER BY
    quantity_change DESC
LIMIT 3;",,TPCH,"# Step 1: Filter line items for the years 1995 and 1996, calculating the order year and retrieving the part brand.
lines_info = lines.WHERE(
    ISIN(YEAR(order.order_date), (1995, 1996))
).CALCULATE(
    brand = part.brand,
    quantity = quantity,
    order_year = YEAR(order.order_date)
)

# Step 2: PARTITION the filtered line items by brand.
brand_groups = lines_info.PARTITION(name=""brands"", by=(brand))

# Step 3: CALCULATE the total quantity sold for each brand in 1995 and 1996.
# Use SUM with KEEP_IF to conditionally aggregate quantities based on the year.
# Use DEFAULT_TO(..., 0) to handle cases WHERE a brand might have sales in only one of the two years.
brand_yearly_sales = brand_groups.CALCULATE(
    brand_name = brand,
    quantity_1995 = DEFAULT_TO(SUM(KEEP_IF(lines.quantity, lines.order_year == 1995)), 0),
    quantity_1996 = DEFAULT_TO(SUM(KEEP_IF(lines.quantity, lines.order_year == 1996)), 0)
)

# Step 4: CALCULATE the difference in quantity sold between 1996 and 1995.
brand_diff = brand_yearly_sales.CALCULATE(
    brand_name = brand_name,
    quantity_1995 = quantity_1995,
    quantity_1996 = quantity_1996,
    quantity_difference = quantity_1996 - quantity_1995
)

# Step 5: Filter for brands with a positive change in quantity (quantity_difference > 0).
# Select the top 3 brands based on the largest positive difference, sorted in descending order.
top_brands_by_change = brand_diff.WHERE(
    quantity_difference > 0
).TOP_K(
    3, by=quantity_difference.DESC()
)

# Step 6: Assign the final result to the variable. The TOP_K operation preserves the calculated columns.
result = top_brands_by_change"
"What is the total revenue generated by each customer in 1994? Sorted by total revenue in descending order. The total revenue value is defined as the sum of extended_price * (1 - discount) What is the total revenue generated by each customer in 1994? The total revenue value is defined as the sum of extended_price * (1 - discount). Return the customer key, customer name and total revenue.","SELECT c.c_custkey AS custkey, c.c_name AS cust_name, COALESCE(SUM(l.l_extendedprice * (1 - l.l_discount)), 0) AS total_revenue FROM customer c LEFT JOIN orders o ON c.c_custkey = o.o_custkey AND strftime('%Y', o.o_orderdate) = '1994' LEFT JOIN lineitem l ON o.o_orderkey = l.l_orderkey GROUP BY c.c_custkey ORDER BY total_revenue DESC;",,TPCH,"# CALCULATE total revenue per customer for orders placed in 1994
customer_revenue_1994 = customers.WHERE(
    # Filter for customers who have at least one order in 1994
    HAS(orders.WHERE(YEAR(order_date) == 1994)) == 1
).CALCULATE(
    # Select customer key
    c_key=key,
    # Select customer name
    c_name=name,
    # CALCULATE total revenue based on the provided definition
    total_revenue=SUM(
        # Access orders placed in 1994
        orders.WHERE(YEAR(order_date) == 1994)
        # Access the lines of those orders
        .lines
        # CALCULATE revenue for each line item first
        .CALCULATE(line_revenue=extended_price * (1 - discount))
        # SUM the calculated line revenue
        .line_revenue
    )
# Sort the results by total revenue in descending order
).ORDER_BY(total_revenue.DESC())"
"Find the 30 customers with the lowest account balances whose names end in '0', and display their customer key, name, and account balance.","SELECT c_custkey, c_name, c_acctbal FROM customer WHERE c_name LIKE '%0' ORDER BY c_acctbal ASC LIMIT 30;",,TPCH,"import datetime

# Find the 30 customers with the lowest account balances whose names end in '0'.
lowest_balance_customers = customers.WHERE(
    ENDSWITH(name, '0')  # Filter customers whose name ends with the character '0'
).TOP_K(
    30,  # Select the top 30 customers
    by=acctbal.ASC()  # Order by account balance in ascending order (lowest first)
).CALCULATE(
    customer_key=key,  # Select the customer key
    customer_name=name,  # Select the customer name
    account_balance=acctbal  # Select the account balance
)"
"For each of the 5 largest part sizes, find the part of that size with the largest retail price","WITH top_sizes AS (SELECT DISTINCT p_size FROM part ORDER BY p_size DESC LIMIT 5), ranked_parts AS (SELECT p.p_partkey, p.p_name, p.p_size, p.p_retailprice, RANK() OVER (PARTITION BY p.p_size ORDER BY p.p_retailprice DESC) AS price_rank FROM part p WHERE p.p_size IN (SELECT p_size FROM top_sizes)) SELECT p_partkey, p_name, p_size, p_retailprice FROM ranked_parts WHERE price_rank = 1 ORDER BY p_size DESC, p_retailprice DESC;",,TPCH,"# Step 1: PARTITION parts by size and CALCULATE the rank of each size globally.
# Filter these groups to keep only those corresponding to the top 5 largest sizes (rank 1 to 5).
ranked_size_groups = parts.PARTITION(name=""size_groups"", by=size).CALCULATE(
    size=size,
    # Rank sizes globally, largest size gets rank 1
    size_rank=RANKING(by=size.DESC())
).WHERE(size_rank <= 5)

# Step 2: Access the parts belonging to these top 5 size groups.
# Within each size group, CALCULATE the rank of each part based on its retail price (descending, allowing ties).
# Filter to keep only the parts with the highest price (rank 1) within their respective size group.
# Select the required fields (Part Key, Name, Size, Retail Price).
top_priced_parts_in_top_sizes = ranked_size_groups.parts.CALCULATE( # Corrected: Access parts via 'ranked_size_groups.parts'
    part_key=key,
    part_name=name,
    part_size=size, # 'size' is available from the parent context (ranked_size_groups)
    part_retail_price=retail_price,
    # Rank parts by price *within* their size group ('per=""size_groups""'), allowing ties
    price_rank_in_size=RANKING(by=retail_price.DESC(), per=""size_groups"", allow_ties=True)
).WHERE(price_rank_in_size == 1).CALCULATE( # Select final fields after filtering by rank
    part_key=part_key,
    part_name=part_name,
    part_size=part_size,
    part_retail_price=part_retail_price
)

# Step 3: Order the final result by part size in descending order (largest sizes first).
result = top_priced_parts_in_top_sizes.ORDER_BY(part_size.DESC())"
"For each region, calculate the average percentage of purchases made from suppliers in that region belonging to the most common part type shipped from the supplier region to the customer region, averaging across all customer region. Only considers lineitems from June of 1992 where the container is small. To know if a container is small the container should start with SM","WITH part_counts AS (
  SELECT 
    rs.R_NAME AS supp_region,
    rc.R_NAME AS cust_region,
    p.P_TYPE AS p_type,
    COUNT(*) AS type_count
  FROM lineitem l
  JOIN part p ON l.L_PARTKEY = p.P_PARTKEY
  JOIN supplier s ON l.L_SUPPKEY = s.S_SUPPKEY
  JOIN nation ns ON s.S_NATIONKEY = ns.N_NATIONKEY
  JOIN region rs ON ns.N_REGIONKEY = rs.R_REGIONKEY
  JOIN orders o ON l.L_ORDERKEY = o.O_ORDERKEY
  JOIN customer c ON o.O_CUSTKEY = c.C_CUSTKEY
  JOIN nation nc ON c.C_NATIONKEY = nc.N_NATIONKEY
  JOIN region rc ON nc.N_REGIONKEY = rc.R_REGIONKEY
  WHERE l.L_SHIPDATE BETWEEN '1992-06-01' AND '1992-06-30'
    AND  p.P_CONTAINER LIKE 'SM%'
  GROUP BY rs.R_NAME, rc.R_NAME, p.P_TYPE
),
region_customer AS (
  SELECT 
    supp_region,
    cust_region,
    SUM(type_count) AS total_count,
    MAX(type_count) AS max_type_count
  FROM part_counts
  GROUP BY supp_region, cust_region
),
region_avg AS (
  SELECT 
    supp_region,
    AVG(100.0 * max_type_count / total_count) AS avg_percentage
  FROM region_customer
  GROUP BY supp_region
)
SELECT 
  supp_region AS region,
  avg_percentage
FROM region_avg
ORDER BY region;
",,TPCH,"# Step 1: Filter line items based on date (June 1992) and container type (starts with 'SM')
# Also, extract supplier region, customer region, and part type for each relevant line item.
filtered_lines_info = lines.WHERE(
    (YEAR(ship_date) == 1992) &
    (MONTH(ship_date) == 6) &
    (STARTSWITH(part.container, ""SM""))
).CALCULATE(
    supplier_region = supplier.nation.region.name,
    customer_region = order.customer.nation.region.name,
    part_type = part.part_type
    # We will count lines later, so no need for a specific key here
)

# Step 2: Group by supplier region, customer region, and part type to count occurrences.
# This tells us how many times each part type was shipped on each specific route.
type_counts_per_route = filtered_lines_info.PARTITION(
    name=""type_groups"", by=(supplier_region, customer_region, part_type)
).CALCULATE(
    supplier_region = supplier_region,
    customer_region = customer_region,
    part_type = part_type,
    # Count the number of line items for this specific part type on this route
    type_count = COUNT(lines)
)

# Step 3a: Group by the route (supplier region -> customer region).
# CALCULATE the total lines and the count of the most common part type for each route.
route_counts = type_counts_per_route.PARTITION(
    name=""route_groups"", by=(supplier_region, customer_region)
).CALCULATE(
    supplier_region = supplier_region,
    customer_region = customer_region,
    # CALCULATE the total number of lines shipped on this route (summing counts of all types)
    total_lines_on_route = SUM(type_groups.type_count),
    # Find the count of the single most frequent part type on this route
    # MAX(type_groups.type_count) gives the count of the most common type(s)
    max_type_count = MAX(type_groups.type_count)
)

# Step 3b: CALCULATE the percentage that the most common type represents for that route.
# This uses the fields calculated in the previous step (Step 3a).
route_stats = route_counts.CALCULATE(
    supplier_region = supplier_region,
    customer_region = customer_region,
    # CALCULATE the percentage: (count of most common type / total lines on route) * 100
    # Use IFF to avoid division by zero if a route HAS no lines after filtering
    percentage_for_most_common_type = IFF(total_lines_on_route > 0, 100.0 * max_type_count / total_lines_on_route, 0.0)
)

# Step 4: Group the results by supplier region.
# For each supplier region, CALCULATE the average of the percentages calculated in Step 3b
# across all customer regions it shipped to.
final_avg_percentages = route_stats.PARTITION(
    name=""supplier_region_final_groups"", by=(supplier_region)
).CALCULATE(
    # Select the supplier region name for the final output
    supplier_region_name = supplier_region,
    # CALCULATE the average of the 'percentage_for_most_common_type' for all routes originating from this supplier region
    # Access the percentage from the 'route_stats' collection (aliased as 'route_groups' by the PARTITION)
    average_percentage_most_common_type = AVG(route_groups.percentage_for_most_common_type)
)

# Assign the final result to the variable 'result'
result = final_avg_percentages"
"Break down how many customers, by country code of their phone number (only including customers from certain country codes), have not placed an order but have an account balance that is above the average for all positive account balances of such customers. Also include the total balance for all such customers for each country code. The country codes to include are 13, 23, 29, 30, 18 and 17.","WITH CountryAvg AS (
    SELECT 
        SUBSTR(C_PHONE, 1, INSTR(C_PHONE, '-') - 1) AS country_code,
        AVG(C_ACCTBAL) AS avg_balance
    FROM Customer
    WHERE C_ACCTBAL > 0
        AND CAST(SUBSTR(C_PHONE, 1, INSTR(C_PHONE, '-') - 1) AS INTEGER) IN (13, 23, 29, 30, 18, 17)
    GROUP BY country_code
)
SELECT 
    c.country_code,
    COUNT(*) AS customer_count,
    SUM(c.C_ACCTBAL) AS total_balance
FROM (
    SELECT 
        SUBSTR(C_PHONE, 1, INSTR(C_PHONE, '-') - 1) AS country_code,
        C_CUSTKEY,
        C_ACCTBAL
    FROM Customer
) c
LEFT JOIN Orders o ON c.C_CUSTKEY = o.O_CUSTKEY
INNER JOIN CountryAvg ca ON c.country_code = ca.country_code
WHERE o.O_CUSTKEY IS NULL
    AND c.C_ACCTBAL > ca.avg_balance
GROUP BY c.country_code;",,TPCH,"# CALCULATE the average positive balance specifically for customers who meet the initial criteria:
# - Belong to the specified country codes
# - Have not placed any orders
# - Have a positive account balance
avg_positive_balance_info = TPCH.CALCULATE(
    avg_pos_bal = AVG(
        # Select customers and extract country code
        customers.CALCULATE(
            country_code = phone[:2]
        ).WHERE(
            # Filter by country code (using strings as slicing returns strings)
            ISIN(country_code, (""13"", ""23"", ""29"", ""30"", ""18"", ""17"")) &
            # Filter for customers with no orders
            (HASNOT(orders) == 1) &
            # Filter for customers with a positive account balance
            (acctbal > 0)
        # Average the account balance of these specific customers
        ).acctbal
    )
)

# Filter the main customer list based on all criteria, using the calculated average
# The avg_pos_bal is down-streamed from the previous calculation
filtered_customers = avg_positive_balance_info.customers.CALCULATE(
    # Extract country code again for partitioning
    country_code = phone[:2],
    # Keep the account balance for filtering and later aggregation
    customer_acctbal = acctbal
).WHERE(
    # Repeat the initial filters
    ISIN(country_code, (""13"", ""23"", ""29"", ""30"", ""18"", ""17"")) &
    (HASNOT(orders) == 1) &
    # Apply the final filter: balance must be above the calculated average
    (customer_acctbal > avg_pos_bal)
)

# PARTITION the filtered customers by their country code
# Then CALCULATE the required aggregates for each group
result = filtered_customers.PARTITION(
    name=""country_groups"", by=(country_code)
).CALCULATE(
    # Select the PARTITION key
    country_code = country_code,
    # Count the number of customers in this country code group
    num_customers = COUNT(customers),
    # SUM the account balances for customers in this country code group
    total_balance = SUM(customers.customer_acctbal)
)"
Find the names of all customers and the number of orders placed in 1995 in Europe that placed a least one order in that same year. Sorted in descending order by the number of orders.,"SELECT
    c.c_name AS customer_name,
    COUNT(o.o_orderkey) AS order_count
FROM
    customer c
JOIN
    orders o ON c.c_custkey = o.o_custkey
JOIN
    nation n ON c.c_nationkey = n.n_nationkey
WHERE
    strftime('%Y', o.o_orderdate) = '1995'
    AND n.n_regionkey = (
        SELECT r_regionkey
        FROM region
        WHERE r_name = 'EUROPE'
    )
GROUP BY
    c.c_custkey, c.c_name
ORDER BY
    order_count DESC;",,TPCH,"european_customers_1995_orders = customers.WHERE(
    (nation.region.name == ""EUROPE"") &
    (HAS(orders.WHERE(YEAR(order_date) == 1995)) == 1)
).CALCULATE(
    customer_name=name,
    num_orders_1995=COUNT(orders.WHERE(YEAR(order_date) == 1995))
).ORDER_BY(num_orders_1995.DESC())"
"List customers who ordered in 1996 but not in 1997 with a total spent of over 1000$. Include the number of months since the last order (relative to the current date) and sort by total spent, highest first.","SELECT
  customer_name,
  total_spent,
  months_since_last_order
FROM (
  SELECT
    total_spent AS ordering_4,
    customer_name,
    months_since_last_order,
    total_spent
  FROM (
    SELECT
      agg_2,
      agg_3,
      customer_name,
      months_since_last_order,
      total_spent
    FROM (
      SELECT
        agg_2,
        customer_name,
        key,
        months_since_last_order,
        total_spent
      FROM (
        SELECT
          COALESCE(agg_1, 0) AS total_spent,
          name AS customer_name,
          (
            CAST(STRFTIME('%Y', DATETIME('now')) AS INTEGER) - CAST(STRFTIME('%Y', agg_0) AS INTEGER)
          ) * 12 + CAST(STRFTIME('%m', DATETIME('now')) AS INTEGER) - CAST(STRFTIME('%m', agg_0) AS INTEGER) AS months_since_last_order,
          key
        FROM (
          SELECT
            agg_0,
            agg_1,
            key,
            name
          FROM (
            SELECT
              c_custkey AS key,
              c_name AS name
            FROM main.CUSTOMER
          )
          LEFT JOIN (
            SELECT
              MAX(order_date) AS agg_0,
              SUM(total_price) AS agg_1,
              customer_key
            FROM (
              SELECT
                o_custkey AS customer_key,
                o_orderdate AS order_date,
                o_totalprice AS total_price
              FROM main.ORDERS
            )
            GROUP BY
              customer_key
          )
            ON key = customer_key
        )
      )
      LEFT JOIN (
        SELECT
          COUNT() AS agg_2,
          customer_key
        FROM (
          SELECT
            customer_key
          FROM (
            SELECT
              o_custkey AS customer_key,
              o_orderdate AS order_date
            FROM main.ORDERS
          )
          WHERE
            CAST(STRFTIME('%Y', order_date) AS INTEGER) = 1996
        )
        GROUP BY
          customer_key
      )
        ON key = customer_key
    )
    LEFT JOIN (
      SELECT
        COUNT() AS agg_3,
        customer_key
      FROM (
        SELECT
          customer_key
        FROM (
          SELECT
            o_custkey AS customer_key,
            o_orderdate AS order_date
          FROM main.ORDERS
        )
        WHERE
          CAST(STRFTIME('%Y', order_date) AS INTEGER) = 1997
      )
      GROUP BY
        customer_key
    )
      ON key = customer_key
  )
  WHERE
    (
      (
        COALESCE(agg_2, 0) > 0
      ) = 1
    )
    AND (
      (
        COALESCE(agg_3, 0) = 0
      ) = 1
    )
    AND (
      total_spent > 1000
    )
)
ORDER BY
  ordering_4 DESC",,TPCH,"# Filter customers who ordered in 1996 but not in 1997
customers_filtered = customers.WHERE(
    (HAS(orders.WHERE(YEAR(order_date) == 1996)) == 1) &
    (HASNOT(orders.WHERE(YEAR(order_date) == 1997)) == 1)
)

# CALCULATE total spent and months since last order for these customers
customers_calculated = customers_filtered.CALCULATE(
    customer_name=name,
    total_spent=SUM(orders.total_price),
    # CALCULATE months difference between the last order date and the current date
    months_since_last=DATEDIFF(""months"", MAX(orders.order_date), DATETIME('now'))
)

# Filter customers with total spent over 1000 and sort them
result = customers_calculated.WHERE(
    total_spent > 1000
).ORDER_BY(
    total_spent.DESC()
)"
What is the february 1996 SPM for the almond antique blue royal burnished part in China? SPM (Selling Profit Margin) = (Total Amount from Sells - (Tax + Commission)) / Total Amount from Sells * 100,"SELECT
  ROUND(
    (
      (
        -- Total Sales (Revenue after discount)
        SUM(l.l_extendedprice) 
        - 
        (
          -- Total Tax (on discounted sales)
          SUM(l.l_extendedprice  * l.l_tax) 
          + 
          -- Total Commission (discount amount)
          SUM(l.l_extendedprice * l.l_discount)
        )
      ) 
      / 
      SUM(l.l_extendedprice) 
    ) * 100, 2
  ) AS spm
FROM part p
JOIN lineitem l ON p.p_partkey = l.l_partkey
JOIN orders o ON l.l_orderkey = o.o_orderkey
JOIN customer c ON o.o_custkey = c.c_custkey
JOIN nation n ON c.c_nationkey = n.n_nationkey
WHERE
  -- Match the part name (case-sensitive wildcards)
  p.p_name LIKE '%rosy%black%navajo%cream%sky%'
  -- Filter for February 1996 orders
  AND strftime('%Y-%m', o.o_orderdate) = '1996-02'
  -- Optional: Filter for a specific nation (e.g., China)
  -- AND n.n_name = 'CHINA';",,TPCH,"feb_1996_sales = lines.WHERE(
    CONTAINS(part.name, ""rosy black navajo cream sky"") &
    (supplier.nation.name == ""CHINA"") &
    (YEAR(order.order_date) == 1996) &
    (MONTH(order.order_date) == 2)
).CALCULATE(
    extended_price=extended_price,
    tax_amount=extended_price * tax,
    commission_amount=extended_price * discount
)


# Calculate the SPM for February 1996
spm_result = TPCH.CALCULATE(
    total_amount=SUM(feb_1996_sales.extended_price),
    total_tax=SUM(feb_1996_sales.tax_amount),
    total_commission=SUM(feb_1996_sales.commission_amount)
).CALCULATE(
    
    spm=((total_amount -(total_tax + total_commission)) / total_amount) * 100
)
"
