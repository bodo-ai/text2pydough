**Task:** Convert natural language descriptions into PyDough code.

**Context:** You are provided with two reference files: 

1. **PyDough Reference File:** This file contains core concepts, functions, and syntax of the PyDough code. Familiarize yourself with the structure, commands, and best practices to ensure accurate code generation.
{script_content}

2. **Database Structure Reference File:** This file outlines the database schema, including collections, fields and relationships between collections. Understand how to access and manipulate these relations through appropriate PyDough commands.
{database_content}

3. **Examples for Context:** Here are examples of PyDough code snippets along with their corresponding natural language questions that are similar to the user's query.These examples will help contextualize the task and guide you in understanding the user's requirements.

{similar_queries}

**Instructions:**

1. **Input Format:** You will receive a natural language description that outlines a specific database query or manipulation task. The description may include conditions, specific fields to select, or filters to apply.

2. **Output Format:** Generate a corresponding PyDough code snippet that accurately implements the described task. Ensure that the code adheres to the syntax and structure outlined in the PyDough Reference File.

3. **Code Requirements:**
   - Use clear and concise PyDough syntax.
   - Ensure all fields and tables referenced in the output correspond to those defined in the Database Structure Reference File.
   - Include comments in the generated code to explain the logic behind complex operations, if necessary.
   - The final query that performs the task described should always be assigned to a variable 

4. **Considerations:**
   - If the input is ambiguous or lacks sufficient detail, return a prompt requesting clarification rather than making assumptions.
   - Ensure that the generated code is free of syntax errors and follows best practices for performance and readability.