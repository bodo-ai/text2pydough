question
"According to the general rules, what is the specific purpose of the `HAS` function in relation to table relationships?"
"How should one verify a one-to-many relationship between collections based on the naming convention described?"
"Explain the fundamental difference highlighted between PyDough and SQL regarding syntax and behavior assumptions."
"Under what specific circumstances must `TOP_K` be used instead of `ORDER_BY`?"
"If a query requests a calculation 'year over year' without specifying years, how should the calculation be performed according to the rules?"
"What is the role of the `SINGULAR` function when dealing with calculations across multiple specific years (like 1995-1998)?"
"What prerequisite must be met before an attribute from a previous collection can be used in a subsequent operation?"
"Explain the limitation of the `CALCULATE` function regarding singular versus plural expressions."
"How must plural sub-collections be handled within a `CALCULATE` function?"
"What type of construct is `RANKING` considered in PyDough (e.g., method, function)?"
"What type of argument must ALWAYS be provided to the `by` parameter in functions like `TOP_K` and `ORDER_BY`?"
"What types of arguments are explicitly forbidden for the `by` parameter in `TOP_K` and `ORDER_BY`?"
"What are the two mandatory parameters for the `PARTITION` function?"
"What restriction applies to the types of expressions allowed within the `by` parameter of the `PARTITION` function?"
"Can a collection or subcollection be passed directly to the `by` parameter of `PARTITION`?"
"What must have happened to any variable or value before it can be used in the `by` parameter of `PARTITION`?"
"Is `PARTITION` used as a method or a function call on a collection?"
"What specific types of keys are forbidden to be used for partitioning with the `PARTITION` method?"
"What is the required argument type for the `CALCULATE` function?"
"Can a function that returns a collection (like `TOP_K`) be used directly as an expression within `CALCULATE`? Why or why not?"
"Describe the recommended approach in PyDough for expressing complex calculations involving filters, transformations, and aggregations, according to the general rules."
"When should intermediate steps or partitioning be avoided in PyDough problem-solving?"
"Explain the restriction on using different child collections within a single operation, and provide the recommended alternative approach using `CALCULATE`."
"What alternative function can be used within `CALCULATE` to identify top-ranked items without using `TOP_K` directly?"
"How is access to collections and sub-collections achieved syntactically in PyDough?"
"What are the primary purposes of using the `CALCULATE` expression?"
"If a new field is defined within a `CALCULATE` expression, when does it become available for reference?"
"If an existing field is not included in a `CALCULATE` expression, can it still be referenced in subsequent operations?"
"What is the result of applying `CALCULATE` directly on the graph itself?"
"What is the syntax for filtering data in PyDough?"
"Which logical operators must be used in `WHERE` clauses instead of Python's standard `and`, `or`, `not`?"
"What is the recommended way to handle chained comparisons (e.g., `a < b < c`) in a `WHERE` clause?"
"How do you specify ascending or descending order in the `ORDER_BY` method?"
"What options are available for controlling the position of null values (`na_pos`) in `ORDER_BY`?"
"What is the primary purpose of the `TOP_K` method?"
"What are the two mandatory arguments for the `TOP_K` method?"
"What does the `HAS(collection)` aggregation function return?"
"What does the `HASNOT(collection)` aggregation function determine?"
"What is the purpose of the `COUNT(collection)` aggregation function?"
"How does `COUNT(collection)` handle null records?"
"What calculation does `SUM(collection)` perform?"
"What does `AVG(collection)` calculate?"
"What values do `MIN(collection)` and `MAX(collection)` return?"
"What does `NDISTINCT(collection)` compute?"
"What is the stated rule regarding the nesting of aggregation functions?"
"What is the main purpose of the `PARTITION` method?"
"What is the syntax structure for defining a `PARTITION`?"
"In a `CALCULATE` following a `PARTITION`, how should the partition keys (defined in the `by` parameter) be referenced?"
"What type of fields from the collection must be used as partition keys?"
"How must plural values or sub-collections be accessed within a `CALCULATE` applied after a `PARTITION`?"
"After partitioning a collection (e.g., `Packages`) and calculating an aggregate (e.g., `avg_package_cost`), how can you access the original items within each partition for further filtering (e.g., finding packages below the average)?"
"Explain the concept of 'down-streaming' as illustrated in `PARTITION` Good Example #4, where `total_packages` defined at the graph level is used within a partitioned calculation."
"In `PARTITION` Good Example #5, how is the `avg_packages_per_month` calculated globally and then used to filter the partitioned month data?"
"In `PARTITION` Good Example #6, why is `state` allowed as a partition key even though it originates from the `Addresses` collection, which is an ancestor of `current_occupants`?"
"Describe the scenario illustrated in `PARTITION` Good Example #8 regarding accessing down-streamed variables (`state`) within a sub-collection (`current_occupants`) after partitioning."
"In `PARTITION` Good Example #9, explain how values calculated at the graph level (`avg_cost`, `final_year`) are used in subsequent filtering and partitioning steps on the `Packages` collection."
"What does `PARTITION` Good Example #10 demonstrate about performing multiple sequential partitions and accessing data from a previous partition level?"
"Why is `PARTITION` Bad Example #1 invalid, specifically concerning the referencing of the `email` property?"
"Why is partitioning directly by `YEAR(order_date)` considered invalid according to `PARTITION` Bad Example #2?"
"Explain the error in `PARTITION` Bad Example #3 related to using `current_address.state` directly in the `by` clause."
"What makes referencing `People.email` invalid in `PARTITION` Bad Example #4 after partitioning by `birth_year`?"
"What is the core issue identified in `PARTITION` Bad Example #1 (variant of Good Example #7) regarding the availability of `state` and `first_name[:1]` for partitioning?"
"Why is referencing the `email` property invalid in `PARTITION` Bad Example #2, even if the data being partitioned has that property?"
"What is the mistake related to accessing the sub-collection after partitioning in `PARTITION` Bad Example #9?"
"What does the optional `per` argument in window functions like `RANKING` signify?"
"How does the behavior of a window function change when the `per` argument is omitted versus when it is provided?"
"If multiple ancestors have the same name, how is the `per` argument used to disambiguate which ancestor the window function should reference?"
"What does the `per='groups:1'` syntax mean in the window function example context?"
"What does the `per='groups:2'` syntax mean in the window function example context?"
"What parameters can be passed to the `RANKING` window function?"
"What does the `allow_ties` parameter in `RANKING` control?"
"What does the `dense` parameter in `RANKING` control?"
"How would you rank every customer relative to all other customers globally using `RANKING`?"
"How would you rank every customer relative only to other customers within the same 'nations' context using `RANKING`?"
"Explain the purpose and parameters of the `PERCENTILE` window function."
"How would you use `PERCENTILE` to filter for the top 0.1% of customers based on account balance?"
"How would you use `PERCENTILE` to find the top 5% of customers by account balance within each 'Regions' context?"
"What does the `RELSUM(expression, per=...)` function calculate?"
"How can `RELSUM` be used to find the ratio of an individual customer's balance to the total balance across all customers?"
"How can `RELSUM` be used to find the ratio of an individual customer's balance to the total balance within their specific 'Nations' context?"
"What calculation does the `RELAVG(expression, per=...)` function perform?"
"How can `RELAVG` be used to find customers whose balance is above the global average?"
"How can `RELAVG` be used to find customers whose balance is above the average within their specific 'Nations' context?"
"What does the `RELCOUNT(expression, per=...)` function count?"
"Provide an example scenario where `RELCOUNT` would be useful for calculating a ratio based on a conditional count within a group."
"What does the `RELSIZE(per=...)` function return?"
"How does `RELSIZE` differ from `RELCOUNT`?"
"How could `RELSIZE` be used to calculate a ratio involving the total number of customers globally or per nation?"
"What is the purpose of defining contextless expressions in PyDough?"
"What is the primary function of `SINGULAR` in PyDough, especially in sub-collection contexts?"
"Under what condition is it valid to use `.SINGULAR()` on a sub-collection, as shown in Good Example #1 for `SINGULAR`?"
"Explain why the use of `.SINGULAR()` in Bad Example #1 for `SINGULAR` is invalid, considering potential plurality."
"What is the second reason mentioned for the invalidity of `SINGULAR` Bad Example #1, related to accessing `packages` after `SINGULAR()`?"
"What standard arithmetic operators are available in PyDough?"
"What comparison operators are available in PyDough?"
"What logical operators are used for AND, OR, and NOT in PyDough expressions?"
"What is the unary negation operator in PyDough?"
"What is the syntax for string slicing in PyDough?"
"What are the limitations mentioned for the `step`, `start`, and `stop` parameters in string slicing?"
"Describe the purpose of the `LOWER(s)` and `UPPER(s)` string functions."
"What does the `LENGTH(s)` string function return?"
"Explain the difference between `STARTSWITH(s, prefix)` and `ENDSWITH(s, suffix)`."
"What does the `CONTAINS(s, substr)` function check for?"
"How does `LIKE(s, pattern)` function, and what characters are used for wildcards?"
"What is the purpose of the `JOIN_STRINGS(delim, s1, s2, ...)` function?"
"List the functions available for extracting specific components (year, month, day, hour, minute, second) from a datetime value."
"What is the primary purpose of the `DATETIME` function?"
"What types of base arguments can the `DATETIME` function accept?"
"Describe the two main types of modifier arguments accepted by the `DATETIME` function, providing examples of the syntax for truncation and interval adjustments."
"How are multiple modifiers applied if present in a `DATETIME` function call?"
"What is the purpose of the `DATEDIFF` function?"
"List the units of time that can be specified for the difference calculation in `DATEDIFF`."
"Explain the difference in how `DATEDIFF` calculates the difference for 'years' versus 'days' based on the provided examples."
"What does the `IFF(cond, a, b)` conditional function return?"
"How does the `ISIN(val, (x, y))` function work?"
"What is the behavior of the `DEFAULT_TO(a, b)` function?"
"Explain the functionality of the `KEEP_IF(a, cond)` function."
"What does the `MONOTONIC(a, b, c)` function check for, and why is it useful?"
"What do the `ABS(x)`, `ROUND(x, decimals)`, `POWER(x, exponent)`, and `SQRT(x)` numerical functions compute?"
"Reiterate the required operators for logical AND, OR, and NOT."
"Reiterate the recommended approach for handling chained inequalities."
"What is the fundamental role of aggregation functions regarding plural and singular values?"
"In the context of `PARTITION`, if you partition by `(key1, key2)`, what must be true about referencing `key1` and `key2` within the subsequent `CALCULATE`?"
"Can calculations like `SUM(lines.extended_price)` be performed directly within the `by` parameter of `PARTITION`?"
"If you need to rank items *within* each group created by `PARTITION`, which function should you use inside the `CALCULATE` following the `PARTITION`?"
"What function is specifically designed to check if a collection (representing a to-many relationship) has at least one related record?"
"What function is used to check if a collection (representing a to-many relationship) is completely empty?"
"Can you directly compare an attribute of one sub-collection with an attribute of a *different* sub-collection within the same parent record in a single expression? If not, what is the workaround?"
"What is the significance of the `name` parameter provided within the `PARTITION` function?"
"How do window functions like `RANKING` or `RELAVG` differ from standard aggregation functions like `COUNT` or `AVG` in terms of the scope of data they consider?"
"Explain the concept of an 'ancestor context' as it relates to the `per` argument in window functions."
"When using `PARTITION`, is it possible to access attributes of the original collection items *after* the partition has been applied? If so, how?"
"What is the rule regarding the use of aggregation functions when accessing plural sub-collections within a `CALCULATE` expression?"
"Describe the purpose of the `na_pos` parameter in `ORDER_BY` and `TOP_K`."
"How does PyDough's approach to calculating derived fields (like `cost_per_unit` in the `CALCULATE` example) differ from potentially defining them in intermediate steps?"
"What is the purpose of using `DEFAULT_TO` in `PARTITION` Good Example #7?"
"What does the `allow_ties=True` parameter achieve in the `RANKING` example for finding a customer's most recent order?"
"Explain the meaning of `PERCENTILE(by=acctbal.DESC()) <= 10`."
"Explain the meaning of `PERCENTILE(by=COUNT(orders.key).ASC()) <= 25`."
"In the 'Yearly Priority Analysis' example, why is `RELSUM(n_orders, per="year_group")` used?"
"In the 'Yearly Priority Analysis' example, what is the purpose of the `WHERE(RANKING(by=priority_pct.DESC(), per="year_group") == 1)` step?"
"In the 'Ticker Symbol Monthly Stats' example, why is `PARTITION` used twice?"
"In the 'Ticker Symbol Monthly Stats' example, how is the `month` field constructed?"
"In the 'Above-Average Part Size Combinations' example, what does `n_combos=COUNT(groups)` calculate?"
"In the 'Above-Average Part Size Combinations' example, how is the average number of combinations (`avg_n_combo`) determined and used?"
"In the 'Complex Transaction Filtering' example, describe the purpose of the three separate `PARTITION` steps (`ctt_groups`, `ct_groups`, `c_groups`)."
"In the 'Complex Transaction Filtering' example, how are the calculated averages (`cus_tick_typ_avg_shares`, `cust_tick_avg_shares`, `cust_avg_shares`) used in the final `WHERE` clause?"
"What general principle regarding hierarchical composition versus intermediate variables is emphasized in the 'GENERAL RULES' section?"
"How does the `HAS` function specifically help in handling potential errors or empty sets when navigating one-to-many relationships before performing aggregations?"
"Why is it important that the `by` parameter in `PARTITION` only accepts expressions referring to previously calculated or existing scalar fields, rather than complex calculations or collections?"
"Explain the difference between using `RANKING(..., per='ancestor')` within a `CALCULATE` versus partitioning by the ancestor and then using `TOP_K`."
"What is the key difference between `RELCOUNT(expression, per=...)` and `RELSIZE(per=...)`?"
"Describe a scenario where using `KEEP_IF` would be more appropriate than a simple `WHERE` clause, perhaps within an aggregation."
"How does the `DATETIME` function's modifier `'start of <UNIT>'` interact with time zones or daylight saving time (based on the provided info)?"
"How does the `DATEDIFF` function handle timestamp precision when calculating differences in units like 'days' or 'hours'?"
"Explain the constraint mentioned about not using aggregations inside other aggregations."
"When partitioning data (e.g., `Addresses` by `state`), how do you access the individual records belonging to each partition group (e.g., the specific addresses within a state) for further calculation or filtering?"
"What is the implication of the rule that new fields defined in `CALCULATE` do not take effect until *after* the `CALCULATE` completes?"
"Can you use a window function like `RANKING` directly within the `by` parameter of `TOP_K` or `ORDER_BY`? Why or why not?"
"Explain the purpose of using `JOIN_STRINGS` in combination with date part extraction functions as seen in an example."
"If a query asks for the 'top N per category', which PyDough constructs are most likely involved?"
"If a query asks to compare individual records against an aggregate calculated over a group (like comparing employee salary to the average salary in their department), which type of PyDough function is typically used?"
"Describe the conceptual difference between filtering with `WHERE` before a `PARTITION` versus filtering with `WHERE` after a `PARTITION` (on the partitioned groups)."
"What potential issue does the `SINGULAR()` function address when accessing data that is expected to be unique per parent record after filtering?"
"Why might you define a contextless expression even for a simple filter condition?"
"How does the `MONOTONIC` function help avoid potential issues with chained comparisons?"
"What is the return type of aggregation functions like `SUM`, `AVG`, `COUNT`?"
"What is the return type of the `HAS` function?"
"If you need to calculate a percentage of a total within subgroups (e.g., percentage of sales for a product within its category), which functions might you combine?"
"Explain the difference in scope between a calculation inside `CALCULATE(avg_val=AVG(subcollection.value))` versus `CALCULATE(rel_avg=RELAVG(value, per='parent'))` when applied to the `subcollection`."
"How does the enforcement of using `&`, `|`, `~` impact readability and prevent potential errors compared to using `and`, `or`, `not`?"
"Based on the examples, does `PARTITION` change the underlying data, or does it create a new view/grouping of the data?"
"What is the significance of the `Packages.WHERE(package_cost < avg_package_cost)` line occurring *after* the `PARTITION(...).CALCULATE(avg_package_cost=...)` steps in the relevant example?"
"Why is it necessary to use `SUM(orders.lines.CALCULATE(total_order_value = extended_price * (1 - discount)).total_order_value)` instead of `SUM(orders.lines.extended_price * (1 - orders.lines.discount))`?"
"How does the rule 'CALCULATE ONLY supports singular expressions' guide the use of aggregations when dealing with one-to-many or many-to-many relationships?"
"What purpose does down-streaming serve in complex PyDough queries involving partitioning and sub-collections?"
"If a window function's `per` argument refers to an ancestor name that appears multiple times in the hierarchy, what determines which specific ancestor instance is used by default if no index is provided?"
"How does the concept of 'hierarchy level' apply to both `PARTITION` grouping and the `per` argument of window functions?"
"Can the result of a `TOP_K` operation be directly used as input for a `PARTITION`? Why or why not?"
"Can the result of a `PARTITION(...).CALCULATE(...)` operation be further partitioned? Provide an example scenario."
"What is the fundamental difference between filtering using `WHERE(condition)` and conditional selection using `KEEP_IF(value, condition)`?"
"Describe the process of finding items that rank highest within multiple nested groups (e.g., top product per category per region)."
"What PyDough feature allows you to compare a record's value against the overall average value across all records in the collection?"
"What PyDough feature allows comparing a record's value against the average value within a specific group defined by an ancestor?"
"How would you express the concept 'Select customers whose nation has exactly one customer' using PyDough functions?"
"How does the rule about accessing previously calculated attributes influence the ordering of operations in a complex query?"