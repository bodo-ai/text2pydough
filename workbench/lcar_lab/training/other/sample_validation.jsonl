{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Find, for every nation, the name of the nation, the name of its region, and the number of customers in the nation.\nDatabase Schema:\n### The high-level graph `TPCH` collection contains the following columns:\n**WARNING**:\nTPCH is used ONLY for performing calculations, such as average, sum, count, etc. Do not use it for anything else.\n- **customers**: A list of all customer.\n- **lines**: A list of all lines items.\n- **nations**: A list of all nations.\n- **orders**: A list of all orders placed.\n- **parts**: A list of all parts available.\n- **regions**: A list of all regions.\n- **suppliers**: A list of all suppliers\n- **supply_records**: A list of all supply records for suppliers and parts.\n\n### The `customers` collection contains the following columns:\n- **acctbal**: The account balance of the customer.\n- **address**: The address of the customer.\n- **comment**: Additional comments or notes about the customer.\n- **key**: A unique identifier for the customer.\n- **mktsegment**: The market segment the customer belongs to.\n- **name**: The name of the customer.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The customer's phone number.\n- **nation**: The corresponding nation of the customer (reverse of `nations.customers`).\n- **orders**: A list of all orders placed by the customer (reverse of `orders.customer`).\n\n### The `lines` collection contains the following columns:\n- **comment**: Additional comments or notes about the line item.\n- **commit_date**: The committed delivery date for the line item.\n- **discount**: The discount applied to the line item.\n- **extended_price**: The extended price of the line item.\n- **line_number**: The line number within the order.\n- **order_key**: A foreign key referencing the `orders` collection.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **quantity**: The quantity ordered.\n- **receipt_date**: The date the line item was received.\n- **return_flag**: A flag indicating whether the item was returned.\n- **ship_date**: The shipping date of the line item.\n- **ship_instruct**: Shipping instructions for the line item.\n- **ship_mode**: The shipping mode for the line item.\n- **status**: The status of the line item.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **tax**: The tax applied to the line item.\n- **order**: The corresponding order for this line item (reverse of `orders.lines`).\n- **part**: The corresponding part for this line item (reverse of `parts.lines`).\n- **part_and_supplier**: The corresponding supply record (reverse of `supply_records.lines`).\n- **supplier**: The corresponding supplier for this line item (reverse of `suppliers.lines`).\n\n### The `nations` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the nation.\n- **key**: A unique identifier for the nation.\n- **name**: The name of the nation.\n- **region_key**: A foreign key referencing the `regions` collection.\n- **customers**: A list of customers associated with this nation (reverse of `customers.nation`).\n- **region**: The corresponding region this nation belongs to (reverse of `regions.nations`).\n- **suppliers**: A list of suppliers associated with this nation (reverse of `suppliers.nation`).\n\n### The `orders` collection contains the following columns:\n- **clerk**: The name of the clerk handling the order.\n- **comment**: Additional comments or notes about the order.\n- **customer_key**: A foreign key referencing the `customers` collection.\n- **key**: A unique identifier for the order.\n- **order_date**: The date when the order was placed.\n- **order_priority**: The priority level of the order (e.g., 'HIGH', 'LOW').\n- **order_status**: The current status of the order (e.g., 'PENDING', 'SHIPPED').\n- **ship_priority**: The priority level for shipping.\n- **total_price**: The total price of the order.\n- **customer**: The corresponding customer who placed the order (reverse of `customers.orders`).\n- **lines**: A list of all line items in this order (reverse of `lines.order`).\n\n### The `parts` collection contains the following columns:\n- **brand**: The brand of the part.\n- **comment**: Additional notes or descriptions about the part.\n- **container**: The type of container used for packaging the part.\n- **key**: A unique identifier for the part.\n- **manufacturer**: The manufacturer of the part.\n- **name**: The name of the part.\n- **part_type**: The type or category of the part.\n- **retail_price**: The retail price of the part.\n- **size**: The size of the part.\n- **lines**: A list of all line items that include this part (reverse of `lines.part`).\n- **supply_records**: A list of all supply records for this part (reverse of `supply_records.part`).\n\n### The `regions` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the region.\n- **key**: A unique identifier for the region.\n- **name**: The name of the region.\n- **nations**: A list of all nations within this region (reverse of `nations.region`).\n\n### The `suppliers` collection contains the following columns:\n- **account_balance**: The account balance of the supplier.\n- **address**: The address of the supplier.\n- **comment**: Additional notes or descriptions about the supplier.\n- **key**: A unique identifier for the supplier.\n- **name**: The name of the supplier.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The supplier's phone number.\n- **lines**: A list of all line items supplied by this supplier (reverse of `lines.supplier`).\n- **nation**: The corresponding nation of the supplier (reverse of `nations.suppliers`).\n- **supply_records**: A list of all supply records for this supplier (reverse of `supply_records.supplier`).\n\n### The `supply_records` collection contains the following columns:\n- **availqty**: The available quantity of the part supplied.\n- **comment**: Additional notes or descriptions about the supply record.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **supplycost**: The cost of supplying this part.\n- **lines**: A list of all line items that reference this supply record (reverse of `lines.part_and_supplier`).\n- **part**: The corresponding part for this supply record (reverse of `parts.supply_records`).\n- **supplier**: The corresponding supplier for this supply record (reverse of `suppliers.supply_records`).\n\n### Getting the total count of orders:\nTo get the total orders:\n```python\ntotal_orders = TPCH.CALCULATE(total_orders= COUNT(orders))\n```\n\n### Retrieving Customers for a Nation\nTo get all customers from a specific nation:\n```python\nnation_customers = nations.customers.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\n\n### Retrieving the Region for a Nation\nFor each nation, the corresponding region can be accessed as follows:\n```python\nnation_region = nations.region.CALCULATE(commnet, key, name)\n```\n\n### Retrieving Nations for a Region\nTo get all nations within a specific region:\n```python\nregion_nations = regions.nations.CALCULATE(comment, key, name, region_key)\n```\n\n### Retrieving the Customer for an Order\nFor each order, the corresponding customer can be accessed as follows:\n```python\ncustomer_for_order = orders.customer.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\nThis allows you to navigate from an order to the customer who placed it.\n\n### Retrieving Orders per Customer\nTo join all the orders for each customer:\n```python\norders_per_customer = customers.orders.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Orders in each nation\nTo join all the orders you have to join first each customer in each nation like this:\n```python\norders_per_customer_in_each_nation = nations.customers.orders.CALCULATE(order_key, customer_key, order_status,total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n### Retrieving Lines for an Order\nTo retrieve all line items for a given order:\n```python\nlines_for_order = orders.lines.CALCULATE(comment, commit_date, discount, extended_price, line_number, order_key, part_key, quantity, receipt_date, return_flag, ship_date, ship_instruct, ship_mode, status, supplier_key, tax)\n```\n### Retrieving the Order for a Line\nTo retrieve the order associated with a line item, you can query the lines object with the necessary fields:\n```python\norder_for_line = lines.order.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n### Retrieving Parts for a Supplier\nTo retrieve all parts supplied by a specific supplier:\n```python\nparts_for_supplier = suppliers.supply_records.part.CALCULATE(brand, comment, container, key, manufacturer, name, part_type, retail_price, size)\n```\n\n### Retrieving Suppliers for a Part\nTo retrieve all suppliers that supply a specific part\n```python\nsuppliers_for_part = parts.supply_records.supplier.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n"}]}, {"role": "model", "parts": [{"text": "result = nations(\n    nation_name=name,\n    region_name=region.name,\n    num_customers=COUNT(customers)\n)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "What percentage of revenue from parts shipped in September of 1995 was from promotional parts (parts whose type begins with 'PROMO'). Revenue is defined as extended price times one minus the discount. This is also known as TPC-H query #14.\nDatabase Schema:\n### The high-level graph `TPCH` collection contains the following columns:\n**WARNING**:\nTPCH is used ONLY for performing calculations, such as average, sum, count, etc. Do not use it for anything else.\n- **customers**: A list of all customer.\n- **lines**: A list of all lines items.\n- **nations**: A list of all nations.\n- **orders**: A list of all orders placed.\n- **parts**: A list of all parts available.\n- **regions**: A list of all regions.\n- **suppliers**: A list of all suppliers\n- **supply_records**: A list of all supply records for suppliers and parts.\n\n### The `customers` collection contains the following columns:\n- **acctbal**: The account balance of the customer.\n- **address**: The address of the customer.\n- **comment**: Additional comments or notes about the customer.\n- **key**: A unique identifier for the customer.\n- **mktsegment**: The market segment the customer belongs to.\n- **name**: The name of the customer.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The customer's phone number.\n- **nation**: The corresponding nation of the customer (reverse of `nations.customers`).\n- **orders**: A list of all orders placed by the customer (reverse of `orders.customer`).\n\n### The `lines` collection contains the following columns:\n- **comment**: Additional comments or notes about the line item.\n- **commit_date**: The committed delivery date for the line item.\n- **discount**: The discount applied to the line item.\n- **extended_price**: The extended price of the line item.\n- **line_number**: The line number within the order.\n- **order_key**: A foreign key referencing the `orders` collection.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **quantity**: The quantity ordered.\n- **receipt_date**: The date the line item was received.\n- **return_flag**: A flag indicating whether the item was returned.\n- **ship_date**: The shipping date of the line item.\n- **ship_instruct**: Shipping instructions for the line item.\n- **ship_mode**: The shipping mode for the line item.\n- **status**: The status of the line item.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **tax**: The tax applied to the line item.\n- **order**: The corresponding order for this line item (reverse of `orders.lines`).\n- **part**: The corresponding part for this line item (reverse of `parts.lines`).\n- **part_and_supplier**: The corresponding supply record (reverse of `supply_records.lines`).\n- **supplier**: The corresponding supplier for this line item (reverse of `suppliers.lines`).\n\n### The `nations` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the nation.\n- **key**: A unique identifier for the nation.\n- **name**: The name of the nation.\n- **region_key**: A foreign key referencing the `regions` collection.\n- **customers**: A list of customers associated with this nation (reverse of `customers.nation`).\n- **region**: The corresponding region this nation belongs to (reverse of `regions.nations`).\n- **suppliers**: A list of suppliers associated with this nation (reverse of `suppliers.nation`).\n\n### The `orders` collection contains the following columns:\n- **clerk**: The name of the clerk handling the order.\n- **comment**: Additional comments or notes about the order.\n- **customer_key**: A foreign key referencing the `customers` collection.\n- **key**: A unique identifier for the order.\n- **order_date**: The date when the order was placed.\n- **order_priority**: The priority level of the order (e.g., 'HIGH', 'LOW').\n- **order_status**: The current status of the order (e.g., 'PENDING', 'SHIPPED').\n- **ship_priority**: The priority level for shipping.\n- **total_price**: The total price of the order.\n- **customer**: The corresponding customer who placed the order (reverse of `customers.orders`).\n- **lines**: A list of all line items in this order (reverse of `lines.order`).\n\n### The `parts` collection contains the following columns:\n- **brand**: The brand of the part.\n- **comment**: Additional notes or descriptions about the part.\n- **container**: The type of container used for packaging the part.\n- **key**: A unique identifier for the part.\n- **manufacturer**: The manufacturer of the part.\n- **name**: The name of the part.\n- **part_type**: The type or category of the part.\n- **retail_price**: The retail price of the part.\n- **size**: The size of the part.\n- **lines**: A list of all line items that include this part (reverse of `lines.part`).\n- **supply_records**: A list of all supply records for this part (reverse of `supply_records.part`).\n\n### The `regions` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the region.\n- **key**: A unique identifier for the region.\n- **name**: The name of the region.\n- **nations**: A list of all nations within this region (reverse of `nations.region`).\n\n### The `suppliers` collection contains the following columns:\n- **account_balance**: The account balance of the supplier.\n- **address**: The address of the supplier.\n- **comment**: Additional notes or descriptions about the supplier.\n- **key**: A unique identifier for the supplier.\n- **name**: The name of the supplier.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The supplier's phone number.\n- **lines**: A list of all line items supplied by this supplier (reverse of `lines.supplier`).\n- **nation**: The corresponding nation of the supplier (reverse of `nations.suppliers`).\n- **supply_records**: A list of all supply records for this supplier (reverse of `supply_records.supplier`).\n\n### The `supply_records` collection contains the following columns:\n- **availqty**: The available quantity of the part supplied.\n- **comment**: Additional notes or descriptions about the supply record.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **supplycost**: The cost of supplying this part.\n- **lines**: A list of all line items that reference this supply record (reverse of `lines.part_and_supplier`).\n- **part**: The corresponding part for this supply record (reverse of `parts.supply_records`).\n- **supplier**: The corresponding supplier for this supply record (reverse of `suppliers.supply_records`).\n\n### Getting the total count of orders:\nTo get the total orders:\n```python\ntotal_orders = TPCH.CALCULATE(total_orders= COUNT(orders))\n```\n\n### Retrieving Customers for a Nation\nTo get all customers from a specific nation:\n```python\nnation_customers = nations.customers.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\n\n### Retrieving the Region for a Nation\nFor each nation, the corresponding region can be accessed as follows:\n```python\nnation_region = nations.region.CALCULATE(commnet, key, name)\n```\n\n### Retrieving Nations for a Region\nTo get all nations within a specific region:\n```python\nregion_nations = regions.nations.CALCULATE(comment, key, name, region_key)\n```\n\n### Retrieving the Customer for an Order\nFor each order, the corresponding customer can be accessed as follows:\n```python\ncustomer_for_order = orders.customer.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\nThis allows you to navigate from an order to the customer who placed it.\n\n### Retrieving Orders per Customer\nTo join all the orders for each customer:\n```python\norders_per_customer = customers.orders.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Orders in each nation\nTo join all the orders you have to join first each customer in each nation like this:\n```python\norders_per_customer_in_each_nation = nations.customers.orders.CALCULATE(order_key, customer_key, order_status,total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n### Retrieving Lines for an Order\nTo retrieve all line items for a given order:\n```python\nlines_for_order = orders.lines.CALCULATE(comment, commit_date, discount, extended_price, line_number, order_key, part_key, quantity, receipt_date, return_flag, ship_date, ship_instruct, ship_mode, status, supplier_key, tax)\n```\n### Retrieving the Order for a Line\nTo retrieve the order associated with a line item, you can query the lines object with the necessary fields:\n```python\norder_for_line = lines.order.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n### Retrieving Parts for a Supplier\nTo retrieve all parts supplied by a specific supplier:\n```python\nparts_for_supplier = suppliers.supply_records.part.CALCULATE(brand, comment, container, key, manufacturer, name, part_type, retail_price, size)\n```\n\n### Retrieving Suppliers for a Part\nTo retrieve all suppliers that supply a specific part\n```python\nsuppliers_for_part = parts.supply_records.supplier.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n"}]}, {"role": "model", "parts": [{"text": "value = extended_price * (1 - discount)\nselected_lines = lines.WHERE(\n    (ship_date >= datetime.date(1995, 9, 1))\n    & (ship_date < datetime.date(1995, 10, 1))\n)(\n    value=value,\n    promo_value=IFF(STARTSWITH(part.part_type, \"PROMO\"), value, 0),\n)\nresult = TPCH(PROMO_REVENUE=100.0 * SUM(selected_lines.promo_value) / SUM(selected_lines.value))"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Which 10 customers ordered the most products with turquoise in the name, by quantity, in the year 1995? Include their name and the total quantity.\nDatabase Schema:\n### The high-level graph `TPCH` collection contains the following columns:\n**WARNING**:\nTPCH is used ONLY for performing calculations, such as average, sum, count, etc. Do not use it for anything else.\n- **customers**: A list of all customer.\n- **lines**: A list of all lines items.\n- **nations**: A list of all nations.\n- **orders**: A list of all orders placed.\n- **parts**: A list of all parts available.\n- **regions**: A list of all regions.\n- **suppliers**: A list of all suppliers\n- **supply_records**: A list of all supply records for suppliers and parts.\n\n### The `customers` collection contains the following columns:\n- **acctbal**: The account balance of the customer.\n- **address**: The address of the customer.\n- **comment**: Additional comments or notes about the customer.\n- **key**: A unique identifier for the customer.\n- **mktsegment**: The market segment the customer belongs to.\n- **name**: The name of the customer.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The customer's phone number.\n- **nation**: The corresponding nation of the customer (reverse of `nations.customers`).\n- **orders**: A list of all orders placed by the customer (reverse of `orders.customer`).\n\n### The `lines` collection contains the following columns:\n- **comment**: Additional comments or notes about the line item.\n- **commit_date**: The committed delivery date for the line item.\n- **discount**: The discount applied to the line item.\n- **extended_price**: The extended price of the line item.\n- **line_number**: The line number within the order.\n- **order_key**: A foreign key referencing the `orders` collection.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **quantity**: The quantity ordered.\n- **receipt_date**: The date the line item was received.\n- **return_flag**: A flag indicating whether the item was returned.\n- **ship_date**: The shipping date of the line item.\n- **ship_instruct**: Shipping instructions for the line item.\n- **ship_mode**: The shipping mode for the line item.\n- **status**: The status of the line item.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **tax**: The tax applied to the line item.\n- **order**: The corresponding order for this line item (reverse of `orders.lines`).\n- **part**: The corresponding part for this line item (reverse of `parts.lines`).\n- **part_and_supplier**: The corresponding supply record (reverse of `supply_records.lines`).\n- **supplier**: The corresponding supplier for this line item (reverse of `suppliers.lines`).\n\n### The `nations` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the nation.\n- **key**: A unique identifier for the nation.\n- **name**: The name of the nation.\n- **region_key**: A foreign key referencing the `regions` collection.\n- **customers**: A list of customers associated with this nation (reverse of `customers.nation`).\n- **region**: The corresponding region this nation belongs to (reverse of `regions.nations`).\n- **suppliers**: A list of suppliers associated with this nation (reverse of `suppliers.nation`).\n\n### The `orders` collection contains the following columns:\n- **clerk**: The name of the clerk handling the order.\n- **comment**: Additional comments or notes about the order.\n- **customer_key**: A foreign key referencing the `customers` collection.\n- **key**: A unique identifier for the order.\n- **order_date**: The date when the order was placed.\n- **order_priority**: The priority level of the order (e.g., 'HIGH', 'LOW').\n- **order_status**: The current status of the order (e.g., 'PENDING', 'SHIPPED').\n- **ship_priority**: The priority level for shipping.\n- **total_price**: The total price of the order.\n- **customer**: The corresponding customer who placed the order (reverse of `customers.orders`).\n- **lines**: A list of all line items in this order (reverse of `lines.order`).\n\n### The `parts` collection contains the following columns:\n- **brand**: The brand of the part.\n- **comment**: Additional notes or descriptions about the part.\n- **container**: The type of container used for packaging the part.\n- **key**: A unique identifier for the part.\n- **manufacturer**: The manufacturer of the part.\n- **name**: The name of the part.\n- **part_type**: The type or category of the part.\n- **retail_price**: The retail price of the part.\n- **size**: The size of the part.\n- **lines**: A list of all line items that include this part (reverse of `lines.part`).\n- **supply_records**: A list of all supply records for this part (reverse of `supply_records.part`).\n\n### The `regions` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the region.\n- **key**: A unique identifier for the region.\n- **name**: The name of the region.\n- **nations**: A list of all nations within this region (reverse of `nations.region`).\n\n### The `suppliers` collection contains the following columns:\n- **account_balance**: The account balance of the supplier.\n- **address**: The address of the supplier.\n- **comment**: Additional notes or descriptions about the supplier.\n- **key**: A unique identifier for the supplier.\n- **name**: The name of the supplier.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The supplier's phone number.\n- **lines**: A list of all line items supplied by this supplier (reverse of `lines.supplier`).\n- **nation**: The corresponding nation of the supplier (reverse of `nations.suppliers`).\n- **supply_records**: A list of all supply records for this supplier (reverse of `supply_records.supplier`).\n\n### The `supply_records` collection contains the following columns:\n- **availqty**: The available quantity of the part supplied.\n- **comment**: Additional notes or descriptions about the supply record.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **supplycost**: The cost of supplying this part.\n- **lines**: A list of all line items that reference this supply record (reverse of `lines.part_and_supplier`).\n- **part**: The corresponding part for this supply record (reverse of `parts.supply_records`).\n- **supplier**: The corresponding supplier for this supply record (reverse of `suppliers.supply_records`).\n\n### Getting the total count of orders:\nTo get the total orders:\n```python\ntotal_orders = TPCH.CALCULATE(total_orders= COUNT(orders))\n```\n\n### Retrieving Customers for a Nation\nTo get all customers from a specific nation:\n```python\nnation_customers = nations.customers.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\n\n### Retrieving the Region for a Nation\nFor each nation, the corresponding region can be accessed as follows:\n```python\nnation_region = nations.region.CALCULATE(commnet, key, name)\n```\n\n### Retrieving Nations for a Region\nTo get all nations within a specific region:\n```python\nregion_nations = regions.nations.CALCULATE(comment, key, name, region_key)\n```\n\n### Retrieving the Customer for an Order\nFor each order, the corresponding customer can be accessed as follows:\n```python\ncustomer_for_order = orders.customer.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\nThis allows you to navigate from an order to the customer who placed it.\n\n### Retrieving Orders per Customer\nTo join all the orders for each customer:\n```python\norders_per_customer = customers.orders.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Orders in each nation\nTo join all the orders you have to join first each customer in each nation like this:\n```python\norders_per_customer_in_each_nation = nations.customers.orders.CALCULATE(order_key, customer_key, order_status,total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n### Retrieving Lines for an Order\nTo retrieve all line items for a given order:\n```python\nlines_for_order = orders.lines.CALCULATE(comment, commit_date, discount, extended_price, line_number, order_key, part_key, quantity, receipt_date, return_flag, ship_date, ship_instruct, ship_mode, status, supplier_key, tax)\n```\n### Retrieving the Order for a Line\nTo retrieve the order associated with a line item, you can query the lines object with the necessary fields:\n```python\norder_for_line = lines.order.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n### Retrieving Parts for a Supplier\nTo retrieve all parts supplied by a specific supplier:\n```python\nparts_for_supplier = suppliers.supply_records.part.CALCULATE(brand, comment, container, key, manufacturer, name, part_type, retail_price, size)\n```\n\n### Retrieving Suppliers for a Part\nTo retrieve all suppliers that supply a specific part\n```python\nsuppliers_for_part = parts.supply_records.supplier.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n"}]}, {"role": "model", "parts": [{"text": "selected_year = 1995\nselected_orders = orders.WHERE(YEAR(order_date) == selected_year)\nselected_lines = selected_orders.lines.WHERE(\n    CONTAINS(part.name, \"turquoise\")\n)\nresult = customers(\n    name,\n    total_quantity=SUM(selected_lines.quantity)\n).TOP_K(10, by=total_quantity.DESC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Break down how many customers, by country code of their phone number (only including customers from certain country codes), have not placed an order but have an account balance that is above the average for all positive account balances of such customers. Also include the total balance for all such customers for each country code. The country codes to include are 13, 31, 23, 29, 30, 18 and 17. This is also known as TPC-H query #22.\nDatabase Schema:\n### The high-level graph `TPCH` collection contains the following columns:\n**WARNING**:\nTPCH is used ONLY for performing calculations, such as average, sum, count, etc. Do not use it for anything else.\n- **customers**: A list of all customer.\n- **lines**: A list of all lines items.\n- **nations**: A list of all nations.\n- **orders**: A list of all orders placed.\n- **parts**: A list of all parts available.\n- **regions**: A list of all regions.\n- **suppliers**: A list of all suppliers\n- **supply_records**: A list of all supply records for suppliers and parts.\n\n### The `customers` collection contains the following columns:\n- **acctbal**: The account balance of the customer.\n- **address**: The address of the customer.\n- **comment**: Additional comments or notes about the customer.\n- **key**: A unique identifier for the customer.\n- **mktsegment**: The market segment the customer belongs to.\n- **name**: The name of the customer.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The customer's phone number.\n- **nation**: The corresponding nation of the customer (reverse of `nations.customers`).\n- **orders**: A list of all orders placed by the customer (reverse of `orders.customer`).\n\n### The `lines` collection contains the following columns:\n- **comment**: Additional comments or notes about the line item.\n- **commit_date**: The committed delivery date for the line item.\n- **discount**: The discount applied to the line item.\n- **extended_price**: The extended price of the line item.\n- **line_number**: The line number within the order.\n- **order_key**: A foreign key referencing the `orders` collection.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **quantity**: The quantity ordered.\n- **receipt_date**: The date the line item was received.\n- **return_flag**: A flag indicating whether the item was returned.\n- **ship_date**: The shipping date of the line item.\n- **ship_instruct**: Shipping instructions for the line item.\n- **ship_mode**: The shipping mode for the line item.\n- **status**: The status of the line item.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **tax**: The tax applied to the line item.\n- **order**: The corresponding order for this line item (reverse of `orders.lines`).\n- **part**: The corresponding part for this line item (reverse of `parts.lines`).\n- **part_and_supplier**: The corresponding supply record (reverse of `supply_records.lines`).\n- **supplier**: The corresponding supplier for this line item (reverse of `suppliers.lines`).\n\n### The `nations` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the nation.\n- **key**: A unique identifier for the nation.\n- **name**: The name of the nation.\n- **region_key**: A foreign key referencing the `regions` collection.\n- **customers**: A list of customers associated with this nation (reverse of `customers.nation`).\n- **region**: The corresponding region this nation belongs to (reverse of `regions.nations`).\n- **suppliers**: A list of suppliers associated with this nation (reverse of `suppliers.nation`).\n\n### The `orders` collection contains the following columns:\n- **clerk**: The name of the clerk handling the order.\n- **comment**: Additional comments or notes about the order.\n- **customer_key**: A foreign key referencing the `customers` collection.\n- **key**: A unique identifier for the order.\n- **order_date**: The date when the order was placed.\n- **order_priority**: The priority level of the order (e.g., 'HIGH', 'LOW').\n- **order_status**: The current status of the order (e.g., 'PENDING', 'SHIPPED').\n- **ship_priority**: The priority level for shipping.\n- **total_price**: The total price of the order.\n- **customer**: The corresponding customer who placed the order (reverse of `customers.orders`).\n- **lines**: A list of all line items in this order (reverse of `lines.order`).\n\n### The `parts` collection contains the following columns:\n- **brand**: The brand of the part.\n- **comment**: Additional notes or descriptions about the part.\n- **container**: The type of container used for packaging the part.\n- **key**: A unique identifier for the part.\n- **manufacturer**: The manufacturer of the part.\n- **name**: The name of the part.\n- **part_type**: The type or category of the part.\n- **retail_price**: The retail price of the part.\n- **size**: The size of the part.\n- **lines**: A list of all line items that include this part (reverse of `lines.part`).\n- **supply_records**: A list of all supply records for this part (reverse of `supply_records.part`).\n\n### The `regions` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the region.\n- **key**: A unique identifier for the region.\n- **name**: The name of the region.\n- **nations**: A list of all nations within this region (reverse of `nations.region`).\n\n### The `suppliers` collection contains the following columns:\n- **account_balance**: The account balance of the supplier.\n- **address**: The address of the supplier.\n- **comment**: Additional notes or descriptions about the supplier.\n- **key**: A unique identifier for the supplier.\n- **name**: The name of the supplier.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The supplier's phone number.\n- **lines**: A list of all line items supplied by this supplier (reverse of `lines.supplier`).\n- **nation**: The corresponding nation of the supplier (reverse of `nations.suppliers`).\n- **supply_records**: A list of all supply records for this supplier (reverse of `supply_records.supplier`).\n\n### The `supply_records` collection contains the following columns:\n- **availqty**: The available quantity of the part supplied.\n- **comment**: Additional notes or descriptions about the supply record.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **supplycost**: The cost of supplying this part.\n- **lines**: A list of all line items that reference this supply record (reverse of `lines.part_and_supplier`).\n- **part**: The corresponding part for this supply record (reverse of `parts.supply_records`).\n- **supplier**: The corresponding supplier for this supply record (reverse of `suppliers.supply_records`).\n\n### Getting the total count of orders:\nTo get the total orders:\n```python\ntotal_orders = TPCH.CALCULATE(total_orders= COUNT(orders))\n```\n\n### Retrieving Customers for a Nation\nTo get all customers from a specific nation:\n```python\nnation_customers = nations.customers.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\n\n### Retrieving the Region for a Nation\nFor each nation, the corresponding region can be accessed as follows:\n```python\nnation_region = nations.region.CALCULATE(commnet, key, name)\n```\n\n### Retrieving Nations for a Region\nTo get all nations within a specific region:\n```python\nregion_nations = regions.nations.CALCULATE(comment, key, name, region_key)\n```\n\n### Retrieving the Customer for an Order\nFor each order, the corresponding customer can be accessed as follows:\n```python\ncustomer_for_order = orders.customer.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\nThis allows you to navigate from an order to the customer who placed it.\n\n### Retrieving Orders per Customer\nTo join all the orders for each customer:\n```python\norders_per_customer = customers.orders.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Orders in each nation\nTo join all the orders you have to join first each customer in each nation like this:\n```python\norders_per_customer_in_each_nation = nations.customers.orders.CALCULATE(order_key, customer_key, order_status,total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n### Retrieving Lines for an Order\nTo retrieve all line items for a given order:\n```python\nlines_for_order = orders.lines.CALCULATE(comment, commit_date, discount, extended_price, line_number, order_key, part_key, quantity, receipt_date, return_flag, ship_date, ship_instruct, ship_mode, status, supplier_key, tax)\n```\n### Retrieving the Order for a Line\nTo retrieve the order associated with a line item, you can query the lines object with the necessary fields:\n```python\norder_for_line = lines.order.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n### Retrieving Parts for a Supplier\nTo retrieve all parts supplied by a specific supplier:\n```python\nparts_for_supplier = suppliers.supply_records.part.CALCULATE(brand, comment, container, key, manufacturer, name, part_type, retail_price, size)\n```\n\n### Retrieving Suppliers for a Part\nTo retrieve all suppliers that supply a specific part\n```python\nsuppliers_for_part = parts.supply_records.supplier.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n"}]}, {"role": "model", "parts": [{"text": "selected_customers = customers(cntry_code=phone[:2]).WHERE(\n    ISIN(cntry_code, (\"13\", \"31\", \"23\", \"29\", \"30\", \"18\", \"17\")) & HASNOT(orders)\n)\nresult = TPCH(\n    avg_balance=AVG(selected_customers.WHERE(acctbal > 0.0).acctbal)\n).PARTITION(\n    selected_customers.WHERE(acctbal > BACK(1).avg_balance),\n    name=\"custs\",\n    by=cntry_code,\n)(\n    CNTRY_CODE=cntry_code,\n    NUM_CUSTS=COUNT(custs),\n    TOTACCTBAL=SUM(custs.acctbal),\n)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Determine how many distinct suppliers can meet the needs of a part with a particular set of attributes. The customer is interested in parts of eight different sizes as long as they are not of type 'MEDIUM POLISHED', not of brand 'BRAND#45', the size is one of [49, 14, 23, 45, 19, 3, 36, 9], excluding suppliers supplier who have had complaints registered at the Better Business Bureau. Break down qualifying parts by the brand, type and size. Present the results by descending count of qualifying suppliers and ascending brand, type, and size. This is also known as TPC-H query #16.\nDatabase Schema:\n### The high-level graph `TPCH` collection contains the following columns:\n**WARNING**:\nTPCH is used ONLY for performing calculations, such as average, sum, count, etc. Do not use it for anything else.\n- **customers**: A list of all customer.\n- **lines**: A list of all lines items.\n- **nations**: A list of all nations.\n- **orders**: A list of all orders placed.\n- **parts**: A list of all parts available.\n- **regions**: A list of all regions.\n- **suppliers**: A list of all suppliers\n- **supply_records**: A list of all supply records for suppliers and parts.\n\n### The `customers` collection contains the following columns:\n- **acctbal**: The account balance of the customer.\n- **address**: The address of the customer.\n- **comment**: Additional comments or notes about the customer.\n- **key**: A unique identifier for the customer.\n- **mktsegment**: The market segment the customer belongs to.\n- **name**: The name of the customer.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The customer's phone number.\n- **nation**: The corresponding nation of the customer (reverse of `nations.customers`).\n- **orders**: A list of all orders placed by the customer (reverse of `orders.customer`).\n\n### The `lines` collection contains the following columns:\n- **comment**: Additional comments or notes about the line item.\n- **commit_date**: The committed delivery date for the line item.\n- **discount**: The discount applied to the line item.\n- **extended_price**: The extended price of the line item.\n- **line_number**: The line number within the order.\n- **order_key**: A foreign key referencing the `orders` collection.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **quantity**: The quantity ordered.\n- **receipt_date**: The date the line item was received.\n- **return_flag**: A flag indicating whether the item was returned.\n- **ship_date**: The shipping date of the line item.\n- **ship_instruct**: Shipping instructions for the line item.\n- **ship_mode**: The shipping mode for the line item.\n- **status**: The status of the line item.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **tax**: The tax applied to the line item.\n- **order**: The corresponding order for this line item (reverse of `orders.lines`).\n- **part**: The corresponding part for this line item (reverse of `parts.lines`).\n- **part_and_supplier**: The corresponding supply record (reverse of `supply_records.lines`).\n- **supplier**: The corresponding supplier for this line item (reverse of `suppliers.lines`).\n\n### The `nations` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the nation.\n- **key**: A unique identifier for the nation.\n- **name**: The name of the nation.\n- **region_key**: A foreign key referencing the `regions` collection.\n- **customers**: A list of customers associated with this nation (reverse of `customers.nation`).\n- **region**: The corresponding region this nation belongs to (reverse of `regions.nations`).\n- **suppliers**: A list of suppliers associated with this nation (reverse of `suppliers.nation`).\n\n### The `orders` collection contains the following columns:\n- **clerk**: The name of the clerk handling the order.\n- **comment**: Additional comments or notes about the order.\n- **customer_key**: A foreign key referencing the `customers` collection.\n- **key**: A unique identifier for the order.\n- **order_date**: The date when the order was placed.\n- **order_priority**: The priority level of the order (e.g., 'HIGH', 'LOW').\n- **order_status**: The current status of the order (e.g., 'PENDING', 'SHIPPED').\n- **ship_priority**: The priority level for shipping.\n- **total_price**: The total price of the order.\n- **customer**: The corresponding customer who placed the order (reverse of `customers.orders`).\n- **lines**: A list of all line items in this order (reverse of `lines.order`).\n\n### The `parts` collection contains the following columns:\n- **brand**: The brand of the part.\n- **comment**: Additional notes or descriptions about the part.\n- **container**: The type of container used for packaging the part.\n- **key**: A unique identifier for the part.\n- **manufacturer**: The manufacturer of the part.\n- **name**: The name of the part.\n- **part_type**: The type or category of the part.\n- **retail_price**: The retail price of the part.\n- **size**: The size of the part.\n- **lines**: A list of all line items that include this part (reverse of `lines.part`).\n- **supply_records**: A list of all supply records for this part (reverse of `supply_records.part`).\n\n### The `regions` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the region.\n- **key**: A unique identifier for the region.\n- **name**: The name of the region.\n- **nations**: A list of all nations within this region (reverse of `nations.region`).\n\n### The `suppliers` collection contains the following columns:\n- **account_balance**: The account balance of the supplier.\n- **address**: The address of the supplier.\n- **comment**: Additional notes or descriptions about the supplier.\n- **key**: A unique identifier for the supplier.\n- **name**: The name of the supplier.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The supplier's phone number.\n- **lines**: A list of all line items supplied by this supplier (reverse of `lines.supplier`).\n- **nation**: The corresponding nation of the supplier (reverse of `nations.suppliers`).\n- **supply_records**: A list of all supply records for this supplier (reverse of `supply_records.supplier`).\n\n### The `supply_records` collection contains the following columns:\n- **availqty**: The available quantity of the part supplied.\n- **comment**: Additional notes or descriptions about the supply record.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **supplycost**: The cost of supplying this part.\n- **lines**: A list of all line items that reference this supply record (reverse of `lines.part_and_supplier`).\n- **part**: The corresponding part for this supply record (reverse of `parts.supply_records`).\n- **supplier**: The corresponding supplier for this supply record (reverse of `suppliers.supply_records`).\n\n### Getting the total count of orders:\nTo get the total orders:\n```python\ntotal_orders = TPCH.CALCULATE(total_orders= COUNT(orders))\n```\n\n### Retrieving Customers for a Nation\nTo get all customers from a specific nation:\n```python\nnation_customers = nations.customers.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\n\n### Retrieving the Region for a Nation\nFor each nation, the corresponding region can be accessed as follows:\n```python\nnation_region = nations.region.CALCULATE(commnet, key, name)\n```\n\n### Retrieving Nations for a Region\nTo get all nations within a specific region:\n```python\nregion_nations = regions.nations.CALCULATE(comment, key, name, region_key)\n```\n\n### Retrieving the Customer for an Order\nFor each order, the corresponding customer can be accessed as follows:\n```python\ncustomer_for_order = orders.customer.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\nThis allows you to navigate from an order to the customer who placed it.\n\n### Retrieving Orders per Customer\nTo join all the orders for each customer:\n```python\norders_per_customer = customers.orders.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Orders in each nation\nTo join all the orders you have to join first each customer in each nation like this:\n```python\norders_per_customer_in_each_nation = nations.customers.orders.CALCULATE(order_key, customer_key, order_status,total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n### Retrieving Lines for an Order\nTo retrieve all line items for a given order:\n```python\nlines_for_order = orders.lines.CALCULATE(comment, commit_date, discount, extended_price, line_number, order_key, part_key, quantity, receipt_date, return_flag, ship_date, ship_instruct, ship_mode, status, supplier_key, tax)\n```\n### Retrieving the Order for a Line\nTo retrieve the order associated with a line item, you can query the lines object with the necessary fields:\n```python\norder_for_line = lines.order.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n### Retrieving Parts for a Supplier\nTo retrieve all parts supplied by a specific supplier:\n```python\nparts_for_supplier = suppliers.supply_records.part.CALCULATE(brand, comment, container, key, manufacturer, name, part_type, retail_price, size)\n```\n\n### Retrieving Suppliers for a Part\nTo retrieve all suppliers that supply a specific part\n```python\nsuppliers_for_part = parts.supply_records.supplier.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n"}]}, {"role": "model", "parts": [{"text": "selected_records = (\n    parts.WHERE(\n        (brand != \"BRAND#45\")\n        & ~STARTSWITH(part_type, \"MEDIUM POLISHED%\")\n        & ISIN(size, [49, 14, 23, 45, 19, 3, 36, 9])\n    )\n    .supply_records(\n        p_brand=BACK(1).brand,\n        p_type=BACK(1).part_type,\n        p_size=BACK(1).size,\n        ps_suppkey=supplier_key,\n    )\n    .WHERE(~LIKE(supplier.comment, \"%Customer%Complaints%\"))\n)\nresult = PARTITION(selected_records, name=\"ps\", by=(p_brand, p_type, p_size))(\n    P_BRAND=p_brand,\n    P_TYPE=p_type,\n    P_SIZE=p_size,\n    SUPPLIER_COUNT=NDISTINCT(ps.supplier_key),\n).ORDER_BY(SUPPLIER_COUNT.DESC(), P_BRAND.ASC(), P_TYPE.ASC(), P_SIZE.ASC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "For each region, find the suppliers in the top 0.1% by number of parts they supply, breaking ties alphabetically by name.\nDatabase Schema:\n### The high-level graph `TPCH` collection contains the following columns:\n**WARNING**:\nTPCH is used ONLY for performing calculations, such as average, sum, count, etc. Do not use it for anything else.\n- **customers**: A list of all customer.\n- **lines**: A list of all lines items.\n- **nations**: A list of all nations.\n- **orders**: A list of all orders placed.\n- **parts**: A list of all parts available.\n- **regions**: A list of all regions.\n- **suppliers**: A list of all suppliers\n- **supply_records**: A list of all supply records for suppliers and parts.\n\n### The `customers` collection contains the following columns:\n- **acctbal**: The account balance of the customer.\n- **address**: The address of the customer.\n- **comment**: Additional comments or notes about the customer.\n- **key**: A unique identifier for the customer.\n- **mktsegment**: The market segment the customer belongs to.\n- **name**: The name of the customer.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The customer's phone number.\n- **nation**: The corresponding nation of the customer (reverse of `nations.customers`).\n- **orders**: A list of all orders placed by the customer (reverse of `orders.customer`).\n\n### The `lines` collection contains the following columns:\n- **comment**: Additional comments or notes about the line item.\n- **commit_date**: The committed delivery date for the line item.\n- **discount**: The discount applied to the line item.\n- **extended_price**: The extended price of the line item.\n- **line_number**: The line number within the order.\n- **order_key**: A foreign key referencing the `orders` collection.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **quantity**: The quantity ordered.\n- **receipt_date**: The date the line item was received.\n- **return_flag**: A flag indicating whether the item was returned.\n- **ship_date**: The shipping date of the line item.\n- **ship_instruct**: Shipping instructions for the line item.\n- **ship_mode**: The shipping mode for the line item.\n- **status**: The status of the line item.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **tax**: The tax applied to the line item.\n- **order**: The corresponding order for this line item (reverse of `orders.lines`).\n- **part**: The corresponding part for this line item (reverse of `parts.lines`).\n- **part_and_supplier**: The corresponding supply record (reverse of `supply_records.lines`).\n- **supplier**: The corresponding supplier for this line item (reverse of `suppliers.lines`).\n\n### The `nations` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the nation.\n- **key**: A unique identifier for the nation.\n- **name**: The name of the nation.\n- **region_key**: A foreign key referencing the `regions` collection.\n- **customers**: A list of customers associated with this nation (reverse of `customers.nation`).\n- **region**: The corresponding region this nation belongs to (reverse of `regions.nations`).\n- **suppliers**: A list of suppliers associated with this nation (reverse of `suppliers.nation`).\n\n### The `orders` collection contains the following columns:\n- **clerk**: The name of the clerk handling the order.\n- **comment**: Additional comments or notes about the order.\n- **customer_key**: A foreign key referencing the `customers` collection.\n- **key**: A unique identifier for the order.\n- **order_date**: The date when the order was placed.\n- **order_priority**: The priority level of the order (e.g., 'HIGH', 'LOW').\n- **order_status**: The current status of the order (e.g., 'PENDING', 'SHIPPED').\n- **ship_priority**: The priority level for shipping.\n- **total_price**: The total price of the order.\n- **customer**: The corresponding customer who placed the order (reverse of `customers.orders`).\n- **lines**: A list of all line items in this order (reverse of `lines.order`).\n\n### The `parts` collection contains the following columns:\n- **brand**: The brand of the part.\n- **comment**: Additional notes or descriptions about the part.\n- **container**: The type of container used for packaging the part.\n- **key**: A unique identifier for the part.\n- **manufacturer**: The manufacturer of the part.\n- **name**: The name of the part.\n- **part_type**: The type or category of the part.\n- **retail_price**: The retail price of the part.\n- **size**: The size of the part.\n- **lines**: A list of all line items that include this part (reverse of `lines.part`).\n- **supply_records**: A list of all supply records for this part (reverse of `supply_records.part`).\n\n### The `regions` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the region.\n- **key**: A unique identifier for the region.\n- **name**: The name of the region.\n- **nations**: A list of all nations within this region (reverse of `nations.region`).\n\n### The `suppliers` collection contains the following columns:\n- **account_balance**: The account balance of the supplier.\n- **address**: The address of the supplier.\n- **comment**: Additional notes or descriptions about the supplier.\n- **key**: A unique identifier for the supplier.\n- **name**: The name of the supplier.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The supplier's phone number.\n- **lines**: A list of all line items supplied by this supplier (reverse of `lines.supplier`).\n- **nation**: The corresponding nation of the supplier (reverse of `nations.suppliers`).\n- **supply_records**: A list of all supply records for this supplier (reverse of `supply_records.supplier`).\n\n### The `supply_records` collection contains the following columns:\n- **availqty**: The available quantity of the part supplied.\n- **comment**: Additional notes or descriptions about the supply record.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **supplycost**: The cost of supplying this part.\n- **lines**: A list of all line items that reference this supply record (reverse of `lines.part_and_supplier`).\n- **part**: The corresponding part for this supply record (reverse of `parts.supply_records`).\n- **supplier**: The corresponding supplier for this supply record (reverse of `suppliers.supply_records`).\n\n### Getting the total count of orders:\nTo get the total orders:\n```python\ntotal_orders = TPCH.CALCULATE(total_orders= COUNT(orders))\n```\n\n### Retrieving Customers for a Nation\nTo get all customers from a specific nation:\n```python\nnation_customers = nations.customers.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\n\n### Retrieving the Region for a Nation\nFor each nation, the corresponding region can be accessed as follows:\n```python\nnation_region = nations.region.CALCULATE(commnet, key, name)\n```\n\n### Retrieving Nations for a Region\nTo get all nations within a specific region:\n```python\nregion_nations = regions.nations.CALCULATE(comment, key, name, region_key)\n```\n\n### Retrieving the Customer for an Order\nFor each order, the corresponding customer can be accessed as follows:\n```python\ncustomer_for_order = orders.customer.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\nThis allows you to navigate from an order to the customer who placed it.\n\n### Retrieving Orders per Customer\nTo join all the orders for each customer:\n```python\norders_per_customer = customers.orders.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Orders in each nation\nTo join all the orders you have to join first each customer in each nation like this:\n```python\norders_per_customer_in_each_nation = nations.customers.orders.CALCULATE(order_key, customer_key, order_status,total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n### Retrieving Lines for an Order\nTo retrieve all line items for a given order:\n```python\nlines_for_order = orders.lines.CALCULATE(comment, commit_date, discount, extended_price, line_number, order_key, part_key, quantity, receipt_date, return_flag, ship_date, ship_instruct, ship_mode, status, supplier_key, tax)\n```\n### Retrieving the Order for a Line\nTo retrieve the order associated with a line item, you can query the lines object with the necessary fields:\n```python\norder_for_line = lines.order.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n### Retrieving Parts for a Supplier\nTo retrieve all parts supplied by a specific supplier:\n```python\nparts_for_supplier = suppliers.supply_records.part.CALCULATE(brand, comment, container, key, manufacturer, name, part_type, retail_price, size)\n```\n\n### Retrieving Suppliers for a Part\nTo retrieve all suppliers that supply a specific part\n```python\nsuppliers_for_part = parts.supply_records.supplier.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n"}]}, {"role": "model", "parts": [{"text": "pct = PERCENTILE(\n        by=(COUNT(supply_records).ASC(), name.ASC()), levels=2, n_buckets=1000\n    )\nresult = regions.nations.suppliers(name).WHERE(HAS(supply_records) & (pct == 1000))"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "List the name and address for all Canadian suppliers that may be a candidate for discounts based on their sales in 1994. Specifically, if the supplier has had at least 1 part they supply that starts with 'forest' where the supplier's excess of that part is more than 50% of the total quantity of that part purchased in 1994. Order the qualifying suppliers alphabetically. This is also known as TPC-H query #20.\nDatabase Schema:\n### The high-level graph `TPCH` collection contains the following columns:\n**WARNING**:\nTPCH is used ONLY for performing calculations, such as average, sum, count, etc. Do not use it for anything else.\n- **customers**: A list of all customer.\n- **lines**: A list of all lines items.\n- **nations**: A list of all nations.\n- **orders**: A list of all orders placed.\n- **parts**: A list of all parts available.\n- **regions**: A list of all regions.\n- **suppliers**: A list of all suppliers\n- **supply_records**: A list of all supply records for suppliers and parts.\n\n### The `customers` collection contains the following columns:\n- **acctbal**: The account balance of the customer.\n- **address**: The address of the customer.\n- **comment**: Additional comments or notes about the customer.\n- **key**: A unique identifier for the customer.\n- **mktsegment**: The market segment the customer belongs to.\n- **name**: The name of the customer.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The customer's phone number.\n- **nation**: The corresponding nation of the customer (reverse of `nations.customers`).\n- **orders**: A list of all orders placed by the customer (reverse of `orders.customer`).\n\n### The `lines` collection contains the following columns:\n- **comment**: Additional comments or notes about the line item.\n- **commit_date**: The committed delivery date for the line item.\n- **discount**: The discount applied to the line item.\n- **extended_price**: The extended price of the line item.\n- **line_number**: The line number within the order.\n- **order_key**: A foreign key referencing the `orders` collection.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **quantity**: The quantity ordered.\n- **receipt_date**: The date the line item was received.\n- **return_flag**: A flag indicating whether the item was returned.\n- **ship_date**: The shipping date of the line item.\n- **ship_instruct**: Shipping instructions for the line item.\n- **ship_mode**: The shipping mode for the line item.\n- **status**: The status of the line item.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **tax**: The tax applied to the line item.\n- **order**: The corresponding order for this line item (reverse of `orders.lines`).\n- **part**: The corresponding part for this line item (reverse of `parts.lines`).\n- **part_and_supplier**: The corresponding supply record (reverse of `supply_records.lines`).\n- **supplier**: The corresponding supplier for this line item (reverse of `suppliers.lines`).\n\n### The `nations` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the nation.\n- **key**: A unique identifier for the nation.\n- **name**: The name of the nation.\n- **region_key**: A foreign key referencing the `regions` collection.\n- **customers**: A list of customers associated with this nation (reverse of `customers.nation`).\n- **region**: The corresponding region this nation belongs to (reverse of `regions.nations`).\n- **suppliers**: A list of suppliers associated with this nation (reverse of `suppliers.nation`).\n\n### The `orders` collection contains the following columns:\n- **clerk**: The name of the clerk handling the order.\n- **comment**: Additional comments or notes about the order.\n- **customer_key**: A foreign key referencing the `customers` collection.\n- **key**: A unique identifier for the order.\n- **order_date**: The date when the order was placed.\n- **order_priority**: The priority level of the order (e.g., 'HIGH', 'LOW').\n- **order_status**: The current status of the order (e.g., 'PENDING', 'SHIPPED').\n- **ship_priority**: The priority level for shipping.\n- **total_price**: The total price of the order.\n- **customer**: The corresponding customer who placed the order (reverse of `customers.orders`).\n- **lines**: A list of all line items in this order (reverse of `lines.order`).\n\n### The `parts` collection contains the following columns:\n- **brand**: The brand of the part.\n- **comment**: Additional notes or descriptions about the part.\n- **container**: The type of container used for packaging the part.\n- **key**: A unique identifier for the part.\n- **manufacturer**: The manufacturer of the part.\n- **name**: The name of the part.\n- **part_type**: The type or category of the part.\n- **retail_price**: The retail price of the part.\n- **size**: The size of the part.\n- **lines**: A list of all line items that include this part (reverse of `lines.part`).\n- **supply_records**: A list of all supply records for this part (reverse of `supply_records.part`).\n\n### The `regions` collection contains the following columns:\n- **comment**: Additional notes or descriptions about the region.\n- **key**: A unique identifier for the region.\n- **name**: The name of the region.\n- **nations**: A list of all nations within this region (reverse of `nations.region`).\n\n### The `suppliers` collection contains the following columns:\n- **account_balance**: The account balance of the supplier.\n- **address**: The address of the supplier.\n- **comment**: Additional notes or descriptions about the supplier.\n- **key**: A unique identifier for the supplier.\n- **name**: The name of the supplier.\n- **nation_key**: A foreign key referencing the `nations` collection.\n- **phone**: The supplier's phone number.\n- **lines**: A list of all line items supplied by this supplier (reverse of `lines.supplier`).\n- **nation**: The corresponding nation of the supplier (reverse of `nations.suppliers`).\n- **supply_records**: A list of all supply records for this supplier (reverse of `supply_records.supplier`).\n\n### The `supply_records` collection contains the following columns:\n- **availqty**: The available quantity of the part supplied.\n- **comment**: Additional notes or descriptions about the supply record.\n- **part_key**: A foreign key referencing the `parts` collection.\n- **supplier_key**: A foreign key referencing the `suppliers` collection.\n- **supplycost**: The cost of supplying this part.\n- **lines**: A list of all line items that reference this supply record (reverse of `lines.part_and_supplier`).\n- **part**: The corresponding part for this supply record (reverse of `parts.supply_records`).\n- **supplier**: The corresponding supplier for this supply record (reverse of `suppliers.supply_records`).\n\n### Getting the total count of orders:\nTo get the total orders:\n```python\ntotal_orders = TPCH.CALCULATE(total_orders= COUNT(orders))\n```\n\n### Retrieving Customers for a Nation\nTo get all customers from a specific nation:\n```python\nnation_customers = nations.customers.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\n\n### Retrieving the Region for a Nation\nFor each nation, the corresponding region can be accessed as follows:\n```python\nnation_region = nations.region.CALCULATE(commnet, key, name)\n```\n\n### Retrieving Nations for a Region\nTo get all nations within a specific region:\n```python\nregion_nations = regions.nations.CALCULATE(comment, key, name, region_key)\n```\n\n### Retrieving the Customer for an Order\nFor each order, the corresponding customer can be accessed as follows:\n```python\ncustomer_for_order = orders.customer.CALCULATE(acctbal, address, comment, key, mktsegment, name, nation_key, phone)\n```\nThis allows you to navigate from an order to the customer who placed it.\n\n### Retrieving Orders per Customer\nTo join all the orders for each customer:\n```python\norders_per_customer = customers.orders.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Orders in each nation\nTo join all the orders you have to join first each customer in each nation like this:\n```python\norders_per_customer_in_each_nation = nations.customers.orders.CALCULATE(order_key, customer_key, order_status,total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n### Retrieving Lines for an Order\nTo retrieve all line items for a given order:\n```python\nlines_for_order = orders.lines.CALCULATE(comment, commit_date, discount, extended_price, line_number, order_key, part_key, quantity, receipt_date, return_flag, ship_date, ship_instruct, ship_mode, status, supplier_key, tax)\n```\n### Retrieving the Order for a Line\nTo retrieve the order associated with a line item, you can query the lines object with the necessary fields:\n```python\norder_for_line = lines.order.CALCULATE(order_key, customer_key, order_status, total_price, order_date, order_priority, clerk, ship_priority, comment)\n```\n### Retrieving Parts for a Supplier\nTo retrieve all parts supplied by a specific supplier:\n```python\nparts_for_supplier = suppliers.supply_records.part.CALCULATE(brand, comment, container, key, manufacturer, name, part_type, retail_price, size)\n```\n\n### Retrieving Suppliers for a Part\nTo retrieve all suppliers that supply a specific part\n```python\nsuppliers_for_part = parts.supply_records.supplier.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n\n### Retrieving Suppliers for a Nation\nTo retrieve all suppliers located in a given nation:\n```python\nsuppliers_in_nation = nations.suppliers.CALCULATE(account_balance, address, comment, key, name, nation_key, phone)\n```\n"}]}, {"role": "model", "parts": [{"text": "part_qty = SUM(\n    lines.WHERE(\n        (ship_date >= datetime.date(1994, 1, 1))\n        & (ship_date < datetime.date(1995, 1, 1))\n    ).quantity\n)\nselected_part_supplied = supply_records.part.WHERE(\n    STARTSWITH(name, \"forest\") & (BACK(1).availqty > part_qty * 0.5)\n)\nresult = suppliers(\n    S_NAME=name,\n    S_ADDRESS=address,\n).WHERE((nation.name == \"CANADA\") & COUNT(selected_part_supplied) > 0).ORDER_BY(S_NAME.ASC())"}]}]}
