{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Find, for every nation, the name of the nation, the name of its region, and the number of customers in the nation."}]}, {"role": "model", "parts": [{"text": "result = nations(\n    nation_name=name,\n    region_name=region.name,\n    num_customers=COUNT(customers)\n)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "What percentage of revenue from parts shipped in September of 1995 was from promotional parts (parts whose type begins with 'PROMO'). Revenue is defined as extended price times one minus the discount. This is also known as TPC-H query #14."}]}, {"role": "model", "parts": [{"text": "value = extended_price * (1 - discount)\nselected_lines = lines.WHERE(\n    (ship_date >= datetime.date(1995, 9, 1))\n    & (ship_date < datetime.date(1995, 10, 1))\n)(\n    value=value,\n    promo_value=IFF(STARTSWITH(part.part_type, \"PROMO\"), value, 0),\n)\nresult = TPCH(PROMO_REVENUE=100.0 * SUM(selected_lines.promo_value) / SUM(selected_lines.value))"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Which 10 customers ordered the most products with turquoise in the name, by quantity, in the year 1995? Include their name and the total quantity."}]}, {"role": "model", "parts": [{"text": "selected_year = 1995\nselected_orders = orders.WHERE(YEAR(order_date) == selected_year)\nselected_lines = selected_orders.lines.WHERE(\n    CONTAINS(part.name, \"turquoise\")\n)\nresult = customers(\n    name,\n    total_quantity=SUM(selected_lines.quantity)\n).TOP_K(10, by=total_quantity.DESC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Break down how many customers, by country code of their phone number (only including customers from certain country codes), have not placed an order but have an account balance that is above the average for all positive account balances of such customers. Also include the total balance for all such customers for each country code. The country codes to include are 13, 31, 23, 29, 30, 18 and 17. This is also known as TPC-H query #22."}]}, {"role": "model", "parts": [{"text": "selected_customers = customers(cntry_code=phone[:2]).WHERE(\n    ISIN(cntry_code, (\"13\", \"31\", \"23\", \"29\", \"30\", \"18\", \"17\")) & HASNOT(orders)\n)\nresult = TPCH(\n    avg_balance=AVG(selected_customers.WHERE(acctbal > 0.0).acctbal)\n).PARTITION(\n    selected_customers.WHERE(acctbal > BACK(1).avg_balance),\n    name=\"custs\",\n    by=cntry_code,\n)(\n    CNTRY_CODE=cntry_code,\n    NUM_CUSTS=COUNT(custs),\n    TOTACCTBAL=SUM(custs.acctbal),\n)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Determine how many distinct suppliers can meet the needs of a part with a particular set of attributes. The customer is interested in parts of eight different sizes as long as they are not of type 'MEDIUM POLISHED', not of brand 'BRAND#45', the size is one of [49, 14, 23, 45, 19, 3, 36, 9], excluding suppliers supplier who have had complaints registered at the Better Business Bureau. Break down qualifying parts by the brand, type and size. Present the results by descending count of qualifying suppliers and ascending brand, type, and size. This is also known as TPC-H query #16."}]}, {"role": "model", "parts": [{"text": "selected_records = (\n    parts.WHERE(\n        (brand != \"BRAND#45\")\n        & ~STARTSWITH(part_type, \"MEDIUM POLISHED%\")\n        & ISIN(size, [49, 14, 23, 45, 19, 3, 36, 9])\n    )\n    .supply_records(\n        p_brand=BACK(1).brand,\n        p_type=BACK(1).part_type,\n        p_size=BACK(1).size,\n        ps_suppkey=supplier_key,\n    )\n    .WHERE(~LIKE(supplier.comment, \"%Customer%Complaints%\"))\n)\nresult = PARTITION(selected_records, name=\"ps\", by=(p_brand, p_type, p_size))(\n    P_BRAND=p_brand,\n    P_TYPE=p_type,\n    P_SIZE=p_size,\n    SUPPLIER_COUNT=NDISTINCT(ps.supplier_key),\n).ORDER_BY(SUPPLIER_COUNT.DESC(), P_BRAND.ASC(), P_TYPE.ASC(), P_SIZE.ASC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "For each region, find the suppliers in the top 0.1% by number of parts they supply, breaking ties alphabetically by name."}]}, {"role": "model", "parts": [{"text": "pct = PERCENTILE(\n        by=(COUNT(supply_records).ASC(), name.ASC()), levels=2, n_buckets=1000\n    )\nresult = regions.nations.suppliers(name).WHERE(HAS(supply_records) & (pct == 1000))"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "List the name and address for all Canadian suppliers that may be a candidate for discounts based on their sales in 1994. Specifically, if the supplier has had at least 1 part they supply that starts with 'forest' where the supplier's excess of that part is more than 50% of the total quantity of that part purchased in 1994. Order the qualifying suppliers alphabetically. This is also known as TPC-H query #20."}]}, {"role": "model", "parts": [{"text": "part_qty = SUM(\n    lines.WHERE(\n        (ship_date >= datetime.date(1994, 1, 1))\n        & (ship_date < datetime.date(1995, 1, 1))\n    ).quantity\n)\nselected_part_supplied = supply_records.part.WHERE(\n    STARTSWITH(name, \"forest\") & (BACK(1).availqty > part_qty * 0.5)\n)\nresult = suppliers(\n    S_NAME=name,\n    S_ADDRESS=address,\n).WHERE((nation.name == \"CANADA\") & COUNT(selected_part_supplied) > 0).ORDER_BY(S_NAME.ASC())"}]}]}
