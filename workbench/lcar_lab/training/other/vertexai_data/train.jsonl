{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Calculate the distribution of customers who have made 0, 1, 2, etc. special request orders made. An order is determined to be a special request if its comment contains 'special' and later contains 'requests'. This is also known as TPC-H query #13."}]}, {"role": "model", "parts": [{"text": "customer_info = customers(\n    key,\n    num_non_special_orders=COUNT(\n        orders.WHERE(~(LIKE(comment, \"%special%requests%\")))\n    ),\n)\nresult = PARTITION(customer_info, name=\"custs\", by=num_non_special_orders)(\n    C_COUNT=num_non_special_orders, CUSTDIST=COUNT(custs)\n).ORDER_BY(CUSTDIST.DESC(), C_COUNT.DESC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "What was the profit made for a particular line of parts looking at the supplying nation and particular year in question, where the line of parts is green parts. Specifically, for each nation and each year, find the profit for all parts ordered in that year that contain 'green' in their names and that were filled by a supplier in that nation. The profit is defined as the sum of the extended price times one minus the discount, minus the product of the supply cost and quantity, for all lineitems describing parts in the specified line. List the nations in ascending alphabetical order and, for each nation, the year and profit in descending order by year (most recent first). This is also known as TPC-H query #9."}]}, {"role": "model", "parts": [{"text": "selected_lines = nations.suppliers.supply_records.WHERE(\n    CONTAINS(part.name, \"green\")\n).lines(\n    nation=BACK(3).name,\n    o_year=YEAR(order.order_date),\n    value=extended_price * (1 - discount) - BACK(1).supplycost * quantity,\n)\n\nresult = PARTITION(selected_lines, name=\"l\", by=(nation, o_year))(\n    NATION=nation, O_YEAR=o_year, AMOUNT=SUM(l.value)\n).ORDER_BY(NATION.ASC(), O_YEAR.DESC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Determine how much average yearly revenue would be lost if orders were no longer filled for small quantities (quantities below 20% of the global average) of parts from brand 'BRAND#23' whose container size is 'MED BOX'. Assume that the data is spread out across 7 years when taking the average across all years. This is also known as TPC-H query #17."}]}, {"role": "model", "parts": [{"text": "selected_lines = parts.WHERE((brand == \"Brand#23\") & (container == \"MED BOX\"))(\n    avg_quantity=AVG(lines.quantity)\n).lines.WHERE(quantity < 0.2 * BACK(1).avg_quantity)\nresult = TPCH(AVG_YEARLY=SUM(selected_lines.extended_price) / 7.0)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "This question determines the top 20 customers based on impact in revenue due to having returned parts within a particular quarter. Revenue lost is defined as the sum of the extended price times one minus the discount for all qualifying lineitems. The chosen quarter is the last 3 months of 1993. The query lists the customer's name, address, nation, phone number, account balance, comment information and revenue lost. This is also known as TPC-H query #10."}]}, {"role": "model", "parts": [{"text": "selected_lines = orders.WHERE(\n    (order_date >= datetime.date(1993, 10, 1))\n    & (order_date < datetime.date(1994, 1, 1))\n).lines.WHERE(return_flag == 'R')(amt=extended_price * (1 - discount))\n\nresult = customers(\n    C_CUSTKEY=key,\n    C_NAME=name,\n    REVENUE=SUM(selected_lines.amt),\n    C_ACCTBAL=acctbal,\n    N_NAME=nation.name,\n    C_ADDRESS=address,\n    C_PHONE=phone,\n    C_COMMENT=comment,\n).TOP_K(20, by=(REVENUE.DESC(), C_CUSTKEY.ASC()))"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "What 3 product brands saw the largest positive change in quantity sold from 1995 to 1996."}]}, {"role": "model", "parts": [{"text": "selected_lines = lines.WHERE(ISIN(YEAR(order.order_date), (1995, 1996)))\nline_info = selected_lines(quant=IFF(YEAR(order.order_date) == 1996, 1, -1))\nresult = PARTITION(parts, name=\"p\", by=brand)(\n    brand,\n    change_95_to_96=SUM(line_info.quant)\n).WHERE(\n    change_95_to_96 > 0\n).TOP_K(5, by=change_95_to_96.DESC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Provide a summary pricing report for all line items shipped as of September 2nd of 1998. The summary should list totals for extended price, discounted extended price, discounted extended price plus tax, average quantity, average extended price, average discount, and number of lines, all broken down by the return flag & line status. This is also known as TPC-H query #1."}]}, {"role": "model", "parts": [{"text": "disc_price = l.extended_price * (1 - l.discount)\ncharge = disc_price * (1 + l.tax)\nselected_lines = lines.WHERE((ship_date <= datetime.date(1998, 9, 2)))\npartitioned_lines = PARTITION(selected_lines, name=\"l\", by=(return_flag, status))\nresult = partitioned_lines(\n    L_RETURNFLAG=return_flag,\n    L_LINESTATUS=status,\n    SUM_QTY=SUM(l.quantity),\n    SUM_BASE_PRICE=SUM(l.extended_price),\n    SUM_DISC_PRICE=SUM(disc_price),\n    SUM_CHARGE=SUM(charge),\n    AVG_QTY=AVG(l.quantity),\n    AVG_PRICE=AVG(l.extended_price),\n    AVG_DISC=AVG(l.discount),\n    COUNT_ORDER=COUNT(l),\n).ORDER_BY(return_flag.ASC(), status.ASC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "For each Asian country, calculate the total revenue generated by suppliers in that nation shipping a part to a customer from the same nation, only considering shipments ordered in 1994. Revenue volume for all qualifying lineitems in a particular nation is defined as sum(l_extendedprice * (1 - l_discount)). This is also known as TPC-H query #5."}]}, {"role": "model", "parts": [{"text": "selected_lines = customers.orders.WHERE(\n    (order_date >= datetime.date(1994, 1, 1))\n    & (order_date < datetime.date(1995, 1, 1))\n).lines.WHERE(supplier.nation.name == BACK(3).name)(\n    value=extended_price * (1 - discount)\n)\nresult = nations.WHERE(region.name == \"ASIA\")(\n    N_NAME=name, REVENUE=SUM(selected_lines.value)\n).ORDER_BY(REVENUE.DESC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Order customers based on their status as having placed a large quantity order. Calculate a list of the top 100 instances of a customer having placed large quantity orders by the total price of the order. List the customer name, customer key, the order key, date and total price and the quantity for the order. Break ties in favor of the order made first chronologically. This is also known as TPC-H query #18."}]}, {"role": "model", "parts": [{"text": "result = orders(\n    C_NAME=customer.name,\n    C_CUSTKEY=customer.key,\n    O_ORDERKEY=key,\n    O_ORDERDATE=order_date,\n    O_TOTALPRICE=total_price,\n    TOTAL_QUANTITY=SUM(lines.quantity),\n).WHERE(\n    TOTAL_QUANTITY > 300\n).TOP_K(100, by=(O_TOTALPRICE.DESC(), O_ORDERDATE.ASC()))"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "How many customers made repeated purchases of the same product within a six-month period?"}]}, {"role": "model", "parts": [{"text": "six_month_repeat_purchases = orders.WHERE(\n (order_date > BACK(2).order_date) & \n (order_date < DATE(BACK(2).order_date, '6 months'))\n).lines.WHERE(part_key == BACK(4).part_key)\nselected_customers = lines.order.customer.WHERE(HAS(six_month_repeat_purchases))\nresult = TPCH(\n customer_count = NDISTINCT(selected_customers.cust_key)\n)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "How was revenue impacted in 1994 due to the presence of certain discounts, specifically those between 0.05 and 0.07 (inclusive); speculate on future revenue due to a change in that discount. Considers all the lineitems shipped in the given year with discounts in thar range value. List the amount by which the total revenue would have increased if these discounts had been eliminated for lineitems with a quantity below 24. Note that the potential revenue increase is equal to the sum of the extended price times one minus the discount for all lineitems with discounts and quantities in the qualifying range. This is also known as TPC-H query #6."}]}, {"role": "model", "parts": [{"text": "selected_lines = lines.WHERE(\n    (ship_date >= datetime.date(1994, 1, 1))\n    & (ship_date < datetime.date(1995, 1, 1))\n    & (0.05 <= discount)\n    & (discount <= 0.07)\n    & (quantity < 24)\n)(amt=extended_price * discount)\nresult = TPCH(REVENUE=SUM(selected_lines.amt))"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Determine the impact of low cost shipping modes on delays for orders of varying priorities. Do so by counting, by ship mode, for lineitems actually received by customers in 1994, the number of lineitems belonging to orders for which the receipt date exceeds the commit date for ship modes of 'MAIL' or 'SHIP'. Only lineitems that were actually shipped before the commit date are considered. The late lineitems are partitioned into two groups, those with priority `1-URGENT` or `2-HIGH`, and those with a priority other than `1-URGENT` or `2-HIGH`. This is also known as TPC-H query #12."}]}, {"role": "model", "parts": [{"text": "selected_lines = lines.WHERE(\n    ((ship_mode == \"MAIL\") | (ship_mode == \"SHIP\"))\n    & (ship_date < commit_date)\n    & (commit_date < receipt_date)\n    & (receipt_date >= datetime.date(1994, 1, 1))\n    & (receipt_date < datetime.date(1995, 1, 1))\n)(\n    is_high_priority=(order.order_priority == \"1-URGENT\")\n    | (order.order_priority == \"2-HIGH\"),\n)\nresult = PARTITION(selected_lines, \"l\", by=ship_mode)(\n    L_SHIPMODE=ship_mode,\n    HIGH_LINE_COUNT=SUM(l.is_high_priority),\n    LOW_LINE_COUNT=SUM(~(l.is_high_priority)),\n).ORDER_BY(L_SHIPMODE.ASC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Find, within the European region, for each brass part of size 15, the supplier who can supply it at minimum cost. If several suppliers in that region offer the desired part type and size at the same (minimum) cost, list the parts from suppliers with the 100 highest account balances. List the supplier's account balance, name and nation; the part's number and manufacturer; the supplier's address, phone number and comment information. This is also known as TPC-H query #2."}]}, {"role": "model", "parts": [{"text": "selected_parts = (\n    nations.WHERE(region.name == \"EUROPE\")\n    .suppliers.supply_records.part(\n        s_acctbal=BACK(2).account_balance,\n        s_name=BACK(2).name,\n        n_name=BACK(3).name,\n        s_address=BACK(2).address,\n        s_phone=BACK(2).phone,\n        s_comment=BACK(2).comment,\n        supplycost=BACK(1).supplycost,\n    )\n    .WHERE(ENDSWITH(part_type, \"BRASS\") & (size == 15))\n)\npart_groups = PARTITION(selected_parts, name=\"p\", by=key)(\n    best_cost=MIN(p.supplycost)\n)\nresult = part_groups.p.WHERE(\n    (supplycost == BACK(1).best_cost)\n    & ENDSWITH(part_type, \"BRASS\")\n    & (size == 15)\n)(\n    S_ACCTBAL=s_acctbal,\n    S_NAME=s_name,\n    N_NAME=n_name,\n    P_PARTKEY=key,\n    P_MFGR=manufacturer,\n    S_ADDRESS=s_address,\n    S_PHONE=s_phone,\n    S_COMMENT=s_comment,\n).TOP_K(\n    100,\n    by=(S_ACCTBAL.DESC(), N_NAME.ASC(), S_NAME.ASC(), P_PARTKEY.ASC()),\n)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Find the 10 unshipped orders with the highest value. Retrieves the shipping priority and potential revenue, defined as the sum of the extended price times one minus the discount, of the orders having the largest revenue among those that had not been shipped as of March 15th, 1995. orders are listed in decreasing order of revenue. If more than 10 unshipped orders exist meeting the criteria, only the 10 orders with the largest revenue are listed. This is also known as TPC-H query #3."}]}, {"role": "model", "parts": [{"text": "cutoff_date = datetime.date(1995, 3, 15)\nselected_orders = orders.WHERE(\n    (customer.mktsegment == \"BUILDING\") & (order_date < cutoff_date)\n)\nselected_lines = selected_orders.lines.WHERE(ship_date > cutoff_date)(\n    BACK(1).order_date,\n    BACK(1).ship_priority,\n)\nresult = PARTITION(\n    selected_lines, name=\"l\", by=(order_key, order_date, ship_priority)\n)(\n    L_ORDERKEY=order_key,\n    REVENUE=SUM(l.extended_price * (1 - l.discount)),\n    O_ORDERDATE=order_date,\n    O_SHIPPRIORITY=ship_priority,\n).TOP_K(10, by=(REVENUE.DESC(), O_ORDERDATE.ASC(), L_ORDERKEY.ASC()))"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "For each of the 5 largest part sizes, find the part of that size with the largest retail price"}]}, {"role": "model", "parts": [{"text": "result = PARTITION(parts, name=\"p\", by=size\n).TOP_K(5, by=size.DESC()\n).p(size, name\n).WHERE(RANKING(by=retail_price.DESC(), levels=1) == 1)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "How well is the order priority system is working at ensuring that orders are delivered on time within the third quarter of 1993? Analyze this by counting the number of orders ordered in the given quarter of the given year in which at least one lineitem was received by the customer later than its committed date. List the count of such orders for each order priority sorted in ascending priority order. This is also known as TPC-H query #4."}]}, {"role": "model", "parts": [{"text": "selected_lines = lines.WHERE(commit_date < receipt_date)\nselected_orders = orders.WHERE(\n    (order_date >= datetime.date(1993, 7, 1))\n    & (order_date < datetime.date(1993, 10, 1))\n    & HAS(selected_lines)\n)\nresult = PARTITION(selected_orders, name=\"o\", by=order_priority)(\n    O_ORDERPRIORITY=order_priority,\n    ORDER_COUNT=COUNT(o),\n).ORDER_BY(O_ORDERPRIORITY.ASC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "For each region, calculate the average percentage of purchases made from suppliers in that region belonging to the most common part type shipped from the supplier region to the customer region, averaging across all customer region. Only considers lineitems from June of 1992 where the container is small."}]}, {"role": "model", "parts": [{"text": "line_info = (\n    parts.WHERE(\n        STARTSWITH(container, \"SM\"),\n    )\n    .lines.WHERE((MONTH(ship_date) == 6) & (YEAR(ship_date) == 1992))(\n        supp_region=supplier.nation.region.name,\n    )\n    .order.WHERE(YEAR(order_date) == 1992)(\n        supp_region=BACK(1).supp_region,\n        part_type=BACK(2).part_type,\n        cust_region=customer.nation.region.name,\n    )\n)\nrrt_combos = PARTITION(\n    line_info, name=\"lines\", by=(supp_region, cust_region, part_type)\n)(n_instances=COUNT(lines))\nrr_combos = PARTITION(rrt_combos, name=\"part_types\", by=(supp_region, cust_region))(\n    percentage=100.0 * MAX(part_types.n_instances) / SUM(part_types.n_instances)\n)\nresult = PARTITION(\n    rr_combos,\n    name=\"cust_regions\",\n    by=supp_region,\n)(supp_region, avg_percentage=AVG(cust_regions.percentage)).ORDER_BY(\n    supp_region.ASC()\n)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "What are the top 10 most purchased products by north american customers?"}]}, {"role": "model", "parts": [{"text": "selected_lines = lines.WHERE(order.customer.nation.region.name == \"AMERICA\")"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Find all customers whose name ends with a zero and are in the 30-lowest account balances"}]}, {"role": "model", "parts": [{"text": "result = output = customers(name).WHERE(ENDSWITH(name, \"0\") & (RANKING(by=acctbal.DESC() <= 30)))"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Identify the most import subset of available part supplies from Germany. To do so, scan the available stock of German suppliers and identify all the parts that represent a significant percentage (at least 0.01%) of the total value of all the stock in Germany. Displays the part number and the value of those parts in descending order of value. The value for a given part from a supplier is defined as the product of the supply cost of the supplier for the part and the quantity that the supplier has for that product. This is also known as TPC-H query #11."}]}, {"role": "model", "parts": [{"text": "is_german_supplier = supplier.nation.name == \"GERMANY\"\nselected_records = supply_records.WHERE(is_german_supplier)(metric=supplycost * availqty)\nresult = TPCH(min_market_share=SUM(selected_records.metric) * 0.0001).PARTITION(\n    selected_records, name=\"ps\", by=part_key\n)(\n    PS_PARTKEY=part_key, VALUE=SUM(ps.metric)\n).WHERE(VALUE > BACK(1).min_market_share).ORDER_BY(VALUE.DESC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "What is the percentage of orders that include products from multiple suppliers?"}]}, {"role": "model", "parts": [{"text": "orders_with_multiple_suppliers = orders.WHERE(NDISTINCT(lines.supplier.name) > 1)\nresult = TPCH(percentage=100.0*COUNT(orders_with_multiple_suppliers) / COUNT(orders))"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Report the gross discounted revenue resulting from select parts that were shipped by air and delivered in person. More specifically, it finds the gross discounted revenue for all orders for three different types of parts that were shipped by air and delivered in person. The selected parts are those where one of the following combinations of criteria are true:\n    - The brand is `'BRAND#12'`, the quantity is between 1 and 11, the size is between 1 and 5, and the container type is one of `['SM CASE', 'SM BOX', 'SM PACK', 'SM PKG']`.\n    - The brand is `'BRAND#23'`, the quantity is between 10 and 20, the size is between 1 and 10, and the container type is one of `['MED BAG', 'MED BOX', 'MED PKG', 'MED PACK']`.\n    - The brand is `'BRAND#34'`, the quantity is between 20 and 30, the size is between 1 and 15, and the container type is one of `['LG CASE', 'LG BOX', 'LG PACK', 'LG PKG']`.\nThis is also known as TPC-H query #19."}]}, {"role": "model", "parts": [{"text": "selected_lines = lines.WHERE(\n    (ISIN(ship_mode, (\"AIR\", \"AIR REG\")))\n    & (ship_instruct == \"DELIVER IN PERSON\")\n    & (part.size >= 1)\n    & (\n        (\n            (part.size <= 5)\n            & (quantity >= 1)\n            & (quantity <= 11)\n            & ISIN(\n                part.container,\n                (\"SM CASE\", \"SM BOX\", \"SM PACK\", \"SM PKG\"),\n            )\n            & (part.brand == \"Brand#12\")\n        )\n        | (\n            (part.size <= 10)\n            & (quantity >= 10)\n            & (quantity <= 20)\n            & ISIN(\n                part.container,\n                (\"MED BAG\", \"MED BOX\", \"MED PACK\", \"MED PKG\"),\n            )\n            & (part.brand == \"Brand#23\")\n        )\n        | (\n            (part.size <= 15)\n            & (quantity >= 20)\n            & (quantity <= 30)\n            & ISIN(\n                part.container,\n                (\"LG CASE\", \"LG BOX\", \"LG PACK\", \"LG PKG\"),\n            )\n            & (part.brand == \"Brand#34\")\n        )\n    )\n)\nresult = TPCH(\n    REVENUE=SUM(selected_lines.extended_price * (1 - selected_lines.discount))\n)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Which products are at least 1% of all income that their producing supplier makes? Income for a supplier is the extended price of all line items that they supply, after accounting for any discounts. List the product name, supplier name, and percentage of the supplier's income that the product name accounts for."}]}, {"role": "model", "parts": [{"text": "line_revenue = extended_price * (1 - discount)\nlines_income = SUM(lines(revenue=line_revenue).revenue)\nresult = suppliers(\n    total_income=lines_income\n).supply_records(\n    supplier_name=BACK(1).name,\n    part_name=part.name,\n    income_percentage=100.0*line_income/BACK(1).lines_income\n).WHERE(income_percentage >= 1.0)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Calculate the value of goods shipped between France and Germany in 1995 and 1996 as a representation for future contract negotiations. Find, for these two nations, the gross discounted revenues derived from lineitems in which parts were shipped from a supplier in either nation to a customer in the other nation during the chosen years. Lists the supplier nation, the customer nation, the year, and the revenue from shipments that took place in that year. Order the answer by Supplier nation, Customer nation, and year (all ascending). This is also known as TPC-H query #7."}]}, {"role": "model", "parts": [{"text": "line_info = lines(\n    supp_nation=supplier.nation.name,\n    cust_nation=order.customer.nation.name,\n    l_year=YEAR(ship_date),\n    volume=extended_price * (1 - discount),\n).WHERE(\n    (ship_date >= datetime.date(1995, 1, 1))\n    & (ship_date <= datetime.date(1996, 12, 31))\n    & (\n        ((supp_nation == \"FRANCE\") & (cust_nation == \"GERMANY\"))\n        | ((supp_nation == \"GERMANY\") & (cust_nation == \"FRANCE\"))\n    )\n)\nresult = PARTITION(line_info, name=\"l\", by=(supp_nation, cust_nation, l_year))(\n    SUPP_NATION=supp_nation,\n    CUST_NATION=cust_nation,\n    L_YEAR=l_year,\n    REVENUE=SUM(l.volume),\n).ORDER_BY(\n    SUPP_NATION.ASC(),\n    CUST_NATION.ASC(),\n    L_YEAR.ASC(),\n)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "For each Saudi Arabian supplier, count how many times their product was part of a multi-supplier order (with current status of 'F') where they were the only supplier who failed to meet the committed delivery date. This is also known as TPC-H query #21."}]}, {"role": "model", "parts": [{"text": "date_check = receipt_date > commit_date\ndifferent_supplier = supplier_key != BACK(2).supplier_key\nwaiting_entries = lines.WHERE(date_check).order.WHERE(\n    (order_status == \"F\")\n    & HAS(lines.WHERE(different_supplier))\n    & HASNOT(lines.WHERE(different_supplier & date_check))\n)\nresult = suppliers.WHERE(nation.name == \"SAUDI ARABIA\")(\n    S_NAME=name,\n    NUMWAIT=COUNT(waiting_entries),\n).ORDER_BY(NUMWAIT.DESC(), S_NAME.ASC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Who are the top 5 customers by total transaction amount? Return their name and total amount."}]}, {"role": "model", "parts": [{"text": "result = Customers(name, total_amount=SUM(transactions_made.amount)).TOP_K(\n    5, by=total_amount.DESC()\n)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "How has the market share of Brazil within the American region has changed from 1995 to 1996 for parts of type 'ECONOMY ANODIZED STEEL'. The market share for a given nation within a given region is defined as the fraction of the revenue, defined as the sum of the extended price times one minus the discount, from the products of a specified type in that region that was supplied by suppliers from the given nation. This is also known as TPC-H query #8."}]}, {"role": "model", "parts": [{"text": "selected_orders = orders.WHERE(\n  (order_date >= datetime.date(1995, 1, 1))\n  & (order_date <= datetime.date(1996, 12, 31))\n  & (customer.nation.region.name == \"AMERICA\")\n)\n\nvolume = extended_price * (1 - discount)\n\nvolume_data = selected_orders.lines.WHERE(\n    part.part_type == \"ECONOMY ANODIZED STEEL\"\n)(\n    o_year=YEAR(BACK(1).order_date),\n    volume=volume,\n    brazil_volume=IFF(supplier.nation.name == \"BRAZIL\", volume, 0)\n)\n\nresult = PARTITION(volume_data, name=\"v\", by=o_year)(\n    O_YEAR=o_year,\n    MKT_SHARE=SUM(v.brazil_volume) / SUM(v.volume),\n)"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "Determine the top suppliers in the first quarter of 1996 with the highest revenue from parts shipped in that time period. In case of a tie, the query lists all suppliers whose contribution was equal to the maximum, presented in supplier number order. This is also known as TPC-H query #15."}]}, {"role": "model", "parts": [{"text": "selected_lines = lines.WHERE(\n    (ship_date >= datetime.date(1996, 1, 1))\n    & (ship_date < datetime.date(1996, 4, 1))\n)\ntotal = SUM(selected_lines.extended_price * (1 - selected_lines.discount))\nresult = TPCH(\n    max_revenue=MAX(suppliers(total_revenue=total).total_revenue)\n).suppliers(\n    S_SUPPKEY=key,\n    S_NAME=name,\n    S_ADDRESS=address,\n    S_PHONE=phone,\n    TOTAL_REVENUE=total,\n).WHERE(TOTAL_REVENUE == BACK(1).max_revenue).ORDER_BY(S_SUPPKEY.ASC())"}]}]}
{"systemInstruction": {"role": "system", "parts": [{"text": "You are a Pydough generator that creates Python code based on natural language descriptions."}]}, "contents": [{"role": "user", "parts": [{"text": "What is the total revenue generated by each customer in 1994?"}]}, {"role": "model", "parts": [{"text": "revenue_from_lines = extended_price * (1 - discount)\nstart_date = datetime.date(1994, 1, 1)\nend_date = datetime.date(1994, 12, 31)\nselected_lines = lines.WHERE(\n    (order.order_date >= start_date) & (order.order_date < end_date)\n)(revenue = revenue_from_lines)\ncustomer_revenue = customers(name, total_revenue=sum(selected_lines.revenue))"}]}]}
