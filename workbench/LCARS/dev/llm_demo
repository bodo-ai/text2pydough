{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pydough LLM Demo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook showcases how an LLM can generate PyDough queries from natural language instructions. The goal is to demonstrate how AI can automate complex data analysis, making querying faster, more intuitive, and accessible without needing deep technical expertise.\n",
    "\n",
    "Each example highlights different capabilities, including aggregations, filtering, ranking, and calculations across multiple collections.\n",
    "\n",
    "---\n",
    "## Setup & Basic Usage of the API\n",
    "\n",
    "First, we import the created client."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "from llm_v2 import LLMClient"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can declare global definitions that will be useful for any question that needs them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we initialize the client."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "client = LLMClient()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example: Find the region with the highest total order value in 1996."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ask Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "highest_revenue_region_1996 = regions.CALCULATE(\n",
      "    region_name=name,\n",
      "    total_revenue_1996=SUM(nations.customers.orders.WHERE(YEAR(order_date) == 1996).total_price)\n",
      ").TOP_K(1, by=total_revenue_1996.DESC())\n"
     ]
    }
   ],
   "source": [
    "query = \"Find the region with the highest revenue in 1996.\"\n",
    "\n",
    "result = client.ask(query)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Result\n",
    "We can also get an **explanation** of how the model solved the query."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "To find the region with the highest revenue in 1996, we will follow these steps:\n",
      "\n",
      "1.  Start with the `regions` collection.\n",
      "2.  For each region, calculate its total revenue from orders placed in 1996. Revenue is calculated as the sum of `total_price` from the `orders` collection.\n",
      "    *   This involves accessing `regions.nations.customers.orders`.\n",
      "    *   Filtering these orders using `WHERE(YEAR(order_date) == 1996)`.\n",
      "    *   Summing the `total_price` of these filtered orders.\n",
      "3.  Use the `CALCULATE` method to create new fields for the region's name and its calculated revenue in 1996.\n",
      "4.  Use the `TOP_K(1, by=revenue.DESC())` method to select the single region with the highest calculated revenue.\n",
      "\n",
      "Here's the PyDough code:\n",
      "\n",
      "```python\n",
      "highest_revenue_region_1996 = regions.CALCULATE(\n",
      "    region_name=name,\n",
      "    total_revenue_1996=SUM(nations.customers.orders.WHERE(YEAR(order_date) == 1996).total_price)\n",
      ").TOP_K(1, by=total_revenue_1996.DESC())\n",
      "```\n",
      "\n",
      "**Explanation:**\n",
      "\n",
      "1.  `regions.CALCULATE(...)`: We start by operating on the `regions` collection. The `CALCULATE` method is used to compute new values for each region.\n",
      "    *   `region_name=name`: This selects the `name` of the region and assigns it to a new field called `region_name`.\n",
      "    *   `total_revenue_1996=SUM(nations.customers.orders.WHERE(YEAR(order_date) == 1996).total_price)`: This calculates the total revenue for each region in the year 1996.\n",
      "        *   `nations.customers.orders`: We navigate from each region to its associated nations, then to the customers within those nations, and finally to the orders placed by those customers.\n",
      "        *   `.WHERE(YEAR(order_date) == 1996)`: This filters the orders to include only those where the `order_date` is in the year 1996.\n",
      "        *   `.total_price`: We access the `total_price` for each of these filtered orders.\n",
      "        *   `SUM(...)`: This aggregation function sums up all the `total_price` values for the filtered orders within each region, giving the total revenue for that region in 1996. This sum is assigned to the field `total_revenue_1996`.\n",
      "\n",
      "2.  `.TOP_K(1, by=total_revenue_1996.DESC())`: After calculating the name and 1996 revenue for all regions, this method selects the top 1 region.\n",
      "    *   `1`: Specifies that we want only one record (the top one).\n",
      "    *   `by=total_revenue_1996.DESC()`: Orders the regions by the `total_revenue_1996` in descending order, so the region with the highest revenue comes first.\n",
      "\n",
      "The final result, `highest_revenue_region_1996`, will be a collection containing a single record: the region with the highest total revenue in 1996, along with its name and that revenue amount.\n"
     ]
    }
   ],
   "source": [
    "print(result.full_explanation)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And if we want to compare, we can get the **equivalent SQL query** created by Pydough."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SELECT\n",
      "  region_name,\n",
      "  total_revenue_1996\n",
      "FROM (\n",
      "  SELECT\n",
      "    ordering_1,\n",
      "    region_name,\n",
      "    total_revenue_1996\n",
      "  FROM (\n",
      "    SELECT\n",
      "      COALESCE(agg_0, 0) AS ordering_1,\n",
      "      COALESCE(agg_0, 0) AS total_revenue_1996,\n",
      "      name AS region_name\n",
      "    FROM (\n",
      "      SELECT\n",
      "        agg_0,\n",
      "        name\n",
      "      FROM (\n",
      "        SELECT\n",
      "          r_regionkey AS key,\n",
      "          r_name AS name\n",
      "        FROM main.REGION\n",
      "      )\n",
      "      LEFT JOIN (\n",
      "        SELECT\n",
      "          SUM(total_price) AS agg_0,\n",
      "          region_key\n",
      "        FROM (\n",
      "          SELECT\n",
      "            region_key,\n",
      "            total_price\n",
      "          FROM (\n",
      "            SELECT\n",
      "              _table_alias_1.key AS key_2,\n",
      "              region_key\n",
      "            FROM (\n",
      "              SELECT\n",
      "                n_nationkey AS key,\n",
      "                n_regionkey AS region_key\n",
      "              FROM main.NATION\n",
      "            ) AS _table_alias_0\n",
      "            INNER JOIN (\n",
      "              SELECT\n",
      "                c_custkey AS key,\n",
      "                c_nationkey AS nation_key\n",
      "              FROM main.CUSTOMER\n",
      "            ) AS _table_alias_1\n",
      "              ON _table_alias_0.key = nation_key\n",
      "          )\n",
      "          INNER JOIN (\n",
      "            SELECT\n",
      "              customer_key,\n",
      "              total_price\n",
      "            FROM (\n",
      "              SELECT\n",
      "                o_custkey AS customer_key,\n",
      "                o_orderdate AS order_date,\n",
      "                o_totalprice AS total_price\n",
      "              FROM main.ORDERS\n",
      "            )\n",
      "            WHERE\n",
      "              CAST(STRFTIME('%Y', order_date) AS INTEGER) = 1996\n",
      "          )\n",
      "            ON key_2 = customer_key\n",
      "        )\n",
      "        GROUP BY\n",
      "          region_key\n",
      "      )\n",
      "        ON key = region_key\n",
      "    )\n",
      "  )\n",
      "  ORDER BY\n",
      "    ordering_1 DESC\n",
      "  LIMIT 1\n",
      ")\n",
      "ORDER BY\n",
      "  ordering_1 DESC\n"
     ]
    }
   ],
   "source": [
    "print(result.sql)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we want to visually check, analyze or edit the resulting **dataframe**, we also can. There is a dedicated section for this later. on the document"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>region_name</th>\n",
       "      <th>total_revenue_1996</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>EUROPE</td>\n",
       "      <td>7.015421e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  region_name  total_revenue_1996\n",
       "0      EUROPE        7.015421e+09"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also check the original natural language **question** that was asked."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(result.original_question)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We also have a reference guide or **cheat_sheet** with example queries to help structure responses."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(result.cheat_sheet)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can check the **base instruction** that guided the LLM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(result.base_prompt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Definitions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are two ways to add this definitions:\n",
    "\n",
    "1. Bulk Loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "definitions = [\n",
    "    \"Aggregate Revenue is defined as the sum of LineItem_ExtendedPrice minus the sum of LineItem_Discount.\",\n",
    "    \"Average Revenue per Ship Date is defined as the sum of revenue divided by the count of distinct ship dates.\",\n",
    "    \"Profit is defined as revenue minus cost.\"\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "client = LLMClient(definitions=definitions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Adding individually."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The new definition has been added to the definition list.\n"
     ]
    }
   ],
   "source": [
    "client.add_definition(\"Revenue is defined as the sum of extended_price * (1 - discount)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "top_region_revenue_1996 = regions.CALCULATE(\n",
      "    region_name=name,\n",
      "    total_revenue_1996=SUM(\n",
      "        nations.customers.orders.WHERE(YEAR(order_date) == 1996).lines.CALCULATE(\n",
      "            revenue_per_line=extended_price * (1 - discount)\n",
      "        ).revenue_per_line\n",
      "    )\n",
      ").TOP_K(1, by=total_revenue_1996.DESC())\n"
     ]
    }
   ],
   "source": [
    "query = \"Find the region with the highest revenue in 1996.\"\n",
    "\n",
    "result = client.ask(query)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Discourse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Follow up**: Can you compare it now year over year **in that region**?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Calculate total revenue for the \"EUROPE\" region in 1995\n",
      "europe_revenue_1995 = regions.WHERE(name == \"EUROPE\").CALCULATE(\n",
      "    region_name_intermediate=name,\n",
      "    total_revenue_intermediate=SUM(\n",
      "        nations.customers.orders.WHERE(YEAR(order_date) == 1995).lines.CALCULATE(\n",
      "            line_revenue=extended_price * (1 - discount)\n",
      "        ).line_revenue\n",
      "    )\n",
      ")\n",
      "\n",
      "# Calculate total revenue for the \"EUROPE\" region in 1996\n",
      "europe_revenue_1996 = regions.WHERE(name == \"EUROPE\").CALCULATE(\n",
      "    region_name_intermediate=name,\n",
      "    total_revenue_intermediate=SUM(\n",
      "        nations.customers.orders.WHERE(YEAR(order_date) == 1996).lines.CALCULATE(\n",
      "            line_revenue=extended_price * (1 - discount)\n",
      "        ).line_revenue\n",
      "    )\n",
      ")\n",
      "\n",
      "# Calculate total revenue for the \"EUROPE\" region in 1997\n",
      "europe_revenue_1997 = regions.WHERE(name == \"EUROPE\").CALCULATE(\n",
      "    region_name_intermediate=name,\n",
      "    total_revenue_intermediate=SUM(\n",
      "        nations.customers.orders.WHERE(YEAR(order_date) == 1997).lines.CALCULATE(\n",
      "            line_revenue=extended_price * (1 - discount)\n",
      "        ).line_revenue\n",
      "    )\n",
      ")\n",
      "\n",
      "# Calculate total revenue for the \"EUROPE\" region in 1998\n",
      "europe_revenue_1998 = regions.WHERE(name == \"EUROPE\").CALCULATE(\n",
      "    region_name_intermediate=name,\n",
      "    total_revenue_intermediate=SUM(\n",
      "        nations.customers.orders.WHERE(YEAR(order_date) == 1998).lines.CALCULATE(\n",
      "            line_revenue=extended_price * (1 - discount)\n",
      "        ).line_revenue\n",
      "    )\n",
      ")\n",
      "\n",
      "# Combine the yearly revenues for the \"EUROPE\" region for YEAR-over-YEAR comparison\n",
      "europe_yoy_revenue = TPCH.CALCULATE(\n",
      "    region_name=europe_revenue_1995.SINGULAR().region_name_intermediate,\n",
      "    revenue_1995=europe_revenue_1995.SINGULAR().total_revenue_intermediate,\n",
      "    revenue_1996=europe_revenue_1996.SINGULAR().total_revenue_intermediate,\n",
      "    revenue_1997=europe_revenue_1997.SINGULAR().total_revenue_intermediate,\n",
      "    revenue_1998=europe_revenue_1998.SINGULAR().total_revenue_intermediate\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "result2 = client.discourse(result, \"Can you compare it now year over year in that region?\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>region_name</th>\n",
       "      <th>revenue_1995</th>\n",
       "      <th>revenue_1996</th>\n",
       "      <th>revenue_1997</th>\n",
       "      <th>revenue_1998</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>EUROPE</td>\n",
       "      <td>6.701964e+09</td>\n",
       "      <td>6.746079e+09</td>\n",
       "      <td>6.612330e+09</td>\n",
       "      <td>3.955201e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  region_name  revenue_1995  revenue_1996  revenue_1997  revenue_1998\n",
       "0      EUROPE  6.701964e+09  6.746079e+09  6.612330e+09  3.955201e+09"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result2.df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
