FileName,db_name,db_type,query_category,query,question,instructions,full_instructions,PyDough,Implemented
instruct_advanced_sqlite.csv,ewallet,sqlite,keywords_ratio,"SELECT m.name, (COUNT(DISTINCT wtd.coupon_id) * 1.0 / NULLIF(COUNT(DISTINCT wtd.txid), 0)) AS CPUR FROM wallet_transactions_daily AS wtd JOIN merchants AS m ON wtd.receiver_id = m.mid WHERE wtd.status = 'success' GROUP BY m.name;","Calculate the CPUR for each merchant, considering only successful transactions. Return the merchant name and CPUR.",CPUR (coupon usage rate) = number of distinct coupons used / number of distinct transactions,"To get the total number of transactions per user, join the users and wallet_transactions tables, then aggregate by user_id To analyze user engagement, join the users and user_sessions tables, then aggregate to calculate the total session duration per user for a given period. CPUR (coupon usage rate) = number of distinct coupons used / number of distinct transactions To get user notification preferences, join the users and user_settings tables, then select the latest settings for each user","# Filter the transactions to get only successful ones
successful_transactions= transactions_received.WHERE(status==""success"")

# Calculate the CPUR for the merchant
merchant_cpur_summary= Merchants(
    name= name,
    CPUR= NDISTINCT(successful_transactions.coupon_id) * 1.0 / NDISTINCT(successful_transactions.txid)
)",y
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_date_join,"SELECT date(n.created_at,  '-' || ((strftime('%w', n.created_at) + 6) % 7) || ' days') AS WEEK, COUNT(*) AS total_notifications, COUNT(CASE WHEN strftime('%w', n.created_at) IN ('0', '6') THEN 1 END) AS weekend_notifications FROM notifications AS n JOIN users AS u ON n.user_id = u.uid WHERE u.country IN ('US', 'CA') AND n.created_at >= date('now',  '-' || ((strftime('%w', 'now') + 6) % 7) || ' days', '-21 days') AND n.created_at < date('now',  '-' || ((strftime('%w', 'now') + 6) % 7) || ' days') GROUP BY WEEK;","For users in the US and Canada, how many total notifications were sent in each of the last 3 weeks excluding the current week? How many of those were sent on weekends?",Weekends are Saturdays and Sundays. Truncate created_at to week for aggregation.,"To gauge user engagement, link users to their sessions without defining a specific date range for total session duration analysis
To analyze coupon usage, join the coupons and transactions tables to aggregate total discount amounts without specifying a merchant
Merchant categories should be matched using a case-insensitive pattern without necessitating wildcards.
Weekends are Saturdays and Sundays. Truncate created_at to week for aggregation.",# Pydough doesn't support date manipulation,n
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_string_matching,"SELECT m.name, COUNT(c.cid) AS total_coupons FROM merchants AS m JOIN coupons AS c ON m.mid = c.merchant_id WHERE m.status = 'active' AND LOWER(m.category) LIKE '%retail%' GROUP BY m.name;",How many active retail merchants have issued coupons? Return the merchant name and the total number of coupons issued.,"Merchant category should be matched case-insensitively with wildcards, e.g., LOWER(merchants.category) LIKE '%...%'.","To determine user notification settings, combine the users and user_settings tables in a CTE, selecting the most recent settings for each user.
Merchant category should be matched case-insensitively with wildcards, e.g., LOWER(merchants.category) LIKE '%...%'.
To get the total number of transactions per user, join the users and wallet_transactions tables in a common table expression (CTE), then sum up transactions by user ID
To assess coupon utilization, link the coupons and wallet_transactions tables in a CTE, filter for particular merchants, then calculate the total discount amounts","# Retrieve merchant summary for active merchants in the ""retail"" category who have coupons
active_retail_merchants_with_coupons = Merchants.WHERE(
    (status == ""active"") & 
    (CONTAINS(LOWER(category), '%retail%')) &  
    HAS(coupons) 
)(
    merchant_name=name, 
    total_coupons=COUNT(coupons)  
)",y
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_date_join,"SELECT COUNT(*) AS num_transactions, SUM(amount) AS total_amount FROM wallet_transactions_daily AS t JOIN users AS u ON t.sender_id = u.uid WHERE u.country = 'US' AND t.created_at >= DATE('now', '-7 days') AND t.created_at < DATE('now', '+1 day');",How many wallet transactions were made by users from the US in the last 7 days inclusive of today? Return the number of transactions and total transaction amount.,"Last 7 days = DATE('now', -'7 days') to DATE('now'). Always join wallet_transactions_daily with users before using the wallet_transactions_daily table.","To analyze coupon usage, join the coupons and wallet_transactions tables in a CTE, filter for a specific merchant, then aggregate to get the total discount amount
Last 7 days = DATE('now', -'7 days') to DATE('now'). Always join wallet_transactions_daily with users before using the wallet_transactions_daily table.
To get user notification preferences, join the users and user_setting_snapshot tables in a CTE, then select the latest snapshot for each user.
To get the total number of transactions per user, join the users and wallet_transactions tables in a CTE, then aggregate by user_uid and count the number of transactions","# Define the start date for filtering transactions
start_date = DATE('now', '-7 days') #Pydough doesn't support date manipulation
# Filter transactions based on the creation date and sending user's country
us_transactions = Transactions.WHERE(
    (created_at >= start_date) & 
    (sending_user.country == 'US') 
)
# Calculate the number of transactions and the total amount for the filtered transactions
transaction_summary = Ewallet(
    num_transactions=COUNT(us_transactions), 
    total_amount=SUM(us_transactions.amount)  
)",n
instruct_advanced_sqlite.csv,ewallet,sqlite,keywords_aggregate,"SELECT AVG(balance) AS AMB FROM wallet_user_balance_daily WHERE updated_at >= DATE('now', '-7 days');","What is the average AMB for user wallets updated in the past week, inclusive of 7 days ago? Return the average balance.",AMB = average balance per user (for the given time duration),"For coupon usage analysis, join the coupons and wallet_transactions_daily tables in a CTE, filtering for merchants of interest, and aggregate to compute the total discount amount utilized
To get the total number of transactions per user, join the users and wallet_transactions_daily tables in a Common Table Expression (CTE), then aggregate by user_id to count the transactions
To determine user notification preferences, join the users table with the user_setting_snapshot table in a CTE, selecting the most recent settings snapshot for each user.
AMB = average balance per user (for the given time duration)","selected_user_balances= UserBalances.WHERE(updated_at >= DATE('now', '-7 days')) #Pydough doesn't support date manipulation

amb= Ewallet(AMB= AVG(selected_user_balances.balance))",n
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_cte_window,"WITH user_balances AS (SELECT user_id, balance, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY CASE WHEN updated_at IS NULL THEN 1 ELSE 0 END DESC, updated_at DESC) AS rn FROM wallet_user_balance_daily) SELECT user_id, balance FROM user_balances WHERE rn = 1;",What is the LUB for each user.,"LUB = Latest User Balance, which is the most recent balance for each user","To get the total number of transactions per user, join the users and wallet_transactions_daily tables in a common table expression (CTE), then group by user_id to count transactions
LUB = Latest User Balance, which is the most recent balance for each user
To determine user notification preferences, use a join between the users and user_setting_snapshot tables in a CTE, focusing on selecting the most recent snapshot for each user.
For analyzing coupon usage, start with a join between the coupons and wallet_transactions_daily tables in a CTE, apply filtering as needed, and then perform aggregation for the total discount amount","latest_balance = BEST(balances, by=updated_at.DESC())

lub= Users(uid, latest_balance.balance)",n
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_cte_join,"WITH user_latest_setting AS (SELECT u.uid, s.marketing_opt_in, s.created_at, ROW_NUMBER() OVER (PARTITION BY u.uid ORDER BY CASE WHEN s.created_at IS NULL THEN 1 ELSE 0 END DESC, s.created_at DESC) AS rn FROM users AS u JOIN user_setting_snapshot AS s ON u.uid = s.user_id) SELECT UID, marketing_opt_in FROM user_latest_setting WHERE rn = 1;",What is the marketing opt-in preference for each user? Return the user ID and boolean opt-in value,"To get any user's settings, only select the latest snapshot of user_setting_snapshot for each user","CPUR (coupon usage rate) = Ratio of distinct coupons used to number of distinct transactions.
AMB = Average balance of user wallets over a recent period
STR (success transaction rate) = Ratio of successful transactions to total transactions
To get any user's settings, only select the latest snapshot of user_setting_snapshot for each user",,
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_cte_window,"WITH merchant_revenue AS (SELECT m.mid, m.category AS merchant_category, SUM(w.amount) AS total_revenue FROM merchants AS m INNER JOIN wallet_transactions_daily AS w ON m.mid = w.receiver_id AND w.receiver_type = 1 WHERE w.status = 'success' GROUP BY m.mid, m.category) SELECT *, RANK() OVER (ORDER BY CASE WHEN total_revenue IS NULL THEN 1 ELSE 0 END DESC, total_revenue DESC) AS mrr FROM merchant_revenue;WITH merchant_revenue AS (SELECT m.name, m.category AS merchant_category, SUM(w.amount) AS total_revenue FROM merchants AS m INNER JOIN wallet_transactions_daily AS w ON m.mid = w.receiver_id AND w.receiver_type = 1 WHERE w.status = 'success' GROUP BY m.name, m.category) SELECT *, RANK() OVER (ORDER BY CASE WHEN total_revenue IS NULL THEN 1 ELSE 0 END DESC, total_revenue DESC) AS mrr FROM merchant_revenue;WITH merchant_revenue AS (SELECT m.mid, m.name, m.category AS merchant_category, SUM(w.amount) AS total_revenue FROM merchants AS m INNER JOIN wallet_transactions_daily AS w ON m.mid = w.receiver_id AND w.receiver_type = 1 WHERE w.status = 'success' GROUP BY m.mid, m.name, m.category) SELECT *, RANK() OVER (ORDER BY CASE WHEN total_revenue IS NULL THEN 1 ELSE 0 END DESC, total_revenue DESC) AS mrr FROM merchant_revenue;","What is the MRR for each merchant? Return the merchant name, category, revenue amount, and revenue rank.","MRR = Merchant Revenue Rank, which ranks merchants based on amounts from successfully received transactions only. Filter receiver_type=1 in wallet_transactions_daily for merchants. Merchant with rank 1 has the highest revenue.","To get user notification preferences, join the users and user_setting_snapshot tables in a CTE, then select the latest snapshot for each user
Merchant category should be matched case-insensitively with wildcards, e.g., using LOWER(merchants.category) LIKE '%...%'.
MRR = Merchant Revenue Rank, which ranks merchants based on their total successful received transaction amounts. Filter receiver_type=1 in wallet_transactions_daily for merchants. Merchant with rank 1 has the highest revenue.
To analyze user engagement, join the users and user_sessions tables in a CTE, then aggregate to calculate total session duration per user","successful_transactions= transactions_received.WHERE((receiver_type == 1) & (status==""success""))

mrr_summary= Merchants.WHERE(HAS(successful_transactions))(
   total_revenue= SUM(successful_transactions.amount)
)(
   mid,
   category,
   name,
   total_revenue,
   mrr = RANKING(by=total_revenue.DESC(), levels=1)
)",y
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_date_join,"SELECT strftime('%Y-%m', t.created_at) AS month, COUNT(DISTINCT t.sender_id) AS active_users FROM wallet_transactions_daily AS t WHERE t.sender_type = 0 AND t.created_at >= date('now', 'start of month', '-2 months') AND t.created_at < date('now', 'start of month') GROUP BY month;",What is the PMDAU (Per Month Daily Active Users) for wallet transactions in the last 2 months excluding the current month?,PMDAU (Per Month Daily Active Users) = COUNT(DISTINCT(sender_id) ... WHERE t.sender_type = 0. Truncate created_at to month for aggregation.,"PMDAU (Per Month Daily Active Users) = COUNT(DISTINCT(sender_id) ... WHERE t.sender_type = 0. Truncate created_at to month for aggregation. To analyze coupon usage, join the coupons and wallet_transactions_daily tables in a CTE, filter for transactions associated with a specific merchant, then aggregate to calculate the total discount amount received To get the total number of transactions per user, join the users and wallet_transactions_daily tables in a common table expression (CTE), then aggregate by user_id and count the transactions To get user notification preferences, join the users and user_setting_snapshot tables in a CTE, then select the most recent snapshot for each user.","# Define the start date (2 months before the start of the current month)
start_date = DATE('now', 'start of month', '-2 months') # Pydough doesn't support date manipulation

# Define the end date (start of the current month)
end_date = DATE('now', 'start of month') # Pydough doesn't support date manipulation

# Filter successful transactions based on sender type and creation date range
successful_transactions = Transactions.WHERE(
    (sender_type == 0) &  
    (created_at >= start_date) &  
    (created_at < end_date) 
)(year_month= JOIN_STRINGS(""-"",YEAR(created_at),MONTH(created_at))) 

# Group transactions by month and calculate the number of distinct active users
pmdau_summary = PARTITION(successful_transactions, name=""transc"", by=year_month)(
    month=year_month,  
    active_users=NDISTINCT(transc.sender_id) 
)",n
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_cte_join,"WITH user_transactions AS (SELECT u.uid, t.txid FROM users AS u JOIN wallet_transactions_daily AS t ON u.uid = t.sender_id WHERE t.sender_type = 0) SELECT UID, COUNT(txid) AS total_transactions FROM user_transactions GROUP BY UID;",What is the total number of wallet transactions sent by each user that is not a merchant? Return the user ID and total transaction count.,"To get the total number of transactions per user, join the users and wallet_transactions_daily tables in a CTE, then aggregate by user_id and count the number of transactions","PMDAU = Aggregate daily active users by truncating the date to the month for aggregation.
AMB = Average balance of user wallets
LUB = Most recent balance for each user
To get the total number of transactions per user, join the users and wallet_transactions_daily tables in a CTE, then aggregate by user_id and count the number of transactions","successful_transactions = transactions_sent.WHERE(sender_type == 0)
# Group users who have successful transactions and calculate the number of distinct transactions per user
transactions_by_users = Users.WHERE(HAS(successful_transactions))(
    uid,
    total_transactions= COUNT(successful_transactions)
)",y
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_cte_join,"WITH user_session_duration AS (SELECT u.uid, s.session_start_ts, s.session_end_ts FROM users AS u JOIN user_sessions AS s ON u.uid = s.user_id WHERE s.session_start_ts >= '2023-06-01' AND s.session_end_ts < '2023-06-08') SELECT uid, SUM(strftime('%s', session_end_ts) - strftime('%s', session_start_ts)) AS total_duration FROM user_session_duration GROUP BY uid ORDER BY total_duration DESC;",What is the total session duration in seconds for each user between 2023-06-01 inclusive and 2023-06-08 exclusive? Return the user ID and their total duration as an integer sorted by total duration with the longest duration first,"To analyze user engagement, join the users and user_sessions tables in a CTE, then aggregate to calculate total session duration per user for a given date range. Remember to convert your answer into seconds, using EPOCH function","LUB = Most recent account balance for each user. CPUR (coupon usage rate) = Ratio of distinct coupons used to the number of distinct transactions AMB = Average balance of user wallets over a specified period To analyze user engagement, join the users and user_sessions tables in a CTE, then aggregate to calculate total session duration per user for a given date range","selected_sessions = sessions.WHERE(
    (session_start_ts >= ""2023-06-01"") &  
    (session_end_ts < ""2023-06-08"")  
)(duration=(SECOND(session_start_ts) - SECOND(session_end_ts))) #Pydough cannot convert dates to seconds directly, DATEDIFF

# Calculate the total session duration for each user and order by the total duration in descending order
total_session_duration = Users(
    uid,  
    total_duration=SUM(selected_sessions.duration) 
).ORDER_BY(total_duration.DESC())  ",n
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_cte_join,"WITH merchant_coupon_usage AS (SELECT c.cid, t.amount FROM coupons AS c JOIN wallet_transactions_daily AS t ON c.cid = t.coupon_id WHERE c.merchant_id = 1) SELECT cid, SUM(amount) AS total_discount FROM merchant_coupon_usage GROUP BY cid;",What is the total transaction amount for each coupon offered by merchant with ID 1? Return the coupon ID and total amount transacted with it.,"To get coupon usage, join the coupons and wallet_transactions_daily on coupon_id","AMB = Average balance of user wallets updated recently
To get coupon usage, join the coupons and wallet_transactions_daily on coupon_id 
STR (success transaction rate) = Number of successful transactions divided by total transactions
PMDAU = Aggregation based on truncating creation dates to months for active user metrics.",,
instruct_advanced_sqlite.csv,ewallet,sqlite,keywords_aggregate,"SELECT COUNT(*) AS TUC FROM user_sessions WHERE session_start_ts >= DATE('now', '-1 month') OR session_end_ts >= DATE('now', '-1 month');","What is the TUC in the past month, inclusive of 1 month ago? Return the total count.",TUC = Total number of user sessions in the past month,"To analyze coupon usage, join the coupons and transactions tables in a CTE, filtering for any required criteria, then aggregate to find the total discount amount TUC = Total number of user sessions in the past month To get user notification preferences, join the users and settings tables in a CTE, selecting the most recent settings snapshot for each user. To get the total number of transactions per user, join the users and transactions tables in a common table expression (CTE), then aggregate by user_id to count transactions",,
instruct_advanced_sqlite.csv,ewallet,sqlite,keywords_ratio,"SELECT (SUM(CASE WHEN status = 'success' THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) AS STR FROM wallet_transactions_daily WHERE strftime('%Y-%m', created_at) = strftime('%Y-%m', 'now', 'start of month', '-1 month');",What was the STR for wallet transactions in the previous month?,STR (success transaction rate) = number of successful transactions / total number of transactions,"To analyze user engagement, join the users and sessions tables in a CTE, then aggregate to measure total session length per user for a specified period.
To get user notification preferences, join the users and settings tables in a CTE, then filter for the most recent settings per user
STR (success transaction rate) = number of successful transactions / total number of transactions
To analyze coupon usage, join the coupons and transactions tables in a CTE, filter for a particular merchant, then aggregate to calculate the total discount value",,
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_date_join,"WITH coupons_per_merchant AS (SELECT m.mid, COUNT(c.cid) AS num_coupons FROM coupons AS c JOIN merchants AS m ON m.mid = c.merchant_id AND strftime('%Y-%m', c.created_at) = strftime('%Y-%m', m.created_at) GROUP BY m.mid) SELECT coupons_per_merchant.mid, m.name, coupons_per_merchant.num_coupons FROM coupons_per_merchant JOIN merchants AS m USING (mid) ORDER BY coupons_per_merchant.num_coupons DESC LIMIT 1;",Which merchant created the highest number of coupons within the same month that the merchant was created (coupon or merchant can be created earlier than the other)? Return the number of coupons along with the merchant's id and name.,"If events from 2 different tables from the same interval are to be joined, join on the respective truncated date fields eg `FROM t1 JOIN t2 ON DATE(t1.date, '<interval>') = DATE(t2.date, '<interval>').","To analyze coupon usage, join the coupons and wallet_transactions_daily tables in a CTE, filtering for specific merchants, then aggregate If events from 2 different tables from the same interval are to be joined, join on the respective truncated date fields eg `FROM t1 JOIN t2 ON DATE(t1.date, '<interval>') = DATE(t2.date, '<interval>'). To get the total number of transactions per user, join the users and wallet_transactions_daily tables in a CTE, then aggregate by user_id To get user notification preferences, join the users and user_setting_snapshot tables in a CTE, selecting the most recent snapshot for each user.",,
instruct_advanced_sqlite.csv,ewallet,sqlite,instructions_string_matching,"SELECT u.username, COUNT(n.id) AS total_notifications FROM users AS u JOIN notifications AS n ON u.uid = n.user_id WHERE n.type = 'promotion' AND n.status = 'unread' AND LOWER(u.country) = 'us' GROUP BY u.username;",Which users from the US have unread promotional notifications? Return the username and the total number of unread promotional notifications.,"User country should be matched case-insensitively, e.g., LOWER(users.country) = 'us'. Notification type and status should be matched exactly.","For merchant revenue analysis, rank merchants by their total successful transaction amounts without specifying any rank number To derive user engagement metrics, aggregate total session durations for users by joining with the user_sessions table over an unspecified date range. To calculate the Average Balance of user wallets, join the users and wallet_transactions_daily tables, then compute the average balance for a specified period User country should be matched case-insensitively, e.g., LOWER(users.country) = 'us'. Notification type and status should be matched exactly.",,
instruct_basic_sqlite.csv,ewallet,sqlite,basic_join_date_group_order_limit,"SELECT strftime('%Y-%m', t.created_at) AS month, COUNT(DISTINCT t.sender_id) AS active_users FROM wallet_transactions_daily AS t JOIN users AS u ON t.sender_id = u.uid WHERE t.sender_type = 0 AND t.status = 'success' AND u.status = 'active' AND t.created_at >= '2023-01-01' AND t.created_at < '2024-01-01' GROUP BY month ORDER BY month;","How many distinct active users sent money per month in 2023? Return the number of active users per month (as a date), starting from the earliest date. Do not include merchants in the query. Only include successful transactions.",,,"active_users = Users.WHERE(status=='active')
selected_transactions= active_users.transactions_sent.WHERE(
    (status=='success') & (created_at >= datetime.date(2023,1,1)) & (created_at < datetime.date(2024,1,1)) & (sender_type==0))(year_month= JOIN_STRINGS(""-"",YEAR(created_at),MONTH(created_at)))

output= PARTITION(selected_transactions, name=""t"", by=year_month)(
    month= year_month,
    active_users= NDISTINCT(t.sender_id)
)",y
instruct_basic_sqlite.csv,ewallet,sqlite,basic_left_join,"SELECT m.mid AS merchant_id, m.name AS merchant_name FROM merchants AS m LEFT JOIN coupons AS c ON m.mid = c.merchant_id WHERE c.cid IS NULL;",Return merchants (merchant ID and name) who have not issued any coupons.,,,"mercants_without_coupons = Merchants.WHERE(HASNOT(coupons))(merchan_id= mid, merchant_name= name)
",y
instruct_basic_sqlite.csv,ewallet,sqlite,basic_join_distinct,SELECT DISTINCT m.mid AS merchant_id FROM merchants AS m JOIN wallet_transactions_daily AS t ON m.mid = t.receiver_id WHERE t.receiver_type = 1;,"Return the distinct list of merchant IDs that have received money from a transaction. Consider all transaction types in the results you return, but only include the merchant ids in your final answer.",,,"mercants_wihout_coupons = Merchants.WHERE(HAS(transactions_received.WHERE(receiver_type==1)))(merchan_id= mid)
",y
instruct_basic_sqlite.csv,ewallet,sqlite,basic_join_distinct,SELECT DISTINCT user_id FROM notifications WHERE type = 'transaction';,Return the distinct list of user IDs who have received transaction notifications.,,,"users_with_notifications = Users.WHERE(HAS(notifications.WHERE(notification_type=='transaction')))(user_id= uid)
",y
instruct_basic_sqlite.csv,ewallet,sqlite,basic_left_join,"SELECT u.uid, u.username FROM users AS u LEFT JOIN notifications AS n ON u.uid = n.user_id WHERE n.id IS NULL;",Return users (user ID and username) who have not received any notifications,,,"users_without_notifications = Users.WHERE(HASNOT(notifications))(uid,username)
",y
instruct_basic_sqlite.csv,ewallet,sqlite,basic_group_order_limit,"SELECT device_type, COUNT(*) AS COUNT FROM user_sessions GROUP BY device_type ORDER BY CASE WHEN COUNT IS NULL THEN 1 ELSE 0 END DESC, COUNT DESC LIMIT 2;",What are the top 2 most frequently used device types for user sessions and their respective counts?,,,"selected_sessions= PARTITION(UserSessions, name=""usession"", by=device_type)(
    device_type=device_type,
    count= COUNT(usession)
)

sorted_sessions= selected_sessions.TOP_K(2,count.DESC())
",y
instruct_basic_sqlite.csv,ewallet,sqlite,basic_group_order_limit,"SELECT status, COUNT(*) AS COUNT FROM wallet_transactions_daily GROUP BY status ORDER BY CASE WHEN COUNT IS NULL THEN 1 ELSE 0 END DESC, COUNT DESC LIMIT 3;",What are the top 3 most common transaction statuses and their respective counts?,,,"transactions_by_status= PARTITION(Transactions, name=""tr"", by=status)(
    status=status,
    count= COUNT(tr)
)

sorted_transactions= transactions_by_status.TOP_K(3,count.DESC())",y
instruct_basic_sqlite.csv,ewallet,sqlite,basic_join_group_order_limit,"SELECT c.code AS coupon_code, COUNT(t.txid) AS redemption_count, SUM(t.amount) AS total_discount FROM coupons AS c JOIN wallet_transactions_daily AS t ON c.cid = t.coupon_id GROUP BY c.code ORDER BY CASE WHEN redemption_count IS NULL THEN 1 ELSE 0 END DESC, redemption_count DESC LIMIT 3;","What are the top 3 most frequently used coupon codes? Return the coupon code, total number of redemptions, and total amount redeemed.",,,"coupons_by_code= Coupons(coupon_code= code, redemption_count=COUNT(transaction_used_in.txid), total_discount=SUM(transaction_used_in.amount))

sorted_coupons= coupons_by_code.TOP_K(3,redemption_count.DESC())
",y
instruct_basic_sqlite.csv,ewallet,sqlite,basic_join_group_order_limit,"SELECT u.country, COUNT(DISTINCT t.sender_id) AS user_count, SUM(t.amount) AS total_amount FROM users AS u JOIN wallet_transactions_daily AS t ON u.uid = t.sender_id WHERE t.sender_type = 0 GROUP BY u.country ORDER BY CASE WHEN total_amount IS NULL THEN 1 ELSE 0 END DESC, total_amount DESC LIMIT 5;","Which are the top 5 countries by total transaction amount sent by users, sender_type = 0? Return the country, number of distinct users who sent, and total transaction amount.",,,"transactions_by_sending_users= Transactions.WHERE(sender_type==0)(country= sending_user.country)

output= PARTITION(transactions_by_sending_users, name=""t"", by=country)(
    country=country,
    user_count= NDISTINCT(t.sender_id),
    total_amount= SUM(t.amount)
).TOP_K(5,total_amount.DESC())",y
instruct_basic_sqlite.csv,ewallet,sqlite,basic_join_date_group_order_limit,"SELECT m.name AS merchant_name, COUNT(t.txid) AS total_transactions, SUM(t.amount) AS total_amount FROM merchants AS m JOIN wallet_transactions_daily AS t ON m.mid = t.receiver_id WHERE t.receiver_type = 1 AND t.created_at >= DATE('now', '-150 days') GROUP BY m.name ORDER BY total_amount DESC LIMIT 2;","Who are the top 2 merchants (receiver type 1) by total transaction amount in the past 150 days (inclusive of 150 days ago)? Return the merchant name, total number of transactions, and total transaction amount.",,,"selected_transactions = transactions_received.WHERE(
 (receiver_type == 1) & (created_at >= ""2024-10-09"")
)

merchant_transaction_summary=Merchants(
 merchant_name = name,
 total_transactions = COUNT(selected_transactions),
 total_amount = SUM(selected_transactions.amount),
).TOP_K(2, by=total_amount.DESC())",n
questions_gen_sqlite.csv,ewallet,sqlite,date_functions,"WITH retail_merchants AS (SELECT mid FROM merchants WHERE LOWER(category) LIKE LOWER('%retail%') AND status = 'active'), merchant_balances AS (SELECT balance FROM wallet_merchant_balance_daily AS wmbd JOIN retail_merchants AS rm ON wmbd.merchant_id = rm.mid WHERE DATE(wmbd.updated_at) = date('now')) SELECT AVG(balance) AS median_balance FROM (SELECT balance FROM merchant_balances ORDER BY balance LIMIT 2 - (SELECT COUNT(*) FROM merchant_balances) % 2 OFFSET (SELECT (COUNT(*) - 1) / 2 FROM merchant_balances));",Give me today's median merchant wallet balance for all active merchants whose category contains 'retail',,,Pydough doesn't support date manipulation,n
questions_gen_sqlite.csv,ewallet,sqlite,date_functions,"SELECT AVG(tx_limit_daily) AS avg_daily_limit, AVG(tx_limit_monthly) AS avg_monthly_limit FROM user_setting_snapshot WHERE snapshot_date = (SELECT MIN(snapshot_date) FROM user_setting_snapshot WHERE snapshot_date >= '2023-01-01' AND snapshot_date < '2024-01-01');",What was the average transaction daily and monthly limit for the earliest setting snapshot in 2023?,,,,
questions_gen_sqlite.csv,ewallet,sqlite,date_functions,"SELECT device_type, AVG(strftime('%s', session_end_ts) - strftime('%s', session_start_ts)) AS avg_session_duration_seconds FROM user_sessions WHERE session_end_ts IS NOT NULL GROUP BY device_type;",what was the average user session duration in seconds split by device_type?,,,"has_session_end= PRESENT(session_end_ts)

selected_user_sessions = UserSessions.WHERE(has_session_end)

output=  PARTITION(selected_user_sessions, name=""usession"", by=device_type)(
    device_type=device_type,
    avg_session_duration_seconds= AVG(SECOND(usession.session_end_ts) - SECOND(usession.session_start_ts)) # Pydough doesn't convert dates into seconds.
)",n
questions_gen_sqlite.csv,ewallet,sqlite,date_functions,"WITH earliest_coupons AS (SELECT c.merchant_id, MIN(c.start_date) AS earliest_coupon_start_date FROM coupons AS c GROUP BY c.merchant_id) SELECT m.mid AS merchant_id, m.created_at AS merchant_registration_date, ec.earliest_coupon_start_date, c.cid AS earliest_coupon_id FROM merchants AS m JOIN earliest_coupons AS ec ON m.mid = ec.merchant_id JOIN coupons AS c ON ec.merchant_id = c.merchant_id AND ec.earliest_coupon_start_date = c.start_date WHERE ec.earliest_coupon_start_date <= date(m.created_at, '+1 year');","Which merchants earliest coupon start date was within a year of the merchant's registration? Return the merchant id, registration date, and earliest coupon id and start date",,,"# Retrieve merchants with their earliest coupon start date, filtering those whose first coupon start date is before January 1st, 2023
merchants_with_earliest_coupons = Merchants(
    merchant_id=mid, 
    merchant_registration_date=created_at,  
    earliest_coupon_start_date=MIN(coupons.start_date) 
).WHERE(earliest_coupon_start_date <= ""2023-01-01"") 

# Retrieve coupon details for the merchants with the earliest coupon start dates
selected_earliest_coupons = merchants_with_earliest_coupons.coupons(
    merchant_id=BACK(1).merchant_id,  
    merchant_registration_date=BACK(1).merchant_registration_date, 
    earliest_coupon_start_date=BACK(1).earliest_coupon_start_date,  
    earliest_coupon_id=cid 
)",n
questions_gen_sqlite.csv,ewallet,sqlite,date_functions,"SELECT u.username, u.email, u.created_at FROM users AS u LEFT JOIN notifications AS n ON u.uid = n.user_id AND n.created_at BETWEEN u.created_at AND date(u.created_at, '+1 year') WHERE n.user_id IS NULL;","Which users did not get a notification within the first year of signing up? Return their usernames, emails and signup dates.",,,"users_without_notifications = Users.WHERE(HASNOT(notifications.WHERE((created_at >= user.created_at) & (created_at < ""2025-01-01"") )))(username, email)
# Pydough  doesn't support date manipulation",n