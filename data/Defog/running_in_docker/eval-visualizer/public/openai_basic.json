[{"db_name": "broker", "db_type": "sqlite", "query_category": "basic_group_order_limit", "query": "SELECT sbTxStatus, COUNT(*) AS num_transactions FROM sbTransaction GROUP BY sbTxStatus ORDER BY CASE WHEN num_transactions IS NULL THEN 1 ELSE 0 END DESC, num_transactions DESC LIMIT 3;", "question": "What are the top 3 transaction statuses by number of transactions? Return the status and number of transactions.", "generated_query": "SELECT sbTxStatus AS status,\n       COUNT(*) AS number_of_transactions\nFROM sbTransaction\nGROUP BY sbTxStatus\nORDER BY number_of_transactions DESC\nLIMIT 3;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.288005828857422, "tokens_used": 792, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- sbCustomer AS sc\n-- sbTicker AS st\n-- sbDailyPrice AS sdp\n-- sbTransaction AS sb\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.14421}, {"db_name": "broker", "db_type": "sqlite", "query_category": "basic_group_order_limit", "query": "SELECT sbCustCountry, COUNT(*) AS num_customers FROM sbCustomer GROUP BY sbCustCountry ORDER BY CASE WHEN num_customers IS NULL THEN 1 ELSE 0 END DESC, num_customers DESC LIMIT 5;", "question": "What are the top 5 countries by number of customers? Return the country name and number of customers.", "generated_query": "SELECT sbCustCountry AS country,\n       COUNT(*) AS num_customers\nFROM sbCustomer\nGROUP BY sbCustCountry\nORDER BY num_customers DESC\nLIMIT 5;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.6319596767425537, "tokens_used": 793, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- sbCustomer AS sc\n-- sbTicker AS st\n-- sbDailyPrice AS sdp\n-- sbTransaction AS sb\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.14465}, {"db_name": "broker", "db_type": "sqlite", "query_category": "basic_join_date_group_order_limit", "query": "SELECT t.sbTxType, COUNT(DISTINCT t.sbTxCustId) AS num_customers, AVG(t.sbTxShares) AS avg_shares FROM sbTransaction AS t WHERE t.sbTxDateTime BETWEEN '2023-01-01' AND '2023-03-31 23:59:59' GROUP BY t.sbTxType ORDER BY CASE WHEN num_customers IS NULL THEN 1 ELSE 0 END DESC, num_customers DESC LIMIT 3;", "question": "How many distinct customers made each type of transaction between Jan 1, 2023 and Mar 31, 2023 (inclusive of start and end dates)? Return the transaction type, number of distinct customers and average number of shares, for the top 3 transaction types by number of customers.", "generated_query": "SELECT sbTxType AS transaction_type,\n       COUNT(DISTINCT sbTxCustId) AS distinct_customers,\n       AVG(sbTxShares) AS average_shares\nFROM sbTransaction\nWHERE date(sbTxDateTime) BETWEEN '2023-01-01' AND '2023-03-31'\nGROUP BY sbTxType\nORDER BY distinct_customers DESC\nLIMIT 3;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 4.518133163452148, "tokens_used": 1134, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- sbCustomer AS sc\n-- sbTicker AS st\n-- sbDailyPrice AS sdp\n-- sbTransaction AS sb\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.28182}, {"db_name": "broker", "db_type": "sqlite", "query_category": "basic_join_date_group_order_limit", "query": "SELECT c.sbCustCountry, COUNT(t.sbTxId) AS num_transactions, SUM(t.sbTxAmount) AS total_amount FROM sbCustomer AS c JOIN sbTransaction AS t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxDateTime >= DATE('now', '-30 days') GROUP BY c.sbCustCountry ORDER BY total_amount DESC LIMIT 5;", "question": "What are the top 5 countries by total transaction amount in the past 30 days, inclusive of 30 days ago? Return the country name, number of transactions and total transaction amount.", "generated_query": "SELECT c.sbCustCountry AS country,\n       COUNT(t.sbTxId) AS transaction_count,\n       SUM(t.sbTxAmount) AS total_transaction_amount\nFROM sbTransaction t\nJOIN sbCustomer c ON t.sbTxCustId = c.sbCustId\nWHERE t.sbTxDateTime >= datetime('now', '-30 days')\nGROUP BY c.sbCustCountry\nORDER BY total_transaction_amount DESC\nLIMIT 5;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 4.357421875, "tokens_used": 1053, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- sbCustomer AS sc\n-- sbTicker AS st\n-- sbDailyPrice AS sdp\n-- sbTransaction AS sb\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.25344}, {"db_name": "broker", "db_type": "sqlite", "query_category": "basic_join_distinct", "query": "SELECT DISTINCT c.sbCustId FROM sbCustomer AS c JOIN sbTransaction AS t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxType = 'buy';", "question": "Return the distinct list of customer IDs who have made a 'buy' transaction.", "generated_query": "SELECT DISTINCT sbTxCustId\nFROM sbTransaction\nWHERE sbTxType = 'buy';", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.239014148712158, "tokens_used": 771, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- sbCustomer AS sc\n-- sbTicker AS st\n-- sbDailyPrice AS sdp\n-- sbTransaction AS sb\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.13662000000000002}, {"db_name": "broker", "db_type": "sqlite", "query_category": "basic_join_distinct", "query": "SELECT DISTINCT tk.sbTickerId FROM sbTicker AS tk JOIN sbDailyPrice AS dp ON tk.sbTickerId = dp.sbDpTickerId WHERE dp.sbDpDate >= '2023-04-01';", "question": "Return the distinct list of ticker IDs that have daily price records on or after Apr 1, 2023.", "generated_query": "SELECT DISTINCT sbDpTickerId\nFROM sbDailyPrice\nWHERE sbDpDate >= '2023-04-01';", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.315378427505493, "tokens_used": 656, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- sbCustomer AS sc\n-- sbTicker AS st\n-- sbDailyPrice AS sdp\n-- sbTransaction AS sb\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.08371}, {"db_name": "broker", "db_type": "sqlite", "query_category": "basic_join_group_order_limit", "query": "SELECT tk.sbTickerSymbol, COUNT(tx.sbTxId) AS num_transactions, SUM(tx.sbTxAmount) AS total_amount FROM sbTicker AS tk JOIN sbTransaction AS tx ON tk.sbTickerId = tx.sbTxTickerId GROUP BY tk.sbTickerSymbol ORDER BY CASE WHEN total_amount IS NULL THEN 1 ELSE 0 END DESC, total_amount DESC LIMIT 10;", "question": "What are the top 10 ticker symbols by total transaction amount? Return the ticker symbol, number of transactions and total transaction amount.", "generated_query": "SELECT t.sbTickerSymbol,\n       COUNT(*) AS number_of_transactions,\n       SUM(tr.sbTxAmount) AS total_transaction_amount\nFROM sbTransaction tr\nJOIN sbTicker t ON tr.sbTxTickerId = t.sbTickerId\nGROUP BY t.sbTickerSymbol\nORDER BY total_transaction_amount DESC\nLIMIT 10;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.0313920974731445, "tokens_used": 957, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- sbCustomer AS sc\n-- sbTicker AS st\n-- sbDailyPrice AS sdp\n-- sbTransaction AS sb\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.21516000000000002}, {"db_name": "broker", "db_type": "sqlite", "query_category": "basic_join_group_order_limit", "query": "SELECT c.sbCustState, t.sbTickerType, COUNT(*) AS num_transactions FROM sbTransaction AS tx JOIN sbCustomer AS c ON tx.sbTxCustId = c.sbCustId JOIN sbTicker AS t ON tx.sbTxTickerId = t.sbTickerId GROUP BY c.sbCustState, t.sbTickerType ORDER BY CASE WHEN num_transactions IS NULL THEN 1 ELSE 0 END DESC, num_transactions DESC LIMIT 5;", "question": "What are the top 5 combinations of customer state and ticker type by number of transactions? Return the customer state, ticker type and number of transactions.", "generated_query": "SELECT c.sbCustState,\n       t.sbTickerType,\n       COUNT(*) AS num_transactions\nFROM sbTransaction tx\nJOIN sbCustomer c ON tx.sbTxCustId = c.sbCustId\nJOIN sbTicker t ON tx.sbTxTickerId = t.sbTickerId\nGROUP BY c.sbCustState,\n         t.sbTickerType\nORDER BY num_transactions DESC\nLIMIT 5;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.2130331993103027, "tokens_used": 1036, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- sbCustomer AS sc\n-- sbTicker AS st\n-- sbDailyPrice AS sdp\n-- sbTransaction AS sb\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.24860000000000004}, {"db_name": "broker", "db_type": "sqlite", "query_category": "basic_left_join", "query": "SELECT c.sbCustId, c.sbCustName FROM sbCustomer AS c LEFT JOIN sbTransaction AS t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxCustId IS NULL;", "question": "Return the customer ID and name of customers who have not made any transactions.", "generated_query": "SELECT sbCustId,\n       sbCustName\nFROM sbCustomer\nLEFT JOIN sbTransaction ON sbCustomer.sbCustId = sbTransaction.sbTxCustId\nWHERE sbTransaction.sbTxId IS NULL;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.6573925018310547, "tokens_used": 855, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- sbCustomer AS sc\n-- sbTicker AS st\n-- sbDailyPrice AS sdp\n-- sbTransaction AS sb\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.17391}, {"db_name": "broker", "db_type": "sqlite", "query_category": "basic_left_join", "query": "SELECT tk.sbTickerId, tk.sbTickerSymbol FROM sbTicker AS tk LEFT JOIN sbDailyPrice AS dp ON tk.sbTickerId = dp.sbDpTickerId WHERE dp.sbDpTickerId IS NULL;", "question": "Return the ticker ID and symbol of tickers that do not have any daily price records.", "generated_query": "SELECT t.sbTickerId,\n       t.sbTickerSymbol\nFROM sbTicker t\nLEFT JOIN sbDailyPrice dp ON t.sbTickerId = dp.sbDpTickerId\nWHERE dp.sbDpTickerId IS NULL;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.461275339126587, "tokens_used": 861, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- sbCustomer AS sc\n-- sbTicker AS st\n-- sbDailyPrice AS sdp\n-- sbTransaction AS sb\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.17556}, {"db_name": "car_dealership", "db_type": "sqlite", "query_category": "basic_group_order_limit", "query": "SELECT payment_method, COUNT(*) AS total_payments, SUM(payment_amount) AS total_amount FROM payments_received GROUP BY payment_method ORDER BY CASE WHEN total_amount IS NULL THEN 1 ELSE 0 END DESC, total_amount DESC LIMIT 3;", "question": "What are the top 3 payment methods by total payment amount received? Return the payment method, total number of payments and total amount.", "generated_query": "SELECT payment_method,\n       COUNT(*) AS total_payments,\n       SUM(payment_amount) AS total_amount\nFROM payments_received\nGROUP BY payment_method\nORDER BY total_amount DESC\nLIMIT 3;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.384014368057251, "tokens_used": 1110, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- cars AS c\n-- salespersons AS s\n-- customers AS cu\n-- sales AS sa\n-- inventory_snapshots AS inv\n-- payments_received AS pr\n-- payments_made AS pm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.18216000000000002}, {"db_name": "car_dealership", "db_type": "sqlite", "query_category": "basic_group_order_limit", "query": "SELECT state, COUNT(*) AS total_signups FROM customers GROUP BY state ORDER BY CASE WHEN total_signups IS NULL THEN 1 ELSE 0 END DESC, total_signups DESC LIMIT 2;", "question": "What are the total number of customer signups for the top 2 states? Return the state and total signups, starting from the top.", "generated_query": "SELECT state,\n       COUNT(*) AS total_signups\nFROM customers\nGROUP BY state\nORDER BY total_signups DESC\nLIMIT 2;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.3450851440429688, "tokens_used": 1160, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- cars AS c\n-- salespersons AS s\n-- customers AS cu\n-- sales AS sa\n-- inventory_snapshots AS inv\n-- payments_received AS pr\n-- payments_made AS pm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.20350000000000004}, {"db_name": "car_dealership", "db_type": "sqlite", "query_category": "basic_join_date_group_order_limit", "query": "SELECT sp.first_name, sp.last_name, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales AS s JOIN salespersons AS sp ON s.salesperson_id = sp.id WHERE s.sale_date >= DATE('now', '-30 days') GROUP BY sp.first_name, sp.last_name, sp.id ORDER BY total_sales DESC LIMIT 5;", "question": "Return the top 5 salespersons by number of sales in the past 30 days? Return their first and last name, total sales count and total revenue amount.", "generated_query": "SELECT sp.first_name,\n       sp.last_name,\n       COUNT(s.id) AS total_sales_count,\n       SUM(s.sale_price) AS total_revenue_amount\nFROM sales s\nJOIN salespersons sp ON s.salesperson_id = sp.id\nWHERE s.sale_date >= date('now', '-30 days')\nGROUP BY sp.id\nORDER BY total_sales_count DESC\nLIMIT 5;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.9478061199188232, "tokens_used": 1339, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- cars AS c\n-- salespersons AS s\n-- customers AS cu\n-- sales AS sa\n-- inventory_snapshots AS inv\n-- payments_received AS pr\n-- payments_made AS pm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.28094}, {"db_name": "car_dealership", "db_type": "sqlite", "query_category": "basic_join_date_group_order_limit", "query": "SELECT c.first_name, c.last_name, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales AS s JOIN salespersons AS c ON s.salesperson_id = c.id WHERE s.sale_date >= DATE('now', '-3 months') GROUP BY c.first_name, c.last_name ORDER BY total_revenue DESC LIMIT 3;", "question": "Who were the top 3 sales representatives by total revenue in the past 3 months, inclusive of today's date? Return their first name, last name, total number of sales and total revenue. Note that revenue refers to the sum of sale_price in the sales table.", "generated_query": "SELECT sp.first_name,\n       sp.last_name,\n       COUNT(*) AS total_sales,\n       SUM(s.sale_price) AS total_revenue\nFROM sales AS s\nJOIN salespersons AS sp ON s.salesperson_id = sp.id\nWHERE s.sale_date BETWEEN DATE('now', '-3 months') AND DATE('now')\nGROUP BY sp.id\nORDER BY total_revenue DESC\nLIMIT 3;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 4.156383275985718, "tokens_used": 1366, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- cars AS c\n-- salespersons AS s\n-- customers AS cu\n-- sales AS sa\n-- inventory_snapshots AS inv\n-- payments_received AS pr\n-- payments_made AS pm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.28589000000000003}, {"db_name": "car_dealership", "db_type": "sqlite", "query_category": "basic_join_distinct", "query": "SELECT DISTINCT c.id AS customer_id FROM customers AS c JOIN sales AS s ON c.id = s.customer_id;", "question": "Return the distinct list of customer IDs that have made a purchase, based on joining the customers and sales tables.", "generated_query": "SELECT DISTINCT customers.id\nFROM customers\nJOIN sales ON customers.id = sales.customer_id;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.785630226135254, "tokens_used": 1082, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- cars AS c\n-- salespersons AS s\n-- customers AS cu\n-- sales AS sa\n-- inventory_snapshots AS inv\n-- payments_received AS pr\n-- payments_made AS pm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.17149}, {"db_name": "car_dealership", "db_type": "sqlite", "query_category": "basic_join_distinct", "query": "SELECT DISTINCT s.id AS salesperson_id FROM salespersons AS s JOIN sales AS sa ON s.id = sa.salesperson_id JOIN payments_received AS p ON sa.id = p.sale_id WHERE p.payment_method = 'cash';", "question": "Return the distinct list of salesperson IDs that have received a cash payment, based on joining the salespersons, sales and payments_received tables.", "generated_query": "SELECT DISTINCT salespersons.id\nFROM salespersons\nJOIN sales ON salespersons.id = sales.salesperson_id\nJOIN payments_received ON sales.id = payments_received.sale_id\nWHERE payments_received.payment_method = 'cash';", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.3527848720550537, "tokens_used": 1109, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- cars AS c\n-- salespersons AS s\n-- customers AS cu\n-- sales AS sa\n-- inventory_snapshots AS inv\n-- payments_received AS pr\n-- payments_made AS pm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.18172000000000002}, {"db_name": "car_dealership", "db_type": "sqlite", "query_category": "basic_join_group_order_limit", "query": "SELECT c.state, COUNT(DISTINCT s.customer_id) AS unique_customers, SUM(s.sale_price) AS total_revenue FROM sales AS s JOIN customers AS c ON s.customer_id = c.id GROUP BY c.state ORDER BY CASE WHEN total_revenue IS NULL THEN 1 ELSE 0 END DESC, total_revenue DESC LIMIT 5;", "question": "Return the top 5 states by total revenue, showing the number of unique customers and total revenue (based on sale price) for each state.", "generated_query": "SELECT c.state,\n       COUNT(DISTINCT c.id) AS unique_customers,\n       SUM(s.sale_price) AS total_revenue\nFROM sales s\nJOIN customers c ON s.customer_id = c.id\nGROUP BY c.state\nORDER BY total_revenue DESC\nLIMIT 5;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.828195333480835, "tokens_used": 1195, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- cars AS c\n-- salespersons AS s\n-- customers AS cu\n-- sales AS sa\n-- inventory_snapshots AS inv\n-- payments_received AS pr\n-- payments_made AS pm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.21889999999999998}, {"db_name": "car_dealership", "db_type": "sqlite", "query_category": "basic_join_group_order_limit", "query": "SELECT c.make, c.model, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales AS s JOIN cars AS c ON s.car_id = c.id GROUP BY c.make, c.model ORDER BY CASE WHEN total_revenue IS NULL THEN 1 ELSE 0 END DESC, total_revenue DESC LIMIT 5;", "question": "What are the top 5 best selling car models by total revenue? Return the make, model, total number of sales and total revenue.", "generated_query": "SELECT c.make,\n       c.model,\n       COUNT(*) AS total_sales,\n       SUM(s.sale_price) AS total_revenue\nFROM sales s\nJOIN cars c ON s.car_id = c.id\nGROUP BY c.make,\n         c.model\nORDER BY total_revenue DESC\nLIMIT 5;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.894852876663208, "tokens_used": 1321, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- cars AS c\n-- salespersons AS s\n-- customers AS cu\n-- sales AS sa\n-- inventory_snapshots AS inv\n-- payments_received AS pr\n-- payments_made AS pm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.27467}, {"db_name": "car_dealership", "db_type": "sqlite", "query_category": "basic_left_join", "query": "SELECT c.id AS car_id, c.make, c.model, c.year FROM cars AS c LEFT JOIN sales AS s ON c.id = s.car_id WHERE s.car_id IS NULL;", "question": "Return the car ID, make, model and year for cars that have no sales records, by doing a left join from the cars to sales table.", "generated_query": "SELECT cars.id,\n       cars.make,\n       cars.model,\n       cars.year\nFROM cars\nLEFT JOIN sales ON cars.id = sales.car_id\nWHERE sales.car_id IS NULL;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.7063465118408203, "tokens_used": 1103, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- cars AS c\n-- salespersons AS s\n-- customers AS cu\n-- sales AS sa\n-- inventory_snapshots AS inv\n-- payments_received AS pr\n-- payments_made AS pm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.17809}, {"db_name": "car_dealership", "db_type": "sqlite", "query_category": "basic_left_join", "query": "SELECT s.id AS salesperson_id, s.first_name, s.last_name FROM salespersons AS s LEFT JOIN sales AS sa ON s.id = sa.salesperson_id WHERE sa.salesperson_id IS NULL;", "question": "Return the salesperson ID, first name and last name for salespersons that have no sales records, by doing a left join from the salespersons to sales table.", "generated_query": "SELECT s.id,\n       s.first_name,\n       s.last_name\nFROM salespersons s\nLEFT JOIN sales sa ON s.id = sa.salesperson_id\nWHERE sa.id IS NULL;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.003039598464966, "tokens_used": 1043, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- cars AS c\n-- salespersons AS s\n-- customers AS cu\n-- sales AS sa\n-- inventory_snapshots AS inv\n-- payments_received AS pr\n-- payments_made AS pm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.15103000000000003}, {"db_name": "derm_treatment", "db_type": "sqlite", "query_category": "basic_group_order_limit", "query": "SELECT specialty, COUNT(*) AS num_doctors FROM doctors GROUP BY specialty ORDER BY CASE WHEN num_doctors IS NULL THEN 1 ELSE 0 END DESC, num_doctors DESC LIMIT 2;", "question": "What are the top 2 specialties by number of doctors? Return the specialty and number of doctors.", "generated_query": "SELECT specialty,\n       COUNT(*) AS num_doctors\nFROM doctors\nGROUP BY specialty\nORDER BY num_doctors DESC\nLIMIT 2;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 4.79375958442688, "tokens_used": 1206, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- doctors AS d\n-- patients AS p\n-- drugs AS dr\n-- diagnoses AS di\n-- treatments AS t\n-- outcomes AS o\n-- adverse_events AS ae\n-- concomitant_meds AS cm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.18744}, {"db_name": "derm_treatment", "db_type": "sqlite", "query_category": "basic_group_order_limit", "query": "SELECT ins_type, AVG(height_cm) AS avg_height, AVG(weight_kg) AS avg_weight FROM patients GROUP BY ins_type ORDER BY CASE WHEN avg_height IS NULL THEN 1 ELSE 0 END DESC, avg_height DESC LIMIT 3;", "question": "What are the top 3 insurance types by average patient height in cm? Return the insurance type, average height and average weight.", "generated_query": "SELECT ins_type AS insurance_type,\n       AVG(height_cm) AS avg_height,\n       AVG(weight_kg) AS avg_weight\nFROM patients\nGROUP BY ins_type\nORDER BY avg_height DESC\nLIMIT 3;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.0866146087646484, "tokens_used": 1230, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- doctors AS d\n-- patients AS p\n-- drugs AS dr\n-- diagnoses AS di\n-- treatments AS t\n-- outcomes AS o\n-- adverse_events AS ae\n-- concomitant_meds AS cm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.19602}, {"db_name": "derm_treatment", "db_type": "sqlite", "query_category": "basic_join_date_group_order_limit", "query": "SELECT p.ins_type, COUNT(DISTINCT t.patient_id) AS num_patients, AVG(o.day100_pasi_score) AS avg_pasi_score FROM treatments AS t JOIN patients AS p ON t.patient_id = p.patient_id JOIN outcomes AS o ON t.treatment_id = o.treatment_id WHERE t.end_dt BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.ins_type ORDER BY CASE WHEN avg_pasi_score IS NULL THEN 1 ELSE 0 END, avg_pasi_score LIMIT 5;", "question": "For treatments that ended in the year 2022 (from Jan 1st to Dec 31st inclusive), what is the average PASI score at day 100 and number of distinct patients per insurance type? Return the top 5 insurance types sorted by lowest average PASI score first.", "generated_query": "SELECT p.ins_type AS insurance_type,\n       AVG(o.day100_pasi_score) AS avg_day100_pasi_score,\n       COUNT(DISTINCT p.patient_id) AS distinct_patients\nFROM treatments t\nJOIN outcomes o ON t.treatment_id = o.treatment_id\nJOIN patients p ON t.patient_id = p.patient_id\nWHERE t.end_dt BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY p.ins_type\nORDER BY avg_day100_pasi_score ASC\nLIMIT 5;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.6615889072418213, "tokens_used": 1394, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- doctors AS d\n-- patients AS p\n-- drugs AS dr\n-- diagnoses AS di\n-- treatments AS t\n-- outcomes AS o\n-- adverse_events AS ae\n-- concomitant_meds AS cm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.25729}, {"db_name": "derm_treatment", "db_type": "sqlite", "query_category": "basic_join_date_group_order_limit", "query": "SELECT d.specialty, COUNT(*) AS num_treatments, SUM(t.tot_drug_amt) AS total_drug_amt FROM treatments AS t JOIN doctors AS d ON t.doc_id = d.doc_id WHERE t.start_dt >= DATE('now', '-6 months') GROUP BY d.specialty ORDER BY total_drug_amt DESC LIMIT 3;", "question": "What are the top 3 doctor specialties by total drug amount prescribed for treatments started in the past 6 calendar months? Return the specialty, number of treatments, and total drug amount.", "generated_query": "SELECT d.specialty,\n       COUNT(t.treatment_id) AS number_of_treatments,\n       SUM(t.tot_drug_amt) AS total_drug_amount\nFROM treatments t\nJOIN doctors d ON t.doc_id = d.doc_id\nWHERE t.start_dt >= date('now', '-6 months')\nGROUP BY d.specialty\nORDER BY total_drug_amount DESC\nLIMIT 3;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.945786476135254, "tokens_used": 1408, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- doctors AS d\n-- patients AS p\n-- drugs AS dr\n-- diagnoses AS di\n-- treatments AS t\n-- outcomes AS o\n-- adverse_events AS ae\n-- concomitant_meds AS cm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.27071}, {"db_name": "derm_treatment", "db_type": "sqlite", "query_category": "basic_join_distinct", "query": "SELECT DISTINCT d.doc_id, d.first_name, d.last_name FROM treatments AS t JOIN doctors AS d ON t.doc_id = d.doc_id;", "question": "Return the distinct list of doctor IDs, first names and last names that have prescribed treatments.", "generated_query": "SELECT DISTINCT d.doc_id,\n                d.first_name,\n                d.last_name\nFROM doctors d\nINNER JOIN treatments t ON d.doc_id = t.doc_id;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.711193561553955, "tokens_used": 1079, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- doctors AS d\n-- patients AS p\n-- drugs AS dr\n-- diagnoses AS di\n-- treatments AS t\n-- outcomes AS o\n-- adverse_events AS ae\n-- concomitant_meds AS cm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.13222}, {"db_name": "derm_treatment", "db_type": "sqlite", "query_category": "basic_join_distinct", "query": "SELECT DISTINCT p.patient_id, p.first_name, p.last_name FROM outcomes AS o JOIN treatments AS t ON o.treatment_id = t.treatment_id JOIN patients AS p ON t.patient_id = p.patient_id;", "question": "Return the distinct list of patient IDs, first names and last names that have outcome assessments.", "generated_query": "SELECT DISTINCT p.patient_id,\n                p.first_name,\n                p.last_name\nFROM patients p\nJOIN treatments t ON p.patient_id = t.patient_id\nJOIN outcomes o ON t.treatment_id = o.treatment_id;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.172964334487915, "tokens_used": 1220, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- doctors AS d\n-- patients AS p\n-- drugs AS dr\n-- diagnoses AS di\n-- treatments AS t\n-- outcomes AS o\n-- adverse_events AS ae\n-- concomitant_meds AS cm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.19426000000000002}, {"db_name": "derm_treatment", "db_type": "sqlite", "query_category": "basic_join_group_order_limit", "query": "SELECT di.diag_name, COUNT(DISTINCT t.patient_id) AS num_patients, MAX(o.day100_itch_vas) AS max_itch_score FROM treatments AS t JOIN diagnoses AS di ON t.diag_id = di.diag_id JOIN outcomes AS o ON t.treatment_id = o.treatment_id GROUP BY di.diag_name ORDER BY CASE WHEN max_itch_score IS NULL THEN 1 ELSE 0 END DESC, max_itch_score DESC, CASE WHEN num_patients IS NULL THEN 1 ELSE 0 END DESC, num_patients DESC LIMIT 3;", "question": "What are the top 3 diagnoses by maximum itch VAS score at day 100 and number of distinct patients? Return the diagnosis name, number of patients, and maximum itch score.", "generated_query": "SELECT d.diag_name,\n       COUNT(DISTINCT t.patient_id) AS num_patients,\n       MAX(o.day100_itch_vas) AS max_itch_score\nFROM diagnoses d\nJOIN treatments t ON d.diag_id = t.diag_id\nJOIN outcomes o ON t.treatment_id = o.treatment_id\nGROUP BY d.diag_id,\n         d.diag_name\nORDER BY max_itch_score DESC\nLIMIT 3;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.611438274383545, "tokens_used": 1481, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- doctors AS d\n-- patients AS p\n-- drugs AS dr\n-- diagnoses AS di\n-- treatments AS t\n-- outcomes AS o\n-- adverse_events AS ae\n-- concomitant_meds AS cm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.30283000000000004}, {"db_name": "derm_treatment", "db_type": "sqlite", "query_category": "basic_join_group_order_limit", "query": "SELECT d.drug_name, COUNT(*) AS num_treatments, AVG(t.tot_drug_amt) AS avg_drug_amt FROM treatments AS t JOIN drugs AS d ON t.drug_id = d.drug_id GROUP BY d.drug_name ORDER BY CASE WHEN num_treatments IS NULL THEN 1 ELSE 0 END DESC, num_treatments DESC, CASE WHEN avg_drug_amt IS NULL THEN 1 ELSE 0 END DESC, avg_drug_amt DESC LIMIT 5;", "question": "What are the top 5 drugs by number of treatments and average drug amount per treatment? Return the drug name, number of treatments, and average drug amount.", "generated_query": "SELECT d.drug_name,\n       COUNT(t.treatment_id) AS num_treatments,\n       AVG(t.tot_drug_amt) AS avg_drug_amt\nFROM treatments t\nJOIN drugs d ON t.drug_id = d.drug_id\nGROUP BY d.drug_name\nORDER BY num_treatments DESC\nLIMIT 5;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 4.040010929107666, "tokens_used": 1581, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- doctors AS d\n-- patients AS p\n-- drugs AS dr\n-- diagnoses AS di\n-- treatments AS t\n-- outcomes AS o\n-- adverse_events AS ae\n-- concomitant_meds AS cm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.34848000000000007}, {"db_name": "derm_treatment", "db_type": "sqlite", "query_category": "basic_left_join", "query": "SELECT d.drug_id, d.drug_name FROM drugs AS d LEFT JOIN treatments AS t ON d.drug_id = t.drug_id WHERE t.drug_id IS NULL;", "question": "Return the drug IDs and names of drugs that have not been used in any treatments.", "generated_query": "SELECT drug_id,\n       drug_name\nFROM drugs\nWHERE drug_id NOT IN\n    (SELECT DISTINCT drug_id\n     FROM treatments);", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.679105043411255, "tokens_used": 1198, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- doctors AS d\n-- patients AS p\n-- drugs AS dr\n-- diagnoses AS di\n-- treatments AS t\n-- outcomes AS o\n-- adverse_events AS ae\n-- concomitant_meds AS cm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.18491}, {"db_name": "derm_treatment", "db_type": "sqlite", "query_category": "basic_left_join", "query": "SELECT p.patient_id, p.first_name, p.last_name FROM patients AS p LEFT JOIN treatments AS t ON p.patient_id = t.patient_id WHERE t.patient_id IS NULL;", "question": "Return the patient IDs, first names and last names of patients who have not received any treatments.", "generated_query": "SELECT p.patient_id,\n       p.first_name,\n       p.last_name\nFROM patients p\nLEFT JOIN treatments t ON p.patient_id = t.patient_id\nWHERE t.patient_id IS NULL;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.922128200531006, "tokens_used": 1214, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- doctors AS d\n-- patients AS p\n-- drugs AS dr\n-- diagnoses AS di\n-- treatments AS t\n-- outcomes AS o\n-- adverse_events AS ae\n-- concomitant_meds AS cm\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.19129}, {"db_name": "ewallet", "db_type": "sqlite", "query_category": "basic_group_order_limit", "query": "SELECT device_type, COUNT(*) AS COUNT FROM user_sessions GROUP BY device_type ORDER BY CASE WHEN COUNT IS NULL THEN 1 ELSE 0 END DESC, COUNT DESC LIMIT 2;", "question": "What are the top 2 most frequently used device types for user sessions and their respective counts?", "generated_query": "SELECT device_type,\n       COUNT(*) AS COUNT\nFROM user_sessions\nGROUP BY device_type\nORDER BY COUNT DESC\nLIMIT 2;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.406872034072876, "tokens_used": 1346, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- consumer_div.users AS u\n-- consumer_div.merchants AS m\n-- consumer_div.coupons AS c\n-- consumer_div.wallet_transactions_daily AS wtd\n-- consumer_div.wallet_user_balance_daily AS wubd\n-- consumer_div.wallet_merchant_balance_daily AS wmbd\n-- consumer_div.notifications AS n\n-- consumer_div.user_sessions AS us\n-- consumer_div.user_setting_snapshot AS uss\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.18139000000000002}, {"db_name": "ewallet", "db_type": "sqlite", "query_category": "basic_group_order_limit", "query": "SELECT status, COUNT(*) AS COUNT FROM wallet_transactions_daily GROUP BY status ORDER BY CASE WHEN COUNT IS NULL THEN 1 ELSE 0 END DESC, COUNT DESC LIMIT 3;", "question": "What are the top 3 most common transaction statuses and their respective counts?", "generated_query": "SELECT status,\n       COUNT(*) AS COUNT\nFROM wallet_transactions_daily\nGROUP BY status\nORDER BY COUNT(*) DESC\nLIMIT 3;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.691776990890503, "tokens_used": 1342, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- consumer_div.users AS u\n-- consumer_div.merchants AS m\n-- consumer_div.coupons AS c\n-- consumer_div.wallet_transactions_daily AS wtd\n-- consumer_div.wallet_user_balance_daily AS wubd\n-- consumer_div.wallet_merchant_balance_daily AS wmbd\n-- consumer_div.notifications AS n\n-- consumer_div.user_sessions AS us\n-- consumer_div.user_setting_snapshot AS uss\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.18095000000000003}, {"db_name": "ewallet", "db_type": "sqlite", "query_category": "basic_join_date_group_order_limit", "query": "SELECT strftime('%Y-%m', t.created_at) AS month, COUNT(DISTINCT t.sender_id) AS active_users FROM wallet_transactions_daily AS t JOIN users AS u ON t.sender_id = u.uid WHERE t.sender_type = 0 AND t.status = 'success' AND u.status = 'active' AND t.created_at >= '2023-01-01' AND t.created_at < '2024-01-01' GROUP BY month ORDER BY month;", "question": "How many distinct active users sent money per month in 2023? Return the number of active users per month (as a date), starting from the earliest date. Do not include merchants in the query. Only include successful transactions.", "generated_query": "SELECT date(wtd.created_at, 'start of month') AS MONTH,\n       COUNT(DISTINCT wtd.sender_id) AS active_users\nFROM wallet_transactions_daily wtd\nJOIN users u ON wtd.sender_id = u.uid\nWHERE wtd.sender_type = 0\n  AND wtd.status = 'success'\n  AND u.status = 'active'\n  AND wtd.created_at BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY MONTH\nORDER BY MONTH;", "reason": "", "error_msg": "INCORRECT RESULTS", "exact_match": 0, "correct": 0, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 4.02821946144104, "tokens_used": 1838, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- consumer_div.users AS u\n-- consumer_div.merchants AS m\n-- consumer_div.coupons AS c\n-- consumer_div.wallet_transactions_daily AS wtd\n-- consumer_div.wallet_user_balance_daily AS wubd\n-- consumer_div.wallet_merchant_balance_daily AS wmbd\n-- consumer_div.notifications AS n\n-- consumer_div.user_sessions AS us\n-- consumer_div.user_setting_snapshot AS uss\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.38896}, {"db_name": "ewallet", "db_type": "sqlite", "query_category": "basic_join_date_group_order_limit", "query": "SELECT m.name AS merchant_name, COUNT(t.txid) AS total_transactions, SUM(t.amount) AS total_amount FROM merchants AS m JOIN wallet_transactions_daily AS t ON m.mid = t.receiver_id WHERE t.receiver_type = 1 AND t.created_at >= DATE('now', '-150 days') GROUP BY m.name ORDER BY total_amount DESC LIMIT 2;", "question": "Who are the top 2 merchants (receiver type 1) by total transaction amount in the past 150 days (inclusive of 150 days ago)? Return the merchant name, total number of transactions, and total transaction amount.", "generated_query": "SELECT m.name AS merchant_name,\n       COUNT(*) AS total_transactions,\n       SUM(wtd.amount) AS total_transaction_amount\nFROM wallet_transactions_daily wtd\nJOIN merchants m ON wtd.receiver_id = m.mid\nWHERE wtd.receiver_type = 1\n  AND wtd.created_at >= datetime('now', '-150 days')\nGROUP BY m.mid\nORDER BY SUM(wtd.amount) DESC\nLIMIT 2;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 6.70263147354126, "tokens_used": 1754, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- consumer_div.users AS u\n-- consumer_div.merchants AS m\n-- consumer_div.coupons AS c\n-- consumer_div.wallet_transactions_daily AS wtd\n-- consumer_div.wallet_user_balance_daily AS wubd\n-- consumer_div.wallet_merchant_balance_daily AS wmbd\n-- consumer_div.notifications AS n\n-- consumer_div.user_sessions AS us\n-- consumer_div.user_setting_snapshot AS uss\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.35200000000000004}, {"db_name": "ewallet", "db_type": "sqlite", "query_category": "basic_join_distinct", "query": "SELECT DISTINCT m.mid AS merchant_id FROM merchants AS m JOIN wallet_transactions_daily AS t ON m.mid = t.receiver_id WHERE t.receiver_type = 1;", "question": "Return the distinct list of merchant IDs that have received money from a transaction. Consider all transaction types in the results you return, but only include the merchant ids in your final answer.", "generated_query": "SELECT DISTINCT receiver_id AS merchant_id\nFROM wallet_transactions_daily\nWHERE receiver_type = 1;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 4.348543405532837, "tokens_used": 1676, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- consumer_div.users AS u\n-- consumer_div.merchants AS m\n-- consumer_div.coupons AS c\n-- consumer_div.wallet_transactions_daily AS wtd\n-- consumer_div.wallet_user_balance_daily AS wubd\n-- consumer_div.wallet_merchant_balance_daily AS wmbd\n-- consumer_div.notifications AS n\n-- consumer_div.user_sessions AS us\n-- consumer_div.user_setting_snapshot AS uss\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.32098}, {"db_name": "ewallet", "db_type": "sqlite", "query_category": "basic_join_distinct", "query": "SELECT DISTINCT user_id FROM notifications WHERE type = 'transaction';", "question": "Return the distinct list of user IDs who have received transaction notifications.", "generated_query": "SELECT DISTINCT user_id\nFROM notifications\nWHERE TYPE = 'transaction';", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.3641138076782227, "tokens_used": 1391, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- consumer_div.users AS u\n-- consumer_div.merchants AS m\n-- consumer_div.coupons AS c\n-- consumer_div.wallet_transactions_daily AS wtd\n-- consumer_div.wallet_user_balance_daily AS wubd\n-- consumer_div.wallet_merchant_balance_daily AS wmbd\n-- consumer_div.notifications AS n\n-- consumer_div.user_sessions AS us\n-- consumer_div.user_setting_snapshot AS uss\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.20317}, {"db_name": "ewallet", "db_type": "sqlite", "query_category": "basic_join_group_order_limit", "query": "SELECT c.code AS coupon_code, COUNT(t.txid) AS redemption_count, SUM(t.amount) AS total_discount FROM coupons AS c JOIN wallet_transactions_daily AS t ON c.cid = t.coupon_id GROUP BY c.code ORDER BY CASE WHEN redemption_count IS NULL THEN 1 ELSE 0 END DESC, redemption_count DESC LIMIT 3;", "question": "What are the top 3 most frequently used coupon codes? Return the coupon code, total number of redemptions, and total amount redeemed.", "generated_query": "SELECT c.code AS coupon_code,\n       COUNT(*) AS total_redemptions,\n       SUM(w.amount) AS total_amount_redeemed\nFROM wallet_transactions_daily w\nJOIN coupons c ON c.cid = w.coupon_id\nGROUP BY c.code\nORDER BY total_redemptions DESC\nLIMIT 3;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.3818671703338623, "tokens_used": 1586, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- consumer_div.users AS u\n-- consumer_div.merchants AS m\n-- consumer_div.coupons AS c\n-- consumer_div.wallet_transactions_daily AS wtd\n-- consumer_div.wallet_user_balance_daily AS wubd\n-- consumer_div.wallet_merchant_balance_daily AS wmbd\n-- consumer_div.notifications AS n\n-- consumer_div.user_sessions AS us\n-- consumer_div.user_setting_snapshot AS uss\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.28369}, {"db_name": "ewallet", "db_type": "sqlite", "query_category": "basic_join_group_order_limit", "query": "SELECT u.country, COUNT(DISTINCT t.sender_id) AS user_count, SUM(t.amount) AS total_amount FROM users AS u JOIN wallet_transactions_daily AS t ON u.uid = t.sender_id WHERE t.sender_type = 0 GROUP BY u.country ORDER BY CASE WHEN total_amount IS NULL THEN 1 ELSE 0 END DESC, total_amount DESC LIMIT 5;", "question": "Which are the top 5 countries by total transaction amount sent by users, sender_type = 0? Return the country, number of distinct users who sent, and total transaction amount.", "generated_query": "SELECT u.country,\n       COUNT(DISTINCT w.sender_id) AS distinct_users,\n       SUM(w.amount) AS total_amount\nFROM wallet_transactions_daily w\nJOIN users u ON w.sender_id = u.uid\nWHERE w.sender_type = 0\nGROUP BY u.country\nORDER BY total_amount DESC\nLIMIT 5;", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.474656820297241, "tokens_used": 1597, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- consumer_div.users AS u\n-- consumer_div.merchants AS m\n-- consumer_div.coupons AS c\n-- consumer_div.wallet_transactions_daily AS wtd\n-- consumer_div.wallet_user_balance_daily AS wubd\n-- consumer_div.wallet_merchant_balance_daily AS wmbd\n-- consumer_div.notifications AS n\n-- consumer_div.user_sessions AS us\n-- consumer_div.user_setting_snapshot AS uss\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.28589000000000003}, {"db_name": "ewallet", "db_type": "sqlite", "query_category": "basic_left_join", "query": "SELECT m.mid AS merchant_id, m.name AS merchant_name FROM merchants AS m LEFT JOIN coupons AS c ON m.mid = c.merchant_id WHERE c.cid IS NULL;", "question": "Return merchants (merchant ID and name) who have not issued any coupons.", "generated_query": "SELECT mid,\n       name\nFROM merchants\nWHERE mid NOT IN\n    (SELECT merchant_id\n     FROM coupons);", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 3.404280424118042, "tokens_used": 1526, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- consumer_div.users AS u\n-- consumer_div.merchants AS m\n-- consumer_div.coupons AS c\n-- consumer_div.wallet_transactions_daily AS wtd\n-- consumer_div.wallet_user_balance_daily AS wubd\n-- consumer_div.wallet_merchant_balance_daily AS wmbd\n-- consumer_div.notifications AS n\n-- consumer_div.user_sessions AS us\n-- consumer_div.user_setting_snapshot AS uss\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.26191000000000003}, {"db_name": "ewallet", "db_type": "sqlite", "query_category": "basic_left_join", "query": "SELECT u.uid, u.username FROM users AS u LEFT JOIN notifications AS n ON u.uid = n.user_id WHERE n.id IS NULL;", "question": "Return users (user ID and username) who have not received any notifications", "generated_query": "SELECT UID,\n       username\nFROM users\nWHERE UID NOT IN\n    (SELECT user_id\n     FROM notifications);", "reason": "", "error_msg": "", "exact_match": 0, "correct": 1, "error_query_gen": 0, "error_db_exec": 0, "timeout": 0, "latency_seconds": 2.6298177242279053, "tokens_used": 1397, "instructions": "", "k_shot_prompt": "", "glossary": "", "table_metadata_string": "", "table_aliases": "Use the following table aliases when referencing tables in the query:\n-- consumer_div.users AS u\n-- consumer_div.merchants AS m\n-- consumer_div.coupons AS c\n-- consumer_div.wallet_transactions_daily AS wtd\n-- consumer_div.wallet_user_balance_daily AS wubd\n-- consumer_div.wallet_merchant_balance_daily AS wmbd\n-- consumer_div.notifications AS n\n-- consumer_div.user_sessions AS us\n-- consumer_div.user_setting_snapshot AS uss\n", "prev_invalid_sql": "", "prev_error_msg": "", "question_0": "", "query_0": "", "question_1": "", "query_1": "", "cot_instructions": "", "cot_pregen": false, "cost_in_cents": 0.20548}]