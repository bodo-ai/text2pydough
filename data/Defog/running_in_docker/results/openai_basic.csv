db_name,db_type,query_category,query,question,generated_query,reason,error_msg,exact_match,correct,error_query_gen,error_db_exec,timeout,latency_seconds,tokens_used,instructions,k_shot_prompt,glossary,table_metadata_string,table_aliases,prev_invalid_sql,prev_error_msg,question_0,query_0,question_1,query_1,cot_instructions,cot_pregen,cost_in_cents
broker,sqlite,basic_group_order_limit,"SELECT sbTxStatus, COUNT(*) AS num_transactions FROM sbTransaction GROUP BY sbTxStatus ORDER BY CASE WHEN num_transactions IS NULL THEN 1 ELSE 0 END DESC, num_transactions DESC LIMIT 3;",What are the top 3 transaction statuses by number of transactions? Return the status and number of transactions.,"SELECT sbTxStatus AS status,
       COUNT(*) AS num_transactions
FROM sbTransaction
GROUP BY sbTxStatus
ORDER BY num_transactions DESC
LIMIT 3;",,,0,1,0,0,0,2.27,790,,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,0.14
broker,sqlite,basic_group_order_limit,"SELECT sbCustCountry, COUNT(*) AS num_customers FROM sbCustomer GROUP BY sbCustCountry ORDER BY CASE WHEN num_customers IS NULL THEN 1 ELSE 0 END DESC, num_customers DESC LIMIT 5;",What are the top 5 countries by number of customers? Return the country name and number of customers.,"SELECT sbCustCountry AS country,
       COUNT(*) AS num_customers
FROM sbCustomer
GROUP BY sbCustCountry
ORDER BY num_customers DESC
LIMIT 5;",,,0,1,0,0,0,2.50,728,,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,0.12
broker,sqlite,basic_join_date_group_order_limit,"SELECT t.sbTxType, COUNT(DISTINCT t.sbTxCustId) AS num_customers, AVG(t.sbTxShares) AS avg_shares FROM sbTransaction AS t WHERE t.sbTxDateTime BETWEEN '2023-01-01' AND '2023-03-31 23:59:59' GROUP BY t.sbTxType ORDER BY CASE WHEN num_customers IS NULL THEN 1 ELSE 0 END DESC, num_customers DESC LIMIT 3;","How many distinct customers made each type of transaction between Jan 1, 2023 and Mar 31, 2023 (inclusive of start and end dates)? Return the transaction type, number of distinct customers and average number of shares, for the top 3 transaction types by number of customers.","SELECT sbTxType,
       COUNT(DISTINCT sbTxCustId) AS distinct_customers,
       AVG(sbTxShares) AS avg_shares
FROM sbTransaction
WHERE sbTxDateTime >= '2023-01-01'
  AND sbTxDateTime < '2023-04-01'
GROUP BY sbTxType
ORDER BY distinct_customers DESC
LIMIT 3;",,,0,1,0,0,0,4.06,1199,,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,0.31
broker,sqlite,basic_join_date_group_order_limit,"SELECT c.sbCustCountry, COUNT(t.sbTxId) AS num_transactions, SUM(t.sbTxAmount) AS total_amount FROM sbCustomer AS c JOIN sbTransaction AS t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxDateTime >= DATE('now', '-30 days') GROUP BY c.sbCustCountry ORDER BY total_amount DESC LIMIT 5;","What are the top 5 countries by total transaction amount in the past 30 days, inclusive of 30 days ago? Return the country name, number of transactions and total transaction amount.","SELECT c.sbCustCountry AS country,
       COUNT(*) AS num_transactions,
       SUM(t.sbTxAmount) AS total_transaction_amount
FROM sbTransaction t
JOIN sbCustomer c ON t.sbTxCustId = c.sbCustId
WHERE t.sbTxDateTime >= datetime('now', '-30 days')
GROUP BY c.sbCustCountry
ORDER BY total_transaction_amount DESC
LIMIT 5;",,,0,1,0,0,0,4.34,1113,,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,0.28
broker,sqlite,basic_join_distinct,SELECT DISTINCT c.sbCustId FROM sbCustomer AS c JOIN sbTransaction AS t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxType = 'buy';,Return the distinct list of customer IDs who have made a 'buy' transaction.,"SELECT DISTINCT sbTxCustId
FROM sbTransaction
WHERE sbTxType = 'buy';",,,0,1,0,0,0,2.23,771,,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,0.14
broker,sqlite,basic_join_distinct,SELECT DISTINCT tk.sbTickerId FROM sbTicker AS tk JOIN sbDailyPrice AS dp ON tk.sbTickerId = dp.sbDpTickerId WHERE dp.sbDpDate >= '2023-04-01';,"Return the distinct list of ticker IDs that have daily price records on or after Apr 1, 2023.","SELECT DISTINCT sbDpTickerId
FROM sbDailyPrice
WHERE sbDpDate >= '2023-04-01';",,,0,1,0,0,0,2.61,784,,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,0.14
broker,sqlite,basic_join_group_order_limit,"SELECT tk.sbTickerSymbol, COUNT(tx.sbTxId) AS num_transactions, SUM(tx.sbTxAmount) AS total_amount FROM sbTicker AS tk JOIN sbTransaction AS tx ON tk.sbTickerId = tx.sbTxTickerId GROUP BY tk.sbTickerSymbol ORDER BY CASE WHEN total_amount IS NULL THEN 1 ELSE 0 END DESC, total_amount DESC LIMIT 10;","What are the top 10 ticker symbols by total transaction amount? Return the ticker symbol, number of transactions and total transaction amount.","SELECT t.sbTickerSymbol,
       COUNT(tr.sbTxId) AS num_transactions,
       SUM(tr.sbTxAmount) AS total_transaction_amount
FROM sbTransaction tr
JOIN sbTicker t ON tr.sbTxTickerId = t.sbTickerId
GROUP BY t.sbTickerSymbol
ORDER BY total_transaction_amount DESC
LIMIT 10;",,,0,1,0,0,0,2.04,830,,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,0.16
broker,sqlite,basic_join_group_order_limit,"SELECT c.sbCustState, t.sbTickerType, COUNT(*) AS num_transactions FROM sbTransaction AS tx JOIN sbCustomer AS c ON tx.sbTxCustId = c.sbCustId JOIN sbTicker AS t ON tx.sbTxTickerId = t.sbTickerId GROUP BY c.sbCustState, t.sbTickerType ORDER BY CASE WHEN num_transactions IS NULL THEN 1 ELSE 0 END DESC, num_transactions DESC LIMIT 5;","What are the top 5 combinations of customer state and ticker type by number of transactions? Return the customer state, ticker type and number of transactions.","SELECT c.sbCustState,
       t.sbTickerType,
       COUNT(*) AS num_transactions
FROM sbTransaction AS tx
JOIN sbCustomer AS c ON tx.sbTxCustId = c.sbCustId
JOIN sbTicker AS t ON tx.sbTxTickerId = t.sbTickerId
GROUP BY c.sbCustState,
         t.sbTickerType
ORDER BY num_transactions DESC
LIMIT 5;",,,0,1,0,0,0,4.36,915,,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,0.20
broker,sqlite,basic_left_join,"SELECT c.sbCustId, c.sbCustName FROM sbCustomer AS c LEFT JOIN sbTransaction AS t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxCustId IS NULL;",Return the customer ID and name of customers who have not made any transactions.,"SELECT sbCustId,
       sbCustName
FROM sbCustomer
WHERE sbCustId NOT IN
    (SELECT sbTxCustId
     FROM sbTransaction);",,,0,1,0,0,0,2.49,780,,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,0.14
broker,sqlite,basic_left_join,"SELECT tk.sbTickerId, tk.sbTickerSymbol FROM sbTicker AS tk LEFT JOIN sbDailyPrice AS dp ON tk.sbTickerId = dp.sbDpTickerId WHERE dp.sbDpTickerId IS NULL;",Return the ticker ID and symbol of tickers that do not have any daily price records.,"SELECT sbTickerId,
       sbTickerSymbol
FROM sbTicker
WHERE NOT EXISTS
    (SELECT 1
     FROM sbDailyPrice
     WHERE sbDailyPrice.sbDpTickerId = sbTicker.sbTickerId);",,,0,1,0,0,0,3.69,991,,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,0.23
car_dealership,sqlite,basic_group_order_limit,"SELECT payment_method, COUNT(*) AS total_payments, SUM(payment_amount) AS total_amount FROM payments_received GROUP BY payment_method ORDER BY CASE WHEN total_amount IS NULL THEN 1 ELSE 0 END DESC, total_amount DESC LIMIT 3;","What are the top 3 payment methods by total payment amount received? Return the payment method, total number of payments and total amount.","SELECT payment_method,
       COUNT(*) AS total_payments,
       SUM(payment_amount) AS total_amount
FROM payments_received
GROUP BY payment_method
ORDER BY total_amount DESC
LIMIT 3;",,,0,1,0,0,0,2.00,1046,,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,0.15
car_dealership,sqlite,basic_group_order_limit,"SELECT state, COUNT(*) AS total_signups FROM customers GROUP BY state ORDER BY CASE WHEN total_signups IS NULL THEN 1 ELSE 0 END DESC, total_signups DESC LIMIT 2;","What are the total number of customer signups for the top 2 states? Return the state and total signups, starting from the top.","SELECT state,
       COUNT(*) AS total_signups
FROM customers
GROUP BY state
ORDER BY total_signups DESC
LIMIT 2;",,,0,1,0,0,0,3.12,1096,,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,0.18
car_dealership,sqlite,basic_join_date_group_order_limit,"SELECT sp.first_name, sp.last_name, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales AS s JOIN salespersons AS sp ON s.salesperson_id = sp.id WHERE s.sale_date >= DATE('now', '-30 days') GROUP BY sp.first_name, sp.last_name, sp.id ORDER BY total_sales DESC LIMIT 5;","Return the top 5 salespersons by number of sales in the past 30 days? Return their first and last name, total sales count and total revenue amount.","SELECT sp.first_name,
       sp.last_name,
       COUNT(s.id) AS total_sales,
       SUM(s.sale_price) AS total_revenue
FROM sales s
JOIN salespersons sp ON s.salesperson_id = sp.id
WHERE s.sale_date >= date('now', '-30 days')
GROUP BY sp.id,
         sp.first_name,
         sp.last_name
ORDER BY total_sales DESC
LIMIT 5;",,,0,1,0,0,0,4.05,1220,,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,0.23
car_dealership,sqlite,basic_join_date_group_order_limit,"SELECT c.first_name, c.last_name, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales AS s JOIN salespersons AS c ON s.salesperson_id = c.id WHERE s.sale_date >= DATE('now', '-3 months') GROUP BY c.first_name, c.last_name ORDER BY total_revenue DESC LIMIT 3;","Who were the top 3 sales representatives by total revenue in the past 3 months, inclusive of today's date? Return their first name, last name, total number of sales and total revenue. Note that revenue refers to the sum of sale_price in the sales table.","SELECT sp.first_name,
       sp.last_name,
       COUNT(s.id) AS total_sales,
       SUM(s.sale_price) AS total_revenue
FROM sales s
JOIN salespersons sp ON s.salesperson_id = sp.id
WHERE s.sale_date BETWEEN date('now', '-3 months') AND date('now')
GROUP BY sp.id
ORDER BY total_revenue DESC
LIMIT 3;",,,0,1,0,0,0,3.93,1314,,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,0.26
car_dealership,sqlite,basic_join_distinct,SELECT DISTINCT c.id AS customer_id FROM customers AS c JOIN sales AS s ON c.id = s.customer_id;,"Return the distinct list of customer IDs that have made a purchase, based on joining the customers and sales tables.","SELECT DISTINCT customers.id
FROM customers
JOIN sales ON customers.id = sales.customer_id;",,,0,1,0,0,0,2.86,1079,,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,0.17
car_dealership,sqlite,basic_join_distinct,SELECT DISTINCT s.id AS salesperson_id FROM salespersons AS s JOIN sales AS sa ON s.id = sa.salesperson_id JOIN payments_received AS p ON sa.id = p.sale_id WHERE p.payment_method = 'cash';,"Return the distinct list of salesperson IDs that have received a cash payment, based on joining the salespersons, sales and payments_received tables.","SELECT DISTINCT salespersons.id
FROM salespersons
JOIN sales ON sales.salesperson_id = salespersons.id
JOIN payments_received ON sales.id = payments_received.sale_id
WHERE payments_received.payment_method = 'cash';",,,0,1,0,0,0,3.77,1173,,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,0.21
car_dealership,sqlite,basic_join_group_order_limit,"SELECT c.state, COUNT(DISTINCT s.customer_id) AS unique_customers, SUM(s.sale_price) AS total_revenue FROM sales AS s JOIN customers AS c ON s.customer_id = c.id GROUP BY c.state ORDER BY CASE WHEN total_revenue IS NULL THEN 1 ELSE 0 END DESC, total_revenue DESC LIMIT 5;","Return the top 5 states by total revenue, showing the number of unique customers and total revenue (based on sale price) for each state.","SELECT c.state,
       COUNT(DISTINCT c.id) AS unique_customers,
       SUM(s.sale_price) AS total_revenue
FROM sales s
JOIN customers c ON s.customer_id = c.id
GROUP BY c.state
ORDER BY total_revenue DESC
LIMIT 5;",,,0,1,0,0,0,2.21,1195,,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,0.22
car_dealership,sqlite,basic_join_group_order_limit,"SELECT c.make, c.model, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales AS s JOIN cars AS c ON s.car_id = c.id GROUP BY c.make, c.model ORDER BY CASE WHEN total_revenue IS NULL THEN 1 ELSE 0 END DESC, total_revenue DESC LIMIT 5;","What are the top 5 best selling car models by total revenue? Return the make, model, total number of sales and total revenue.","SELECT c.make,
       c.model,
       COUNT(*) AS total_sales,
       SUM(s.sale_price) AS total_revenue
FROM sales s
JOIN cars c ON s.car_id = c.id
GROUP BY c.make,
         c.model
ORDER BY total_revenue DESC
LIMIT 5;",,,0,1,0,0,0,3.60,1193,,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,0.22
car_dealership,sqlite,basic_left_join,"SELECT c.id AS car_id, c.make, c.model, c.year FROM cars AS c LEFT JOIN sales AS s ON c.id = s.car_id WHERE s.car_id IS NULL;","Return the car ID, make, model and year for cars that have no sales records, by doing a left join from the cars to sales table.","SELECT cars.id,
       cars.make,
       cars.model,
       cars.year
FROM cars
LEFT JOIN sales ON sales.car_id = cars.id
WHERE sales.id IS NULL;",,,0,1,0,0,0,2.78,1038,,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,0.15
car_dealership,sqlite,basic_left_join,"SELECT s.id AS salesperson_id, s.first_name, s.last_name FROM salespersons AS s LEFT JOIN sales AS sa ON s.id = sa.salesperson_id WHERE sa.salesperson_id IS NULL;","Return the salesperson ID, first name and last name for salespersons that have no sales records, by doing a left join from the salespersons to sales table.","SELECT salespersons.id,
       salespersons.first_name,
       salespersons.last_name
FROM salespersons
LEFT JOIN sales ON salespersons.id = sales.salesperson_id
WHERE sales.salesperson_id IS NULL;",,,0,1,0,0,0,2.33,1111,,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,0.18
derm_treatment,sqlite,basic_group_order_limit,"SELECT specialty, COUNT(*) AS num_doctors FROM doctors GROUP BY specialty ORDER BY CASE WHEN num_doctors IS NULL THEN 1 ELSE 0 END DESC, num_doctors DESC LIMIT 2;",What are the top 2 specialties by number of doctors? Return the specialty and number of doctors.,"SELECT specialty,
       COUNT(*) AS doctor_count
FROM doctors
GROUP BY specialty
ORDER BY doctor_count DESC
LIMIT 2;",,,0,1,0,0,0,2.22,1140,,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,0.16
derm_treatment,sqlite,basic_group_order_limit,"SELECT ins_type, AVG(height_cm) AS avg_height, AVG(weight_kg) AS avg_weight FROM patients GROUP BY ins_type ORDER BY CASE WHEN avg_height IS NULL THEN 1 ELSE 0 END DESC, avg_height DESC LIMIT 3;","What are the top 3 insurance types by average patient height in cm? Return the insurance type, average height and average weight.","SELECT ins_type,
       AVG(height_cm) AS avg_height,
       AVG(weight_kg) AS avg_weight
FROM patients
GROUP BY ins_type
ORDER BY avg_height DESC
LIMIT 3;",,,0,1,0,0,0,2.96,1293,,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,0.22
derm_treatment,sqlite,basic_join_date_group_order_limit,"SELECT p.ins_type, COUNT(DISTINCT t.patient_id) AS num_patients, AVG(o.day100_pasi_score) AS avg_pasi_score FROM treatments AS t JOIN patients AS p ON t.patient_id = p.patient_id JOIN outcomes AS o ON t.treatment_id = o.treatment_id WHERE t.end_dt BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.ins_type ORDER BY CASE WHEN avg_pasi_score IS NULL THEN 1 ELSE 0 END, avg_pasi_score LIMIT 5;","For treatments that ended in the year 2022 (from Jan 1st to Dec 31st inclusive), what is the average PASI score at day 100 and number of distinct patients per insurance type? Return the top 5 insurance types sorted by lowest average PASI score first.","SELECT p.ins_type AS insurance_type,
       AVG(o.day100_pasi_score) AS avg_day100_pasi,
       COUNT(DISTINCT t.patient_id) AS distinct_patient_count
FROM treatments t
JOIN outcomes o ON t.treatment_id = o.treatment_id
JOIN patients p ON t.patient_id = p.patient_id
WHERE t.end_dt BETWEEN '2022-01-01' AND '2022-12-31'
GROUP BY p.ins_type
ORDER BY avg_day100_pasi ASC
LIMIT 5;",,,0,1,0,0,0,5.88,1392,,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,0.26
derm_treatment,sqlite,basic_join_date_group_order_limit,"SELECT d.specialty, COUNT(*) AS num_treatments, SUM(t.tot_drug_amt) AS total_drug_amt FROM treatments AS t JOIN doctors AS d ON t.doc_id = d.doc_id WHERE t.start_dt >= DATE('now', '-6 months') GROUP BY d.specialty ORDER BY total_drug_amt DESC LIMIT 3;","What are the top 3 doctor specialties by total drug amount prescribed for treatments started in the past 6 calendar months? Return the specialty, number of treatments, and total drug amount.","SELECT d.specialty,
       COUNT(*) AS number_of_treatments,
       SUM(t.tot_drug_amt) AS total_drug_amount
FROM treatments t
JOIN doctors d ON t.doc_id = d.doc_id
WHERE t.start_dt >= DATE('now', '-6 month')
GROUP BY d.specialty
ORDER BY total_drug_amount DESC
LIMIT 3;",,,0,1,0,0,0,3.94,1466,,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,0.30
derm_treatment,sqlite,basic_join_distinct,"SELECT DISTINCT d.doc_id, d.first_name, d.last_name FROM treatments AS t JOIN doctors AS d ON t.doc_id = d.doc_id;","Return the distinct list of doctor IDs, first names and last names that have prescribed treatments.","SELECT DISTINCT d.doc_id,
                d.first_name,
                d.last_name
FROM doctors d
JOIN treatments t ON d.doc_id = t.doc_id;",,,0,1,0,0,0,2.62,1142,,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,0.16
derm_treatment,sqlite,basic_join_distinct,"SELECT DISTINCT p.patient_id, p.first_name, p.last_name FROM outcomes AS o JOIN treatments AS t ON o.treatment_id = t.treatment_id JOIN patients AS p ON t.patient_id = p.patient_id;","Return the distinct list of patient IDs, first names and last names that have outcome assessments.","SELECT DISTINCT p.patient_id,
                p.first_name,
                p.last_name
FROM patients AS p
JOIN treatments AS t ON p.patient_id = t.patient_id
JOIN outcomes AS o ON t.treatment_id = o.treatment_id;",,,0,1,0,0,0,2.49,1223,,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,0.20
derm_treatment,sqlite,basic_join_group_order_limit,"SELECT di.diag_name, COUNT(DISTINCT t.patient_id) AS num_patients, MAX(o.day100_itch_vas) AS max_itch_score FROM treatments AS t JOIN diagnoses AS di ON t.diag_id = di.diag_id JOIN outcomes AS o ON t.treatment_id = o.treatment_id GROUP BY di.diag_name ORDER BY CASE WHEN max_itch_score IS NULL THEN 1 ELSE 0 END DESC, max_itch_score DESC, CASE WHEN num_patients IS NULL THEN 1 ELSE 0 END DESC, num_patients DESC LIMIT 3;","What are the top 3 diagnoses by maximum itch VAS score at day 100 and number of distinct patients? Return the diagnosis name, number of patients, and maximum itch score.","SELECT d.diag_name AS diagnosis_name,
       COUNT(DISTINCT t.patient_id) AS num_patients,
       MAX(o.day100_itch_vas) AS max_itch_score
FROM diagnoses d
JOIN treatments t ON d.diag_id = t.diag_id
JOIN outcomes o ON t.treatment_id = o.treatment_id
GROUP BY d.diag_id,
         d.diag_name
ORDER BY max_itch_score DESC
LIMIT 3;",,,0,1,0,0,0,6.41,1548,,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,0.33
derm_treatment,sqlite,basic_join_group_order_limit,"SELECT d.drug_name, COUNT(*) AS num_treatments, AVG(t.tot_drug_amt) AS avg_drug_amt FROM treatments AS t JOIN drugs AS d ON t.drug_id = d.drug_id GROUP BY d.drug_name ORDER BY CASE WHEN num_treatments IS NULL THEN 1 ELSE 0 END DESC, num_treatments DESC, CASE WHEN avg_drug_amt IS NULL THEN 1 ELSE 0 END DESC, avg_drug_amt DESC LIMIT 5;","What are the top 5 drugs by number of treatments and average drug amount per treatment? Return the drug name, number of treatments, and average drug amount.","SELECT d.drug_name,
       COUNT(t.treatment_id) AS number_of_treatments,
       AVG(t.tot_drug_amt) AS average_drug_amount
FROM drugs d
JOIN treatments t ON d.drug_id = t.drug_id
GROUP BY d.drug_id,
         d.drug_name
ORDER BY number_of_treatments DESC
LIMIT 5;",,INCORRECT RESULTS,0,0,0,0,0,4.33,1398,,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,0.27
derm_treatment,sqlite,basic_left_join,"SELECT d.drug_id, d.drug_name FROM drugs AS d LEFT JOIN treatments AS t ON d.drug_id = t.drug_id WHERE t.drug_id IS NULL;",Return the drug IDs and names of drugs that have not been used in any treatments.,"SELECT d.drug_id,
       d.drug_name
FROM drugs d
LEFT JOIN treatments t ON d.drug_id = t.drug_id
WHERE t.treatment_id IS NULL;",,,0,1,0,0,0,3.25,1277,,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,0.22
derm_treatment,sqlite,basic_left_join,"SELECT p.patient_id, p.first_name, p.last_name FROM patients AS p LEFT JOIN treatments AS t ON p.patient_id = t.patient_id WHERE t.patient_id IS NULL;","Return the patient IDs, first names and last names of patients who have not received any treatments.","SELECT patient_id,
       first_name,
       last_name
FROM patients
WHERE patient_id NOT IN
    (SELECT patient_id
     FROM treatments);",,,0,1,0,0,0,2.95,1269,,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,0.22
ewallet,sqlite,basic_group_order_limit,"SELECT device_type, COUNT(*) AS COUNT FROM user_sessions GROUP BY device_type ORDER BY CASE WHEN COUNT IS NULL THEN 1 ELSE 0 END DESC, COUNT DESC LIMIT 2;",What are the top 2 most frequently used device types for user sessions and their respective counts?,"SELECT device_type,
       COUNT(*) AS session_count
FROM user_sessions
GROUP BY device_type
ORDER BY session_count DESC
LIMIT 2;",,,0,1,0,0,0,2.65,1412,,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,0.21
ewallet,sqlite,basic_group_order_limit,"SELECT status, COUNT(*) AS COUNT FROM wallet_transactions_daily GROUP BY status ORDER BY CASE WHEN COUNT IS NULL THEN 1 ELSE 0 END DESC, COUNT DESC LIMIT 3;",What are the top 3 most common transaction statuses and their respective counts?,"SELECT status,
       COUNT(*) AS COUNT
FROM wallet_transactions_daily
GROUP BY status
ORDER BY COUNT DESC
LIMIT 3;",,,0,1,0,0,0,2.00,1341,,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,0.18
ewallet,sqlite,basic_join_date_group_order_limit,"SELECT strftime('%Y-%m', t.created_at) AS month, COUNT(DISTINCT t.sender_id) AS active_users FROM wallet_transactions_daily AS t JOIN users AS u ON t.sender_id = u.uid WHERE t.sender_type = 0 AND t.status = 'success' AND u.status = 'active' AND t.created_at >= '2023-01-01' AND t.created_at < '2024-01-01' GROUP BY month ORDER BY month;","How many distinct active users sent money per month in 2023? Return the number of active users per month (as a date), starting from the earliest date. Do not include merchants in the query. Only include successful transactions.","SELECT strftime('%Y-%m-01', w.created_at) AS MONTH,
       COUNT(DISTINCT w.sender_id) AS active_users
FROM wallet_transactions_daily w
JOIN users u ON w.sender_id = u.uid
WHERE u.status = 'active'
  AND w.status = 'success'
  AND w.sender_type = 0
  AND w.created_at BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY MONTH
ORDER BY MONTH ASC;",,INCORRECT RESULTS,0,0,0,0,0,4.76,1901,,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,0.42
ewallet,sqlite,basic_join_date_group_order_limit,"SELECT m.name AS merchant_name, COUNT(t.txid) AS total_transactions, SUM(t.amount) AS total_amount FROM merchants AS m JOIN wallet_transactions_daily AS t ON m.mid = t.receiver_id WHERE t.receiver_type = 1 AND t.created_at >= DATE('now', '-150 days') GROUP BY m.name ORDER BY total_amount DESC LIMIT 2;","Who are the top 2 merchants (receiver type 1) by total transaction amount in the past 150 days (inclusive of 150 days ago)? Return the merchant name, total number of transactions, and total transaction amount.","SELECT m.name AS merchant_name,
       COUNT(t.txid) AS total_transactions,
       SUM(t.amount) AS total_transaction_amount
FROM wallet_transactions_daily t
JOIN merchants m ON m.mid = t.receiver_id
WHERE t.receiver_type = 1
  AND t.created_at >= date('now', '-150 days')
GROUP BY m.mid,
         m.name
ORDER BY total_transaction_amount DESC
LIMIT 2;",,,0,1,0,0,0,4.12,1689,,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,0.32
ewallet,sqlite,basic_join_distinct,SELECT DISTINCT m.mid AS merchant_id FROM merchants AS m JOIN wallet_transactions_daily AS t ON m.mid = t.receiver_id WHERE t.receiver_type = 1;,"Return the distinct list of merchant IDs that have received money from a transaction. Consider all transaction types in the results you return, but only include the merchant ids in your final answer.","SELECT DISTINCT receiver_id AS merchant_id
FROM wallet_transactions_daily
WHERE receiver_type = 1;",,,0,1,0,0,0,3.99,1548,,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,0.26
ewallet,sqlite,basic_join_distinct,SELECT DISTINCT user_id FROM notifications WHERE type = 'transaction';,Return the distinct list of user IDs who have received transaction notifications.,"SELECT DISTINCT user_id
FROM notifications
WHERE TYPE = 'transaction';",,,0,1,0,0,0,2.89,1391,,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,0.20
ewallet,sqlite,basic_join_group_order_limit,"SELECT c.code AS coupon_code, COUNT(t.txid) AS redemption_count, SUM(t.amount) AS total_discount FROM coupons AS c JOIN wallet_transactions_daily AS t ON c.cid = t.coupon_id GROUP BY c.code ORDER BY CASE WHEN redemption_count IS NULL THEN 1 ELSE 0 END DESC, redemption_count DESC LIMIT 3;","What are the top 3 most frequently used coupon codes? Return the coupon code, total number of redemptions, and total amount redeemed.","SELECT c.code AS coupon_code,
       COUNT(*) AS total_redemptions,
       SUM(t.amount) AS total_amount_redeemed
FROM wallet_transactions_daily t
JOIN coupons c ON t.coupon_id = c.cid
WHERE t.coupon_id IS NOT NULL
  AND t.status = 'success'
GROUP BY c.code
ORDER BY total_redemptions DESC
LIMIT 3;",,INCORRECT RESULTS,0,0,0,0,0,3.89,1665,,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,0.32
ewallet,sqlite,basic_join_group_order_limit,"SELECT u.country, COUNT(DISTINCT t.sender_id) AS user_count, SUM(t.amount) AS total_amount FROM users AS u JOIN wallet_transactions_daily AS t ON u.uid = t.sender_id WHERE t.sender_type = 0 GROUP BY u.country ORDER BY CASE WHEN total_amount IS NULL THEN 1 ELSE 0 END DESC, total_amount DESC LIMIT 5;","Which are the top 5 countries by total transaction amount sent by users, sender_type = 0? Return the country, number of distinct users who sent, and total transaction amount.","SELECT u.country,
       COUNT(DISTINCT w.sender_id) AS distinct_users,
       SUM(w.amount) AS total_transaction_amount
FROM wallet_transactions_daily w
JOIN users u ON u.uid = w.sender_id
WHERE w.sender_type = 0
GROUP BY u.country
ORDER BY total_transaction_amount DESC
LIMIT 5;",,,0,1,0,0,0,4.17,1599,,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,0.29
ewallet,sqlite,basic_left_join,"SELECT m.mid AS merchant_id, m.name AS merchant_name FROM merchants AS m LEFT JOIN coupons AS c ON m.mid = c.merchant_id WHERE c.cid IS NULL;",Return merchants (merchant ID and name) who have not issued any coupons.,"SELECT mid,
       name
FROM merchants
WHERE mid NOT IN
    (SELECT merchant_id
     FROM coupons);",,,0,1,0,0,0,4.07,1462,,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,0.23
ewallet,sqlite,basic_left_join,"SELECT u.uid, u.username FROM users AS u LEFT JOIN notifications AS n ON u.uid = n.user_id WHERE n.id IS NULL;",Return users (user ID and username) who have not received any notifications,"SELECT UID,
       username
FROM users
WHERE UID NOT IN
    (SELECT user_id
     FROM notifications);",,,0,1,0,0,0,2.30,1335,,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,0.18
