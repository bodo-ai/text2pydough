FileName,db_name,db_type,query_category,query,question,instructions,full_instructions,Pydough,Implemented
instruct_advanced_sqlite.csv,derm_treatment,sqlite,keywords_ratio,"SELECT d.drug_name, AVG(t.tot_drug_amt / NULLIF((JULIANDAY(t.end_dt) - JULIANDAY(t.start_dt)), 0)) AS ddd FROM treatments AS t JOIN drugs AS d ON t.drug_id = d.drug_id WHERE NOT t.end_dt IS NULL GROUP BY d.drug_name;",Calculate the average DDD for each drug. Return the drug name and average DDD value.,"DDD (defined daily dose) = total drug amount consumed during one treatment / total days of treatment (end - start date in days), where end date is not null","DDD (defined daily dose) = total drug amount consumed during one treatment / total days of treatment (end - start date in days). To find the average weight of patients treated with a specific drug, first join patients with treatments on patient_id, then filter by the drug name. To identify doctors who have prescribed a certain drug type and their respective locations, first join doctors with treatments on doc_id, then filter by the drug type. To calculate the total number of adverse events reported for treatments involving certain drug types, first join treatments with adverse_events on treatment_id, then filter by the drug type.","This query is impossible in PyDough because we do not have a method to manipulate dates, then we can not execute the difference between end date - start date. ",n
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_date_join,"SELECT strftime('%Y-%m', t.start_dt) AS MONTH, COUNT(DISTINCT t.patient_id) AS patient_count, COUNT(DISTINCT CASE WHEN d.drug_type = 'biologic' THEN t.treatment_id END) AS biologic_treatment_count FROM treatments AS t JOIN drugs AS d ON t.drug_id = d.drug_id WHERE t.start_dt >= date('now', '-3 months', 'start of month') AND t.start_dt < date('now', 'start of month') GROUP BY month;SELECT strftime('%Y-%m-01', t.start_dt) AS MONTH, COUNT(DISTINCT t.patient_id) AS patient_count, COUNT(DISTINCT CASE WHEN d.drug_type = 'biologic' THEN t.treatment_id END) AS biologic_treatment_count FROM treatments AS t JOIN drugs AS d ON t.drug_id = d.drug_id WHERE t.start_dt >= date('now', '-3 months', 'start of month') AND t.start_dt < date('now', 'start of month') GROUP BY month;SELECT strftime('%Y-%m-01 %H:%M:%S', t.start_dt) AS MONTH, COUNT(DISTINCT t.patient_id) AS patient_count, COUNT(DISTINCT CASE WHEN d.drug_type = 'biologic' THEN t.treatment_id END) AS biologic_treatment_count FROM treatments AS t JOIN drugs AS d ON t.drug_id = d.drug_id WHERE t.start_dt >= date('now', '-3 months', 'start of month') AND t.start_dt < date('now', 'start of month') GROUP BY month;","How many distinct patients had treatments in each of the last 3 months, not including the current month? Out of these, how many had treatments with biologic drugs? Return the month, patient count, and biologic treatment count.",Biologic drugs have drug_type = 'biologic'. Truncate start_dt to month for aggregation.,"To calculate the DDD (Defined Daily Dose) = the total amount of drug consumed divided by the total number of days of treatment
To count the number of adverse events reported for treatments involving any specified drug type, first join the treatments table with the adverse_events table based on treatment_id, then apply a filter by the specified drug type.
To determine the SDR (Specialty Doctor Rank) = rank doctors within their specialty by the number of distinct drugs prescribed, with those prescribing more distinct drugs achieving a higher rank
Biologic drugs have drug_type = 'biologic'. Truncate start_dt to month for aggregation.","# In Python we do not have a method to take the current date, then all the calculations will be use ""2025-02"" as month and year of reference.
selected_treatments = Treatments.WHERE(
    (start_dt >= ""2024-11-01"") & (start_dt <= ""2025-01-31"")
    )(month=JOIN_STRINGS(""-"", YEAR(start_dt), MONTH(start_dt)), biologic_treatment_count=IFF(drug.drug_type == ""biologic"", 1, 0))

patients = PARTITION(selected_treatments, name=""part"", by=(month, biologic_treatment_count))(
    MONTH=month,
    patient_count=NDISTINCT(part.patient.patient_id),
    biologic_treatment_count=biologic_treatment_count
).ORDER_BY(month.ASC())",y
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_string_matching,SELECT COUNT(*) FROM patients WHERE email LIKE '%@gmail.com' OR email LIKE '%@yahoo.com';,How many patients have a Gmail or Yahoo email address?,Patients with gmail or yahoo email addresses,"To calculate the total number of adverse events for treatments involving topical medications, join the treatments and adverse_events tables on treatment_id, and then filter based on the drug's form.
Patients with gmail or yahoo email addresses
To find the average weight of patients treated with a specific drug, join the patients and treatments tables by patient_id, then select the drug of interest
To identify doctors who have prescribed a certain type of drug and their practice states, join the doctors and treatments tables on doc_id, filtering by the drug's category","patients = DermTreatment(COUNT=COUNT(Patients.WHERE(ENDSWITH(email, ""@gmail.com"") | ENDSWITH(email, ""@yahoo.com""))))",y
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_cte_join,WITH patient_diagnosis_treatment AS (SELECT p.patient_id FROM patients AS p JOIN treatments AS t ON p.patient_id = t.patient_id JOIN diagnoses AS d ON t.diag_id = d.diag_id JOIN drugs AS dr ON t.drug_id = dr.drug_id WHERE d.diag_name = 'Psoriasis vulgaris' AND dr.drug_type = 'biologic') SELECT COUNT(DISTINCT patient_id) FROM patient_diagnosis_treatment;,How many patients have been diagnosed with 'Psoriasis vulgaris' and treated with a biologic drug? Return the distinct count of patients.,"To find the number of patients who have been diagnosed with a specific type of psoriasis and treated with a biologic drug, first join patients with treatments on patient_id, then join with diagnoses on diag_id, filtering by diagnosis and drug type.","TPC: Determine the total count of female patients To find the number of patients who have been diagnosed with a specific type of psoriasis and treated with a biologic drug, first join patients with treatments on patient_id, then join with diagnoses on diag_id, filtering by diagnosis and drug type. D7D100PIR: Compute the improvement rate of the PASI score from day 7 to day 100, considering only patients with available PASI scores for both days. AWF: Calculate the mean weight for male patients in kilograms","patients = Treatments.WHERE(LIKE(diagnosis.diag_name, ""Psoriasis vulgaris"") & LIKE(drug.drug_type, ""biologic""))

output = DermTreatment(COUNT=NDISTINCT(patients.patient_id))",y
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_date_join,"SELECT COUNT(t.treatment_id) FROM treatments AS t JOIN patients AS p ON t.patient_id = p.patient_id WHERE p.first_name = 'Alice' AND t.start_dt BETWEEN date('now', 'start of month', '-6 months') AND date('now', 'start of month', '-1 day');","How many treatments did the patient Alice have in the last 6 months, not including the current month?","Last 6 months = DATE('now', 'start of month', '-6 months') to DATE('now', 'start of month', '-1 day'). Always join treatments with patients before using the treatments table. If not mentioned, the patient name provided is the first name.","Last 6 months = DATE('now', 'start of month', '-6 months') to DATE('now', 'start of month', '-1 day'). Always join treatments with patients before using the treatments table. If not mentioned, the patient name provided is the first name. To identify doctors with certain name characteristics; To calculate the total adverse event counts for specific drug treatments; To examine patient diagnosis and treatment correlations with certain drugs.","# In PyDough we do not have a method ""now"" and can not calculate the current date. Then we are simulate, and ""now"" will be the date of ""2025-02-10"", 
# and dates should be between ""2024-08-01 and ""2025-01-31"". 

treatments = Treatments.WHERE(
    (start_dt >= ""2024-08-01"") & (start_dt <= ""2025-01-31"") & LIKE(patient.first_name, ""Alice""))

output = DermTreatment(COUNT=COUNT(treatments.treatment_id))",y
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_cte_join,"SELECT a.description, a.treatment_id, d.drug_id, d.drug_name FROM adverse_events AS a JOIN treatments AS t ON a.treatment_id = t.treatment_id JOIN drugs AS d ON t.drug_id = d.drug_id WHERE d.drug_type = 'topical';","I want the adverse events that have been reported for treatments involving topical drugs. Give me the description, treatment id, drug id and name.","To get adverse events reported for treatments involving certain drugs, first join treatments with adverse_events on treatment_id, then join with drugs on drug_id to filter on the specific drug(s).","AWF = Average weight of female patients (kg)
PASI improvement rate is calculated as ((average PASI score on day 100 - average PASI score on day 7) / average PASI score on day 7) * 100, including only patients with non-null PASI scores at both timepoints.
To calculate the total number of adverse events reported for treatments involving topical drugs, first join treatments with adverse_events on treatment_id, then filter by the drug type.
TPC = total patient count","output = AdverseEvents.treatment.WHERE(
    LIKE(drug.drug_type, ""topical"")
)(BACK(1).description, treatment_id, drug.drug_id, drug.drug_name)",y
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_cte_window,"WITH doc_drug_counts AS (SELECT d.doc_id, d.specialty, COUNT(DISTINCT t.drug_id) AS num_drugs_prescribed FROM doctors AS d JOIN treatments AS t ON d.doc_id = t.doc_id GROUP BY d.doc_id) SELECT doc_id, specialty, num_drugs_prescribed, DENSE_RANK() OVER (PARTITION BY specialty ORDER BY CASE WHEN num_drugs_prescribed IS NULL THEN 1 ELSE 0 END DESC, num_drugs_prescribed DESC) AS specialty_drug_rank FROM doc_drug_counts;","Return each doctor's doc_id, specialty, number of distinct drugs prescribed, and SDR",SDR = a doctor's rank within their specialty by number of distinct drugs prescribed. Doctors prescribing more drugs will have a higher rank,"To calculate the average weight of all patients who have been given a certain medication, join the patients and treatments tables on the patient's ID, then apply a filter for the specific medication To discover physicians who have prescribed a particular type of medication and identify their locations, link the doctors and treatments tables via the doctor's ID, then use a condition to filter by the medication type To ascertain the total count of adverse reactions recorded for treatments that involve topical medications, merge the treatments and adverse_events tables using the treatment ID, and apply a filter for the medication type. SDR = a doctor's rank within their specialty by number of distinct drugs prescribed, with doctors prescribing the most distinct drugs having rank 1",,n
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_string_matching,"SELECT first_name, last_name, specialty FROM doctors WHERE LOWER(first_name) LIKE 'J%' OR LOWER(last_name) LIKE '%son%';","Return the first name, last name and specialty of doctors whose first name starts with 'J' or last name contains 'son', case-insensitive.","Doctors whose first name starts with 'J' or last name contains 'son', case-insensitive","Doctors whose first name starts with 'J' or last name contains 'son', case-insensitive To calculate the total number of adverse events reported for treatments involving topical drugs, first join treatments with adverse_events on treatment_id, then filter by the drug type. To identify doctors who have prescribed a certain drug type and their respective states, first join doctors with treatments on doc_id, then filter by the drug type To find the average weight of patients treated with a specific drug, first join patients with treatments on patient_id, then filter by the drug name",,n
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_date_join,"SELECT strftime('%Y-%m', t.start_dt) AS month, COUNT(DISTINCT t.patient_id) AS patient_count, COUNT(DISTINCT t.treatment_id) AS treatment_count FROM treatments AS t JOIN diagnoses AS d ON t.diag_id = d.diag_id WHERE t.start_dt >= date('now', '-12 months', 'start of month') AND t.start_dt < date('now', 'start of month') GROUP BY month;","What are the PMPD and PMTC for each of the last 12 months, not including the current month",PMPD = per month patient diagnoses. PMTC = per month treatment count. Truncate start_dt to month for aggregation.,PMPD = per month patient diagnoses. PMTC = per month treatment count. Truncate start_dt to month for aggregation. TPC = count of female patients; AWF = average weight for male patients; D7D100PIR = (average PASI score at day 100 - average PASI score at day 7) / average PASI score at day 7 * 100 with non-null PASI scores at both timepoints; DDD = total consumed drug amount divided by total treatment days.,,n
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_cte_join,"WITH patient_treatment AS (SELECT p.patient_id, p.weight_kg FROM patients AS p JOIN treatments AS t ON p.patient_id = t.patient_id WHERE t.drug_id = (SELECT drug_id FROM drugs WHERE drug_name = 'Drugalin')) SELECT AVG(weight_kg) FROM patient_treatment;",What is the average weight in kg of patients treated with the drug named 'Drugalin'? Return the average weight.,"To find the average weight of patients treated with a specific drug, first join patients with treatments on patient_id, then filter by the drug name.","To find the average weight of patients treated with a specific drug, first join patients with treatments on patient_id, then filter by the drug name.
PMPD = Determine the number of diagnoses made for patients each month.
DDD = Compute the overall consumed medication amount divided by the total number of treatment days
AWF = Calculate the average weight in kilograms for patients identified as male",,n
instruct_advanced_sqlite.csv,derm_treatment,sqlite,keywords_aggregate,SELECT AVG(weight_kg) AS caw FROM patients WHERE gender = 'Male';,What is the CAW for male patients,CAW = cohort average weight in kilograms,"A doctor's Specialty Distinct Drug Rank (SDR) is established by the variety of distinct drugs they've prescribed, with the highest prescribers ranked first.
CAW = cohort average weight in kilograms
To calculate the D7D100PIR, subtract the average PASI score at the beginning of the period from the average at the end, divide by the initial average, and multiply by 100
The Defined Daily Dose (DDD) is calculated as the total consumed medication divided by the treatment duration",,n
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_cte_window,"WITH FirstTreatment AS (SELECT p.patient_id, MIN(t.start_dt) AS first_treatment_date FROM patients AS p JOIN treatments AS t ON p.patient_id = t.patient_id GROUP BY p.patient_id), NewPatientsPerYear AS (SELECT strftime('%Y', first_treatment_date) AS year, COUNT(patient_id) AS new_patients FROM FirstTreatment GROUP BY strftime('%Y', first_treatment_date)), NPI AS (SELECT year, new_patients, new_patients - LAG(new_patients, 1) OVER (ORDER BY year) AS npi FROM NewPatientsPerYear) SELECT year, new_patients, npi FROM NPI ORDER BY year;","What is the NPI for each year? Return the year, number of new patients, and NPI",NPI (new patients increase) = the increase in number of new patients compared to the previous year. New patients are defined as patients starting their first treatment and require joining the patients table with the earliest record of each patient from the treatment table on patient_id,"NPI (new patients increase) = the increase in number of new patients compared to the previous year. New patients are defined as patients starting their first treatment and require joining the patients table with the earliest record of each patient from the treatment table on patient_id
If events from two different sources need to be linked based on time, it's advised to align them by truncating both dates to the same interval for the join condition.
To find the average weight of patients treated with any drug, join the patients and treatments tables using patient_id, then filter as needed by the drug
To identify doctors who have prescribed any drug type along with their states, join the doctors with treatments on doc_id, then apply the necessary filter for the drug type",,n
instruct_advanced_sqlite.csv,derm_treatment,sqlite,keywords_ratio,SELECT (AVG(day100_pasi_score) - AVG(day7_pasi_score)) / AVG(day7_pasi_score) * 100 AS d7d100pir FROM outcomes WHERE NOT day7_pasi_score IS NULL AND NOT day100_pasi_score IS NULL;,What is the overall D7D100PIR across all treatments? Return the percentage value.,D7D100PIR (day 7 to day 100 PASI improvement rate) = (avg PASI score on day 100 - avg PASI score on day 7) / avg PASI score on day 7 * 100. This should only include patients who have non-null PASI scores for both timepoints.,"To discover the average weight of patients who have been prescribed a specific medication, begin by associating patients with treatments on patient_id, and then apply a filter by the drug name.
D7D100PIR (day 7 to day 100 PASI improvement rate) = (avg PASI score on day 100 - avg PASI score on day 7) / avg PASI score on day 7 * 100. This should only include patients who have non-null PASI scores for both timepoints.
To identify doctors who have prescribed a certain type of drug and their state of practice, initially join doctors with treatments on doc_id, followed by filtering based on the drug type
To calculate the total number of adverse events reported for treatments involving topical drugs, first link treatments with adverse_events on treatment_id, then use a filter for the drug type",,n
instruct_advanced_sqlite.csv,derm_treatment,sqlite,keywords_aggregate,SELECT COUNT(patient_id) AS pic FROM patients WHERE gender = 'Female' AND ins_type = 'private';,What is the PIC for female patients?,PIC = private insured patient count,"PIC = private insured patient count. To calculate the D7D100PIR, subtract the average PASI score at day 100 from the average at day 7, divide by the average at day 7, and multiply by 100. PI calculates the month-over-month growth in new patients. For DDD, divide the total drug quantity used by the total treatment days",,n
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_date_join,"WITH adverse_events_per_drug AS (SELECT d.drug_id, COUNT(ae.id) AS num_events FROM adverse_events AS ae JOIN treatments AS t ON ae.treatment_id = t.treatment_id AND strftime('%Y-%m', ae.reported_dt) = strftime('%Y-%m', t.start_dt) JOIN drugs AS d ON t.drug_id = d.drug_id GROUP BY d.drug_id) SELECT ae.drug_id, d.drug_name, ae.num_events FROM adverse_events_per_drug AS ae JOIN drugs AS d USING (drug_id) ORDER BY ae.num_events DESC LIMIT 1;",Which drug had the highest number of adverse events reported within the same month as the treatment start date (adverse event or treatment can be earlier than the other)? Return the number of adverse events along with the drug's id and name.,"If events from 2 different tables from the same interval are to be joined, join on the respective truncated date fields eg `FROM t1 JOIN t2 ON DATE(t1.date, '<interval>') = DATE(t2.date, '<interval>').","If events from 2 different tables from the same interval are to be joined, join on the respective truncated date fields eg `FROM t1 JOIN t2 ON DATE(t1.date, '<interval>') = DATE(t2.date, '<interval>'). To determine the total count of adverse reactions reported for treatments that include topical medications, associate treatments with adverse_events through the treatment identifier, applying a filter based on the type of medication. To identify the healthcare providers who have prescribed a specific category of medication along with their state, connect doctors to treatments by doctor identifier, filtering by the type of medication To calculate the average weight of patients who have received a certain medication, link patients to treatments via the patient identifier, then narrow down by the name of the medication",,n
instruct_advanced_sqlite.csv,derm_treatment,sqlite,instructions_cte_join,"WITH doctor_treatment AS (SELECT d.doc_id, d.loc_state FROM doctors AS d JOIN treatments AS t ON d.doc_id = t.doc_id JOIN drugs AS dr ON t.drug_id = dr.drug_id WHERE dr.drug_type = 'biologic') SELECT DISTINCT loc_state FROM doctor_treatment;",Which states do doctors who have prescribed biologic drugs reside in? Return the distinct states.,"To identify doctors who have prescribed a certain drug type and their respective states, first join doctors with treatments on doc_id, then filter by the drug type.","AWF = average weight for male patients TPC = total count of female patients Each of these metrics, while providing valuable insights for other analyses, would not alter the scope or outcome of the provided SQL query aimed at identifying states with doctors who have prescribed biologic drugs. PMPD = counts of patient diagnoses per month To identify doctors who have prescribed a certain drug type and their respective states, first join doctors with treatments on doc_id, then filter by the drug type.",,n
instruct_basic_sqlite.csv,derm_treatment,sqlite,basic_join_date_group_order_limit,"SELECT p.ins_type, COUNT(DISTINCT t.patient_id) AS num_patients, AVG(o.day100_pasi_score) AS avg_pasi_score FROM treatments AS t JOIN patients AS p ON t.patient_id = p.patient_id JOIN outcomes AS o ON t.treatment_id = o.treatment_id WHERE t.end_dt BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.ins_type ORDER BY CASE WHEN avg_pasi_score IS NULL THEN 1 ELSE 0 END, avg_pasi_score LIMIT 5;","For treatments that ended in the year 2022 (from Jan 1st to Dec 31st inclusive), what is the average PASI score at day 100 and number of distinct patients per insurance type? Return the top 5 insurance types sorted by lowest average PASI score first.",,,"selected_treatments = Treatments(ins_type=patient.ins_type).WHERE((end_dt >= ""2022-01-01"") & (end_dt <= ""2022-12-31""))

output = PARTITION(selected_treatments, name=""treatment"", by=ins_type)(
    ins_type=ins_type,
    num_patients= NDISTINCT(treatment.patient_id),
    avg_pasi_score= AVG(treatment.outcome_records.day100_pasi_score)
).TOP_K(5, by=avg_pasi_score.ASC())",y
instruct_basic_sqlite.csv,derm_treatment,sqlite,basic_join_distinct,"SELECT DISTINCT d.doc_id, d.first_name, d.last_name FROM treatments AS t JOIN doctors AS d ON t.doc_id = d.doc_id;","Return the distinct list of doctor IDs, first names and last names that have prescribed treatments.",,,"output = Doctors(doc_id, first_name, last_name).WHERE(HAS(prescribed_treatments))",y
instruct_basic_sqlite.csv,derm_treatment,sqlite,basic_join_distinct,"SELECT DISTINCT p.patient_id, p.first_name, p.last_name FROM outcomes AS o JOIN treatments AS t ON o.treatment_id = t.treatment_id JOIN patients AS p ON t.patient_id = p.patient_id;","Return the distinct list of patient IDs, first names and last names that have outcome assessments.",,,"output = Patients(patient_id, first_name, last_name).WHERE(HAS(treatments_received.WHERE(HAS(outcome_records))))",y
instruct_basic_sqlite.csv,derm_treatment,sqlite,basic_left_join,"SELECT d.drug_id, d.drug_name FROM drugs AS d LEFT JOIN treatments AS t ON d.drug_id = t.drug_id WHERE t.drug_id IS NULL;",Return the drug IDs and names of drugs that have not been used in any treatments.,,,"output = Drugs(drug_id, drug_name).WHERE(HASNOT(treatments_used_in))",y
instruct_basic_sqlite.csv,derm_treatment,sqlite,basic_left_join,"SELECT p.patient_id, p.first_name, p.last_name FROM patients AS p LEFT JOIN treatments AS t ON p.patient_id = t.patient_id WHERE t.patient_id IS NULL;","Return the patient IDs, first names and last names of patients who have not received any treatments.",,,"output = Patients(patient_id, first_name, last_name).WHERE(HASNOT(treatments_received))",y
instruct_basic_sqlite.csv,derm_treatment,sqlite,basic_group_order_limit,"SELECT specialty, COUNT(*) AS num_doctors FROM doctors GROUP BY specialty ORDER BY CASE WHEN num_doctors IS NULL THEN 1 ELSE 0 END DESC, num_doctors DESC LIMIT 2;",What are the top 2 specialties by number of doctors? Return the specialty and number of doctors.,,,"output = PARTITION(Doctors, name=""part"", by=speciality)(
    specialty=speciality,
    num_doctors=COUNT(part.doc_id)
).TOP_K(2, by=num_doctors.DESC())",y
instruct_basic_sqlite.csv,derm_treatment,sqlite,basic_join_group_order_limit,"SELECT di.diag_name, COUNT(DISTINCT t.patient_id) AS num_patients, MAX(o.day100_itch_vas) AS max_itch_score FROM treatments AS t JOIN diagnoses AS di ON t.diag_id = di.diag_id JOIN outcomes AS o ON t.treatment_id = o.treatment_id GROUP BY di.diag_name ORDER BY CASE WHEN max_itch_score IS NULL THEN 1 ELSE 0 END DESC, max_itch_score DESC, CASE WHEN num_patients IS NULL THEN 1 ELSE 0 END DESC, num_patients DESC LIMIT 3;","What are the top 3 diagnoses by maximum itch VAS score at day 100 and number of distinct patients? Return the diagnosis name, number of patients, and maximum itch score.",,,"selected_lines = Treatments(diag_name=diagnosis.diag_name).WHERE(HAS(outcome_records))

output = PARTITION(selected_lines, name=""partit"", by=diag_name)(
    diag_name=diag_name,
    num_patients=NDISTINCT(partit.patient_id),
    max_itch_score=MAX(partit.outcome_records.day100_itch_vas)
).TOP_K(3, (max_itch_score.DESC(), num_patients.DESC()))",y
instruct_basic_sqlite.csv,derm_treatment,sqlite,basic_join_date_group_order_limit,"SELECT d.specialty, COUNT(*) AS num_treatments, SUM(t.tot_drug_amt) AS total_drug_amt FROM treatments AS t JOIN doctors AS d ON t.doc_id = d.doc_id WHERE t.start_dt >= DATE('now', '-6 months') GROUP BY d.specialty ORDER BY total_drug_amt DESC LIMIT 3;","What are the top 3 doctor specialties by total drug amount prescribed for treatments started in the past 6 calendar months? Return the specialty, number of treatments, and total drug amount.",,,"# In PyDough we do not have a method DATE('now', '-6 months') to return the date. 
# Then we take 2025-02-07 (current day when it was made) as ""now"" to calculate the date if we go 6 months in the past. 
# This would be: ""2024-08-07""

selected_treatments = Treatments(speciality=doctor.speciality).WHERE(start_dt >= ""2024-08-07"")

output = PARTITION(selected_treatments, name=""part"", by=speciality)(
    speciality=speciality,
    num_treatments= COUNT(part),
    total_drug_amt=SUM(part.tot_drug_amt)
).TOP_K(3, by=total_drug_amt.DESC())",y
instruct_basic_sqlite.csv,derm_treatment,sqlite,basic_group_order_limit,"SELECT ins_type, AVG(height_cm) AS avg_height, AVG(weight_kg) AS avg_weight FROM patients GROUP BY ins_type ORDER BY CASE WHEN avg_height IS NULL THEN 1 ELSE 0 END DESC, avg_height DESC LIMIT 3;","What are the top 3 insurance types by average patient height in cm? Return the insurance type, average height and average weight.",,,"ins_types_selected = PARTITION(Patients, name=""par"", by=ins_type)(
    ins_type,
    avg_height=AVG(par.height_cm),
    avg_weight=AVG(par.weight_kg)
).TOP_K(3, by=ins_type.ASC())",y
instruct_basic_sqlite.csv,derm_treatment,sqlite,basic_join_group_order_limit,"SELECT d.drug_name, COUNT(*) AS num_treatments, AVG(t.tot_drug_amt) AS avg_drug_amt FROM treatments AS t JOIN drugs AS d ON t.drug_id = d.drug_id GROUP BY d.drug_name ORDER BY CASE WHEN num_treatments IS NULL THEN 1 ELSE 0 END DESC, num_treatments DESC, CASE WHEN avg_drug_amt IS NULL THEN 1 ELSE 0 END DESC, avg_drug_amt DESC LIMIT 5;","What are the top 5 drugs by number of treatments and average drug amount per treatment? Return the drug name, number of treatments, and average drug amount.",,,"selected_lines = Treatments.WHERE(HAS(drug))(drug_name=drug.drug_name)

output = PARTITION(selected_lines, name=""part"", by=drug_name)(
    drug_name=drug_name,
    num_treatments=COUNT(part.treatment_id),
    tot_drug_amt=AVG(part.tot_drug_amt)
).TOP_K(5, (num_treatments.DESC(), tot_drug_amt.DESC()))",y
questions_gen_sqlite.csv,derm_treatment,sqlite,date_functions,"SELECT COUNT(*) FROM treatments t JOIN diagnoses d ON t.diag_id = d.diag_id JOIN drugs dr ON t.drug_id = dr.drug_id WHERE d.diag_name LIKE '%psoriasis%' AND dr.fda_appr_dt IS NOT NULL AND t.end_dt >= DATE('now', '-6 months');",How many treatments for diagnoses containing 'psoriasis' (match with wildcards case-insensitively) involve drugs that have been FDA-approved and the treatments have ended within the last 6 months from today?,,,"# In PyDough we do not have a method DATE('now', '-6 months') to return the date. 
# Then we take 2025-02-07 (current day when it was made) as ""now"" to calculate the date if we go 6 months in the past. 
# This would be: ""2024-08-07""

treatments = Treatments.WHERE(
    (end_dt >= ""2024-08-07"") 
    & LIKE(diagnosis.diag_name,'%psoriasis%')
    & PRESENT(drug.fda_appr_dt)
)

output = DermTreatment(COUNT=COUNT(treatments))",y
questions_gen_sqlite.csv,derm_treatment,sqlite,date_functions,"WITH doc_first_treatment AS (SELECT d.doc_id, d.last_name, d.year_reg, t.treatment_id, t.start_dt, ROW_NUMBER() OVER (PARTITION BY d.doc_id ORDER BY t.start_dt ASC) AS rn FROM doctors AS d JOIN treatments AS t ON d.doc_id = t.doc_id WHERE d.year_reg = strftime('%Y', 'now', '-2 years')) SELECT last_name, year_reg, start_dt AS first_treatment_date, treatment_id AS first_treatment_id FROM doc_first_treatment WHERE rn = 1;","List the last name, year of registration, and first treatment (date and id) by doctors who were registered 2 years ago.",,,"I think this need the use of BEST() function to solve the problem, but this is not implemented yet. ",n
questions_gen_sqlite.csv,derm_treatment,sqlite,date_functions,"SELECT t.treatment_id, t.start_dt, ae.reported_dt, ae.description FROM adverse_events AS ae JOIN treatments AS t ON ae.treatment_id = t.treatment_id WHERE ae.reported_dt BETWEEN t.start_dt AND date(t.start_dt, '+10 days');","Return the treatment id, treatment start date, adverse event date and description of all adverse events that occured within 10 days after starting treatment",,,"PyDough does not support date manipulation. And in this case, we can´t simulate dates because is impossible to add for every ´start_dt´.",n
questions_gen_sqlite.csv,derm_treatment,sqlite,date_functions,"SELECT t.treatment_id, t.start_dt AS treatment_start_date, t.end_dt AS treatment_end_date, cm.start_dt AS concomitant_med_start_date, cm.end_dt AS concomitant_med_end_date FROM treatments AS t JOIN concomitant_meds AS cm ON t.treatment_id = cm.treatment_id WHERE t.is_placebo = 1 AND cm.start_dt BETWEEN t.start_dt AND date(t.start_dt, '+14 days') ORDER BY t.treatment_id;","show all placebo treatment id, start and end date, where there concomitant_meds were started within 2 weeks of starting the treatment. also return the start and end dates of all concomitant drug usage.",,,"PyDough does not support date manipulation. And in this case, we can´t simulate dates because is impossible to add for every ´start_dt´.",n
questions_gen_sqlite.csv,derm_treatment,sqlite,date_functions,"SELECT AVG(strftime('%Y', 'now') - strftime('%Y', date_of_birth)) AS avg_age FROM patients WHERE gender = 'Male' AND ins_type = 'private';",what is average age (in integer years) of all registered male patients with private insurance currently?,,,"# We can not manipulate dates in PyDough. Then we are going to use ""2025"" like current year to calculate patients age, just by year. 
selected_patients = Patients.WHERE(
    LIKE(gender, ""Male"")
    & LIKE(ins_type, ""private"")
)(age=(2025-YEAR(date_of_birth)))

output = DermTreatment(avg_age=AVG(selected_patients.age))

pydough.to_df(output)",y